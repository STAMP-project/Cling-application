import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.subarray(charArray0, (int) 'a', (-1));
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray0);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        java.util.Map<java.lang.Object, java.lang.Object> objMap10 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) charArray8);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(objMap10);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, (int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        java.lang.Byte[] byteArray7 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(byteArray9, (byte) 100);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(byteArray9, (byte) 1);
        java.lang.Byte[] byteArray20 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (byte) 0, (int) (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray9, byteArray25);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (byte) 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray25, (byte) 100);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray31, byteArray36);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray31, (byte) -1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray25, byteArray31);
        float[] floatArray43 = new float[] { (byte) -1, 1L };
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) 10L);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray43, (float) (short) 100);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.clone(floatArray43);
        java.lang.Float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray43);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray49);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray31, (java.lang.Object) floatArray50);
        boolean boolean53 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (-1.0d), (java.lang.Object) floatArray50);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray50);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[1.0, -1.0]");
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) (short) 10);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toObject(longArray9);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = equalsBuilder13.append((byte) -1, (byte) 0);
        boolean boolean17 = equalsBuilder13.isEquals();
        float[] floatArray18 = null;
        float[] floatArray19 = null;
        java.lang.String[] strArray24 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray33 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray33);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.remove(floatArray33, (int) (short) 1);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray36);
        boolean boolean38 = strList25.equals((java.lang.Object) floatArray37);
        float[] floatArray44 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray44, (float) 1);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray44);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray44);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder13.append(floatArray18, floatArray19);
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray51, byteArray56);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray51, (byte) -1);
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray51, (byte) -1);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray51, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray51);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray51, (int) (byte) -1, (int) '4');
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray67);
        java.lang.Boolean[] booleanArray75 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray75, true);
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray75, false);
        boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray75, true);
        boolean[] booleanArray84 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray81, (int) (short) 100, 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder85 = equalsBuilder13.append((java.lang.Object) byteArray67, (java.lang.Object) 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder88 = equalsBuilder85.append((long) (byte) 1, (long) 5);
        int int89 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray10, (java.lang.Object) equalsBuilder85);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder92 = equalsBuilder85.append((byte) 0, (byte) 10);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(equalsBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder85);
        org.junit.Assert.assertNotNull(equalsBuilder88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder92);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray6, (java.lang.Object) intArray13);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 10);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray18, (byte) 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) -1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 100, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        boolean boolean32 = equalsBuilder0.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder0.append('a', '#');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder0.append(' ', ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder38.append((long) 10, (long) (short) 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) 10, 0, 1.0d);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) (-1.0f), (int) (short) 1);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, 0, 0);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray29, (double) (short) 10);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, 0.0d);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray29, (double) 'a');
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray29, (double) 0, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, 1.0d);
        double[] doubleArray33 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (byte) 100, 1.0d);
        double[] doubleArray41 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray33, doubleArray41);
        float[] floatArray47 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray50 = new float[] { (byte) -1, 1L };
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray50, (float) 10L);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray41, (java.lang.Object) boolean53);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) (short) 0, 1);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray41);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray58);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray58, (double) (-1.0f), (double) '4');
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray58, (double) 10L, (double) 1.0f);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray58);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray25, doubleArray58);
        java.lang.Double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray13 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray17 = new char[] { '#', 'a', 'a' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.addAll(charArray13, charArray17);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray13, ' ');
        char[] charArray26 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray30 = new char[] { '#', 'a', 'a' };
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray30);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray30, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder7.append((java.lang.Object) ' ', (java.lang.Object) charArray30);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder7.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder38.append((double) 0.0f, 0.0d);
        java.lang.Byte[] byteArray48 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray48, (byte) 1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray48, (byte) -1);
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray53, byteArray58);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray53, (byte) -1);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray53, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder64 = equalsBuilder38.append(byteArray52, byteArray53);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder67 = equalsBuilder38.append(' ', 'a');
        long[] longArray69 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray69);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(longArray69, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray69);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.clone(longArray69);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray69);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray69);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(longArray69, (long) (short) 100);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.clone(longArray69);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray79);
        long[] longArray82 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray82);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.contains(longArray82, 0L);
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray82, (long) (byte) 0);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray82);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder67.append(longArray79, longArray82);
        long[] longArray90 = org.apache.commons.lang3.ArrayUtils.addAll(longArray3, longArray79);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray3);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder64);
        org.junit.Assert.assertNotNull(equalsBuilder67);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(equalsBuilder89);
        org.junit.Assert.assertNotNull(longArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (short) 100, (double) 'a');
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray11);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) (byte) 100, (int) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray11);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 100.0f, (int) (byte) 10);
        double[] doubleArray43 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray43, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray43);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray43, (double) (short) 1, (int) (short) 100);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray43, (double) (byte) 10, 0);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray43, (double) (short) 0, 7);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray43, 1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray43);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray43, (double) 5, 10, (double) (-1L));
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.subarray(charArray5, (int) ' ', (int) (byte) 0);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, 'a');
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '4');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray5, '4');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray17 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', (int) (short) -1);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray0);
        java.lang.Double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) (short) -1, 2, (double) (byte) 0);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray37, (double) (-1L), (int) (short) 1);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) (short) 1, (double) 1);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray37, (double) 6);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray21, (int) (byte) 0, (int) (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray27);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray27);
        java.lang.Byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray27);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray27, (byte) -1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, '#');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray19, ' ');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray19);
        boolean boolean29 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray8, (java.lang.Object) charArray19, true);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 'a');
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray31, ' ', (int) ' ');
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.add(charArray31, 'a');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4#a4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4#a4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, #, a, 4, #, a]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4#a4#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4#a4#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, #, a, 4, #, a, a]");
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) 100);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) 0, (double) 0L);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) (byte) 1, 10);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) (-1), 5, 0.0d);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (-1.0d), (int) (short) -1, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray13, (int) (short) 10, 2);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray13, (int) ' ');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray13);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray12 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray15 = new float[] { (byte) -1, 1L };
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) 10L);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray15);
        float[] floatArray25 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (-1.0f), 0);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        float[] floatArray37 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray37);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray37, (int) (byte) 1, 0);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray42, (float) (byte) 100, (int) '4');
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray42);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray42);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.clone(floatArray47);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0]");
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        java.lang.Long[] longArray2 = new java.lang.Long[] { 1L, 0L };
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray3);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray3);
        java.lang.Class<?> wildcardClass6 = longArray5.getClass();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        java.lang.Long[] longArray34 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray36);
        char[] charArray41 = new char[] { 'a', '#', ' ' };
        char[][] charArray42 = new char[][] { charArray41 };
        char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder28.append((java.lang.Object[]) longArray36, (java.lang.Object[]) charArray43);
        long[] longArray49 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray49, 1L);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray49, 0L);
        long[] longArray58 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray58, 1L);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray58, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder28.append(longArray49, longArray58);
        java.lang.Short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray64);
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray64);
        java.lang.Short[] shortArray67 = new java.lang.Short[] {};
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67, (short) 1);
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.clone(shortArray70);
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray71, (short) (byte) -1, (int) (short) 100);
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder76 = equalsBuilder28.append(shortArray66, shortArray71);
        short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.add(shortArray66, (short) -1);
        int int79 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) shortArray78);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.add(shortArray78, (short) (byte) 10);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray81, (short) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.add(shortArray81, 5, (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder76);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray8, (int) (byte) 0, (int) (byte) 1);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray12);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 100.0d, (-1.0d), 100.0d, 100.0d, (-1.0d) };
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray5);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray7);
        double[] doubleArray12 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (byte) 100, 1.0d);
        double[] doubleArray20 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray20);
        float[] floatArray26 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray29 = new float[] { (byte) -1, 1L };
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray29, (float) 10L);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray26, floatArray29);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray20, (java.lang.Object) boolean32);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) (short) 0, 1);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray36, (double) (byte) -1);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray38, (int) (byte) 100, 1);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) (byte) -1, (int) (short) 100);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray44, (double) 'a', (int) (short) 100);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray44, (double) (byte) 100, (double) (-1.0f));
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray7, doubleArray44);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray51, (double) 5, 10.0d);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray51, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, -1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 100);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray16);
        java.lang.Object[] objArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) intArray19);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, 4);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.subarray(intArray22, (int) 'a', (int) (byte) 1);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray25, 8);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        java.lang.Short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray0);
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) -1);
        java.lang.Short[] shortArray6 = new java.lang.Short[] {};
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 0);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10, (int) (short) -1);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(shortArray9, (short) 10);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray9);
        java.lang.Short[] shortArray19 = null;
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray19);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray20);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20, (short) (byte) -1);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20, (short) (byte) 0);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.add(shortArray25, (short) 10);
        java.lang.Short[] shortArray28 = new java.lang.Short[] {};
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray28);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray28, (short) 1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray28, (short) 0);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray33, (short) -1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray35, (short) 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray35);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray2, shortArray35);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.add(shortArray39, (short) -1);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) 10, (int) (short) 10);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[10]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[10]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        java.lang.Short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray3);
        java.lang.Object[] objArray5 = null;
        java.lang.Class<?>[] wildcardClassArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.AnnotatedElement[] annotatedElementArray7 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.AnnotatedElement[]) wildcardClassArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.Type[]) wildcardClassArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray5, (java.lang.Object) wildcardClassArray6, (int) 'a');
        short[] shortArray15 = new short[] { (short) -1, (byte) 0, (byte) 0, (byte) 1 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 100, (int) 'a');
        java.lang.Short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        java.lang.Class<?>[] wildcardClassArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(wildcardClassArray6, (java.lang.Object) shortArray15);
        java.lang.String str22 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray15, "hi!");
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray15);
        java.lang.Short[] shortArray24 = new java.lang.Short[] {};
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 1);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray28, (short) (byte) -1, (int) (short) 100);
        java.lang.Short[] shortArray32 = new java.lang.Short[] {};
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray32);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray32, (short) 1);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray28, shortArray35);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray35, 1, (int) (byte) 100);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.add(shortArray39, (short) (byte) 10);
        java.lang.Short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.clone(shortArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray44, (short) -1);
        java.lang.Short[] shortArray48 = new java.lang.Short[] {};
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray48);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray48, (short) 1);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray51, (short) 0);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 10, (int) (short) -1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(shortArray51, (short) 10);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray44, shortArray51);
        java.lang.Short[] shortArray61 = null;
        java.lang.Short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray61);
        java.lang.Short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray62);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray62, (short) (byte) -1);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray62, (short) (byte) 0);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.add(shortArray67, (short) 10);
        java.lang.Short[] shortArray70 = new java.lang.Short[] {};
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray70);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray70, (short) 1);
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray70, (short) 0);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray75, (short) -1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.add(shortArray77, (short) 1);
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray69, shortArray77);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray44, shortArray77);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray39, shortArray81);
        int int84 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray39, (short) (byte) 1);
        short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray39);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray6);
        org.junit.Assert.assertNotNull(annotatedElementArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertNotNull(wildcardClassArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-1,0,0,1}" + "'", str22, "{-1,0,0,1}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[10]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[10]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[]");
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[]");
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[]");
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[]");
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[1]");
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[10]");
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[]");
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray13, (java.lang.Object) (byte) -1, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (-1), (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (byte) 1);
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(intArray11, (int) '4');
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.clone(intArray11);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray16, (int) (byte) 1);
        int[] intArray19 = new int[] {};
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray20);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray16, intArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray16, (int) '4', (int) (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray15, intArray16);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray16);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, 100);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) (byte) 1, (java.lang.Object) int29);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (int) '#', 10);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        java.lang.Byte[][] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (java.lang.Object) intArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, 1);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.remove(intArray26, (int) (byte) 1);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, (int) (byte) 1, 2);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray28, 7, (int) (byte) 10);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray13, 9, 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toObject(longArray2);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, (long) (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, (long) (-1));
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 1.0f, (-1));
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) 'a', 10, (double) (-1.0f));
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) 100.0f, (int) 'a');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        java.lang.Byte[][][][] byteArray0 = new java.lang.Byte[][][][] {};
        java.lang.Byte[][][][] byteArray1 = new java.lang.Byte[][][][] {};
        java.lang.Byte[][][][] byteArray2 = new java.lang.Byte[][][][] {};
        java.lang.Byte[][][][] byteArray3 = new java.lang.Byte[][][][] {};
        java.lang.Byte[][][][] byteArray4 = new java.lang.Byte[][][][] {};
        java.lang.Byte[][][][] byteArray5 = new java.lang.Byte[][][][] {};
        java.lang.Byte[][][][][] byteArray6 = new java.lang.Byte[][][][][] { byteArray0, byteArray1, byteArray2, byteArray3, byteArray4, byteArray5 };
        java.lang.Byte[][][][][] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) 0, 4);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (short) 0);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder17 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray23 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray27 = new char[] { '#', 'a', 'a' };
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray23, ' ');
        char[] charArray36 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray40 = new char[] { '#', 'a', 'a' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray40, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = equalsBuilder17.append((java.lang.Object) ' ', (java.lang.Object) charArray40);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder48 = equalsBuilder17.append((int) (short) 1, 10);
        java.lang.Boolean boolean49 = equalsBuilder48.build();
        boolean boolean50 = equalsBuilder48.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder48.append(true, true);
        long[] longArray55 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray55);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains(longArray55, 0L);
        long[] longArray60 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray60);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray60);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray62, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder48.append(longArray55, longArray62);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray55, (long) 0);
        long[] longArray69 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray55);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray72 = org.apache.commons.lang3.ArrayUtils.add(longArray10, 9, (long) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder45);
        org.junit.Assert.assertNotNull(equalsBuilder48);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + false + "'", boolean49, false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[-1, -1]");
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(floatArray5, (float) 'a');
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (short) 100);
        float[] floatArray21 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.remove(floatArray21, (int) (short) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray21);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray21);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.add(floatArray26, (-1), (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (int) (byte) 1, (long) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.add(longArray6, 1, (long) 100);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.remove(longArray14, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray16, (-1), (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 100, 100, 1, 0]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 10, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 100, 100, 1, 0]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[0, 100, 100, 100, 1, 0]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[0, 100, 100, 1, 0]");
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (byte) 1);
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray3, (int) '#');
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream12 = strList9.stream();
        java.lang.Integer[] intArray19 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray20, intArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(intArray21, (int) '4');
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.add(intArray21, (int) (short) 100);
        boolean boolean27 = strList9.contains((java.lang.Object) intArray26);
        java.lang.Integer[] intArray28 = org.apache.commons.lang3.ArrayUtils.toObject(intArray26);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray36 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray36);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray37, intArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray38, (int) (byte) 0);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray38);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray43, (int) (byte) 1);
        int[] intArray46 = new int[] {};
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray46, intArray47);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.addAll(intArray43, intArray46);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder29.append(intArray42, intArray46);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray46);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray51, 2);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray51, (int) 'a', 100);
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.add(intArray51, (int) (short) 1);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray51);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray26, intArray51);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray3, intArray51);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.subarray(intArray51, (int) 'a', 7);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray64, (int) (short) -1);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray64, 8, 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (int) (byte) 1, (long) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray6);
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray6, obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 100, 100, 1, 0]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 10, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, ' ');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        float[] floatArray7 = new float[] {};
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray6, (java.lang.Object) floatArray7);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray7, (float) 100L);
        float[] floatArray17 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray17, 0.0f);
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray17);
        long[] longArray23 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray23);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray21, (java.lang.Object) longArray23);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray21, (float) (-1L));
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray27, (float) (byte) 1, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray27);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray27, (float) 4, 7);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray27);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray27);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray27, (float) (byte) 1);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray10, (byte) 100);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray14, (byte) -1);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray14, (byte) 10, (-1));
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray14);
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray21, byteArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray21, (byte) -1);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) -1);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.clone(byteArray31);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray31, (byte) 10);
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray35, byteArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray35, (byte) -1);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray35, (byte) -1);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray35, (byte) 1);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray31, byteArray35);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray48);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100L, 2, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100.0f, (int) (short) 100);
        double[] doubleArray18 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (byte) 100, 1.0d);
        double[] doubleArray26 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray26);
        float[] floatArray32 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray35 = new float[] { (byte) -1, 1L };
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray35, (float) 10L);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray35);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray26, (java.lang.Object) boolean38);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) (short) 0, 1);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        double[] doubleArray47 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray47, (double) (byte) 100, 1.0d);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray47, doubleArray55);
        float[] floatArray61 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray64 = new float[] { (byte) -1, 1L };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray64, (float) 10L);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray61, floatArray64);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray55, (java.lang.Object) boolean67);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray55);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray43);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray43, (int) (short) 0);
        double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.add(doubleArray43, (double) 10.0f);
        double[] doubleArray78 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray43, 0, (int) (short) 0);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray82 = org.apache.commons.lang3.ArrayUtils.add(doubleArray78, 4, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 0.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        java.lang.Character[] charArray6 = new java.lang.Character[] { 'a', 'a', 'a', '#', '4', 'a' };
        java.lang.Character[] charArray13 = new java.lang.Character[] { 'a', 'a', 'a', '#', '4', 'a' };
        java.lang.Character[] charArray20 = new java.lang.Character[] { 'a', 'a', 'a', '#', '4', 'a' };
        java.lang.Character[][] charArray21 = new java.lang.Character[][] { charArray6, charArray13, charArray20 };
        java.lang.Character[][][] charArray22 = new java.lang.Character[][][] { charArray21 };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23, '4');
        java.lang.Byte[] byteArray31 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray31);
        java.lang.Byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray32);
        boolean boolean35 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray25, (java.lang.Object) byteArray32, true);
        java.lang.Character[] charArray41 = new java.lang.Character[] { '#', '#', '#', ' ', '#' };
        java.lang.Character[][] charArray42 = new java.lang.Character[][] { charArray41 };
        java.lang.Character[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray32, (java.lang.Object[]) charArray43);
        java.lang.Character[][][] charArray45 = org.apache.commons.lang3.ArrayUtils.add(charArray22, charArray43);
        java.lang.Integer[] intArray48 = new java.lang.Integer[] { 1, 0 };
        java.lang.Integer[] intArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) charArray22, (java.lang.Object[]) intArray48);
        java.lang.Integer[] intArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray48);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray48, 9);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray48);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray54, 7, (int) (short) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Byte[] byteArray8 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray8);
        java.lang.Byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray9);
        boolean boolean12 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray2, (java.lang.Object) byteArray9, true);
        java.lang.Character[] charArray18 = new java.lang.Character[] { '#', '#', '#', ' ', '#' };
        java.lang.Character[][] charArray19 = new java.lang.Character[][] { charArray18 };
        java.lang.Character[][] charArray20 = org.apache.commons.lang3.ArrayUtils.toArray(charArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray9, (java.lang.Object[]) charArray20);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        java.lang.Byte[] byteArray29 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray29, (byte) 1);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(byteArray31, (byte) 100);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(byteArray31, (byte) 1);
        java.lang.Byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36, (byte) 100);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.add(byteArray38, (byte) 10);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.clone(byteArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray40);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.remove(byteArray40, 3);
        java.lang.Byte[] byteArray51 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray51, (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(byteArray53, (byte) 100);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(byteArray53, (byte) 1);
        java.lang.Byte[] byteArray64 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray64, (byte) 1);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray66, (int) (byte) 0, (int) (byte) 1);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray53, byteArray69);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray53, (byte) 10);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.add(byteArray53, (byte) -1);
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray40, byteArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray22, byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.add(byteArray74, (int) '4', (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 0, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 0, -1, -1, 100, 0, 0, 0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) 100);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (-1.0d), (int) (short) 0, (double) (byte) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((long) 4, (long) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder34.append('4', 'a');
        float[] floatArray46 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray46);
        float[] floatArray53 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray56 = new float[] { (byte) -1, 1L };
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray56, (float) 10L);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray53, floatArray56);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray46, floatArray56);
        float[] floatArray66 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray66);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray56, floatArray66);
        float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray75 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray76 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray75);
        float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.remove(floatArray75, (int) (short) 1);
        float[] floatArray79 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray69, floatArray78);
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray79, (float) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder82 = equalsBuilder34.append(floatArray66, floatArray81);
        float[] floatArray83 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray66);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.contains(floatArray66, (float) 7);
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray66, 0.0f, 0);
        int int90 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray66, (float) 100L);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(equalsBuilder82);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        java.lang.Short[] shortArray22 = new java.lang.Short[] {};
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22, (short) 1);
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(shortArray25, (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray25, (short) 0, (-1));
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray36, (int) (short) 10, 3);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray39);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder0.append((java.lang.Object) int31, (java.lang.Object) booleanArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, false, (int) (byte) 100);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray40, true);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (byte) 1);
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray3, (int) '#');
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray12);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray13, intArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) 'a');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray14);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray14);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray14);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray14);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23, (int) (short) -1);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray25);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        java.lang.Long[] longArray34 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray36);
        char[] charArray41 = new char[] { 'a', '#', ' ' };
        char[][] charArray42 = new char[][] { charArray41 };
        char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder28.append((java.lang.Object[]) longArray36, (java.lang.Object[]) charArray43);
        long[] longArray49 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray49, 1L);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray49, 0L);
        long[] longArray58 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray58, 1L);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray58, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder28.append(longArray49, longArray58);
        java.lang.Short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray64);
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray64);
        java.lang.Short[] shortArray67 = new java.lang.Short[] {};
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67, (short) 1);
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.clone(shortArray70);
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray71, (short) (byte) -1, (int) (short) 100);
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder76 = equalsBuilder28.append(shortArray66, shortArray71);
        short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.add(shortArray66, (short) -1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray78);
        short[] shortArray85 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray85, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray89 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray85);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.contains(shortArray85, (short) 10);
        short[] shortArray92 = org.apache.commons.lang3.ArrayUtils.clone(shortArray85);
        short[] shortArray95 = org.apache.commons.lang3.ArrayUtils.add(shortArray85, 5, (short) (byte) -1);
        short[] shortArray97 = org.apache.commons.lang3.ArrayUtils.add(shortArray95, (short) 10);
        short[] shortArray98 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray78, shortArray95);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder76);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[-1]");
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[-1]");
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(shortArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray92), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray95), "[100, 0, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray97), "[100, 0, 0, 1, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray98), "[-1, 100, 0, 0, 1, -1, -1]");
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder21.append((short) 1, (short) 100);
        boolean[] booleanArray31 = new boolean[] { false, false, false, true, false, false };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray31, true);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray31, true);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray31, (int) (short) 1, 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray31, true);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray31);
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray42, false);
        java.lang.Boolean[] booleanArray48 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray49);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray49, true);
        boolean[] booleanArray58 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray58, (int) (byte) 0, 0);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray49, booleanArray61);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray62);
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.add(booleanArray62, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder21.append(booleanArray44, booleanArray62);
        boolean boolean67 = equalsBuilder66.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder66.append((float) 0, 10.0f);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, true, true, false]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(equalsBuilder70);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray8 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray11 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray17 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[][] intArray18 = new java.lang.Integer[][] { intArray2, intArray5, intArray8, intArray11, intArray14, intArray17 };
        java.lang.String[] strArray21 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.parallelStream();
        java.lang.String[] strArray27 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.parallelStream();
        boolean boolean31 = strList22.addAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object obj32 = null;
        boolean boolean33 = strList28.equals(obj32);
        int int34 = strList28.size();
        java.lang.Integer[][] intArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray18, (java.lang.Object) strList28);
        java.util.Iterator<java.lang.String> strItor36 = strList28.iterator();
        java.lang.Object obj37 = null;
        boolean boolean38 = strList28.equals(obj37);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strList28.spliterator();
        java.util.Iterator<java.lang.String> strItor40 = strList28.iterator();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNotNull(strItor40);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        boolean boolean4 = equalsBuilder0.isEquals();
        float[] floatArray5 = null;
        float[] floatArray6 = null;
        java.lang.String[] strArray11 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray20 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.remove(floatArray20, (int) (short) 1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray23);
        boolean boolean25 = strList12.equals((java.lang.Object) floatArray24);
        float[] floatArray31 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray31, (float) 1);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray31);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray31);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder0.append(floatArray5, floatArray6);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray38, byteArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) -1);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) -1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (byte) -1, (int) '4');
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray54);
        java.lang.Boolean[] booleanArray62 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, true);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, false);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, true);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray68, (int) (short) 100, 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder0.append((java.lang.Object) byteArray54, (java.lang.Object) 7);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray54);
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray73, (byte) 1);
        byte[] byteArray76 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray73);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3, true);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray3);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, true, true]");
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        java.lang.String[] strArray1 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.stream.Stream<java.lang.String> strStream9 = strList7.parallelStream();
        java.lang.String[] strArray12 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.stream.Stream<java.lang.String> strStream15 = strList13.parallelStream();
        boolean boolean16 = strList7.addAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList13.equals(obj17);
        int int19 = strList13.size();
        boolean boolean20 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.parallelStream();
        boolean boolean27 = strList13.addAll((java.util.Collection<java.lang.String>) strList24);
        java.lang.Object[] objArray28 = strList13.toArray();
        strList13.clear();
        boolean boolean31 = strList13.add("{0,1,100,100,0}");
        java.util.stream.Stream<java.lang.String> strStream32 = strList13.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream33 = strList13.parallelStream();
        boolean boolean35 = strList13.add("{100}");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[4, hi!, 4, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[4, hi!, 4, hi!]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        boolean boolean15 = strList3.add("{{#,#,#, ,#}}");
        java.lang.String[] strArray20 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray29 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray29);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.remove(floatArray29, (int) (short) 1);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray32);
        boolean boolean34 = strList21.equals((java.lang.Object) floatArray33);
        int int35 = strList21.size();
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray36, (int) (byte) 1);
        boolean boolean39 = strList21.contains((java.lang.Object) int38);
        boolean boolean40 = strList3.addAll((java.util.Collection<java.lang.String>) strList21);
        strList21.clear();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) -1 };
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) -1 };
        byte[][] byteArray48 = new byte[][] { byteArray44, byteArray47 };
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) -1 };
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) -1 };
        byte[][] byteArray55 = new byte[][] { byteArray51, byteArray54 };
        byte[][][] byteArray56 = new byte[][][] { byteArray48, byteArray55 };
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) 10, (byte) 10 };
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) 10, (byte) 10 };
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) 10, (byte) 10 };
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) 10, (byte) 10 };
        byte[][] byteArray81 = new byte[][] { byteArray62, byteArray68, byteArray74, byteArray80 };
        byte[][][] byteArray82 = org.apache.commons.lang3.ArrayUtils.add(byteArray56, byteArray81);
        boolean boolean83 = strList21.equals((java.lang.Object) byteArray56);
        byte[][][] byteArray86 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray56, 1, (int) (short) 10);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, 0, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 10, 0, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 10, 0, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 10, 0, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray5, (long) (byte) 1, (int) (short) 1);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray5);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray13 = org.apache.commons.lang3.ArrayUtils.remove(longArray11, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[-1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray8, (byte) 100, 4);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray8);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        java.lang.Object[] objArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray3);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray3, (long) '4');
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) byteArray9);
        java.lang.Byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray9);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray11);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11, (byte) 10);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        short[] shortArray38 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray38, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray42 = new java.lang.Short[] {};
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42, (short) 1);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray38, shortArray45);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray45, (int) '4', (int) (short) 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray45, (short) 100, (int) (byte) -1);
        java.lang.Short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray45);
        short[] shortArray59 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray59, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray59, (short) (byte) 0);
        java.lang.Short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray59, (int) (byte) 100, (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder31.append(shortArray45, shortArray59);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.add(shortArray59, (short) 0);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray72, (short) (byte) -1);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray72, (int) '4', (int) '#');
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray77, (int) '4', (int) (byte) 100);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray77);
        short[] shortArray88 = new short[] { (byte) 1, (byte) 10, (short) 100, (byte) 10, (byte) 100, (short) 10 };
        int int91 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray88, (short) 1, 5);
        int int93 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray88, (short) 0);
        short[] shortArray94 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray88);
        short[] shortArray95 = org.apache.commons.lang3.ArrayUtils.clone(shortArray94);
        boolean boolean96 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray77, shortArray94);
        short[] shortArray99 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray94, 0, 8);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder70);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[100, 0, 0, 1, -1, 0]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[100, 0, 0, 1, 0]");
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[]");
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[]");
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[]");
        org.junit.Assert.assertNotNull(shortArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray88), "[1, 10, 100, 10, 100, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(shortArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray94), "[1, 10, 100, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray95), "[1, 10, 100, 10, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(shortArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray99), "[1, 10, 100, 10, 100, 10]");
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray13);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        java.lang.String str19 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray13);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0,1.0}" + "'", str19, "{-1.0,1.0}");
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (short) 100, (double) 'a');
        java.lang.Double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 3, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) (short) 100, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray42 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray42);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray43, intArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray44, (int) (byte) 0);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray44);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray49, (int) (byte) 1);
        int[] intArray52 = new int[] {};
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray52, intArray53);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.addAll(intArray49, intArray52);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder35.append(intArray48, intArray52);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray52);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray57, 2);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains(intArray57, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray57);
        java.lang.Byte[] byteArray68 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray74 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray75 = new java.lang.Byte[][] { byteArray68, byteArray74 };
        java.lang.Byte[][] byteArray78 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray75, (int) '#', 10);
        java.lang.Integer[] intArray85 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray85);
        java.lang.Byte[][] byteArray87 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray75, (java.lang.Object) intArray85);
        int[] intArray89 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray85, 1);
        int[] intArray91 = org.apache.commons.lang3.ArrayUtils.remove(intArray89, (int) (byte) 1);
        int[] intArray92 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray91);
        int[] intArray93 = org.apache.commons.lang3.ArrayUtils.clone(intArray92);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder94 = equalsBuilder34.append(intArray57, intArray93);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder94);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        float[] floatArray12 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, 0.0f);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray12);
        long[] longArray18 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray18);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray16, (java.lang.Object) longArray18);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray18);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray21);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray21);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, 0, 100, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[0, 1, 100, 100, 0, -1]");
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 0, (byte) -1, (byte) 100, (byte) 10, (byte) 0 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, -1, 100, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1, 100, 10, 0]");
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray6, (int) (short) 1, 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray17, (int) '4', (int) '#');
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.add(booleanArray20, true);
        boolean[] booleanArray29 = new boolean[] { false, false, false, true, false, false };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray29);
        boolean[] booleanArray37 = new boolean[] { false, false, false, true, false, false };
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray29, booleanArray37);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray29, false);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, false);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray29, (int) (byte) 100, 100);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray29);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray29, false);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 0);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) 0);
        java.lang.Short[] shortArray10 = new java.lang.Short[] {};
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) 1);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) (byte) 1);
        short[] shortArray23 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray27 = new java.lang.Short[] {};
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27, (short) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray30);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray23, (int) (byte) 0, (short) 0);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray23, (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray47 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray47);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray48, intArray49);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray49, (int) (byte) 0);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray49);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray54, (int) (byte) 1);
        int[] intArray57 = new int[] {};
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray57, intArray58);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.addAll(intArray54, intArray57);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder61 = equalsBuilder40.append(intArray53, intArray57);
        short[] shortArray67 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray67, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray71 = new java.lang.Short[] {};
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray71);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray71, (short) 1);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray67, shortArray74);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray67, (short) 0, 0);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.add(shortArray67, (int) (byte) 0, (short) 0);
        java.lang.Short[] shortArray82 = null;
        java.lang.Short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray82);
        java.lang.Short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray83);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray83, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder87 = equalsBuilder40.append(shortArray81, shortArray86);
        short[] shortArray88 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray39, shortArray81);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray14, shortArray88);
        short[] shortArray91 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray94 = org.apache.commons.lang3.ArrayUtils.add(shortArray91, 100, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[100, 0, 0, 1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder61);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder87);
        org.junit.Assert.assertNotNull(shortArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray88), "[100, 0, 0, 1, -1, 0, 0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(shortArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray91), "[]");
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.remove(byteArray17, 3);
        java.lang.Byte[] byteArray28 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray28, (byte) 1);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(byteArray30, (byte) 100);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(byteArray30, (byte) 1);
        java.lang.Byte[] byteArray41 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray41, (byte) 1);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray43, (int) (byte) 0, (int) (byte) 1);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray30, byteArray46);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray30, (byte) 10);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.add(byteArray30, (byte) -1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray51);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray54 = null;
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray54);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 0, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 0, -1, -1, 100, 0, 0, 0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        boolean[] booleanArray5 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray5, (int) (byte) 0, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray5, true);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, true);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        java.lang.Byte[] byteArray27 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray27);
        java.lang.Byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray28);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray28, (byte) 0);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray31, (byte) 100);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) byteArray31, 3);
        java.lang.Boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray17);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, true);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray5, booleanArray39);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray39);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.add(booleanArray39, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, true, false, false, false, false]");
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray5, ' ');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray5, 'a');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray15);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray15, '#');
        char[] charArray25 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray29 = new char[] { '#', 'a', 'a' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray25, charArray29);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray25, ' ');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray15, charArray25);
        java.lang.Character[] charArray39 = new java.lang.Character[] { ' ', '#', '4', 'a', 'a' };
        java.lang.Character[] charArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray39);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray40, '4');
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray33, charArray42);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray33, 0, '#');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray47);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray47, '#');
        char[] charArray57 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray61 = new char[] { '#', 'a', 'a' };
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.addAll(charArray57, charArray61);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray57, ' ');
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.addAll(charArray47, charArray57);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.subarray(charArray47, 0, 0);
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.addAll(charArray46, charArray47);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray69);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.clone(charArray70);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray70);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4, a, a]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#4a#4##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#4a#4##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#, 4, a, #, 4, #, #, 4, #, 4]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4#4##4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4#4##4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, 4, #, #, 4, #, a, 4, #]");
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray23, '#');
        char[] charArray36 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray40 = new char[] { '#', 'a', 'a' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray40, ' ', 2);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.subarray(charArray40, 0, (int) (byte) 10);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray30, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.add(charArray30, '4');
        java.lang.String str52 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray30, "{-1,1,0,0,100}");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, a, a]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#aa#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#aa#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, a, a, #, 4]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{#,a,a,#}" + "'", str52, "{#,a,a,#}");
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) 11, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        char[] charArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, ' ');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        java.lang.Double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray26);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28, (double) 'a');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) (short) 10);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray5);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (byte) -1);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, 100, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray16 = org.apache.commons.lang3.ArrayUtils.remove(longArray14, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder28.append(false, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((byte) 1, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((double) (byte) 0, (double) 100);
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray43);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray43, false);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray46, true, 4);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray46, false);
        boolean[] booleanArray52 = new boolean[] {};
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray52, true);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray52, false);
        boolean[] booleanArray62 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray62, (int) (byte) 0, 0);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray52, booleanArray62);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder67 = equalsBuilder34.append(booleanArray46, booleanArray62);
        java.lang.Character[] charArray68 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68, '4');
        java.lang.Character[] charArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray68);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68);
        char[] charArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray72, '#');
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray74);
        int int77 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray74, ' ');
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.clone(charArray74);
        char[] charArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray78, '4');
        char[] charArray81 = null;
        char[] charArray82 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray81);
        char[] charArray84 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray82, '#');
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.add(charArray84, 0, 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder88 = equalsBuilder34.append(charArray78, charArray84);
        equalsBuilder34.reset();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(equalsBuilder67);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[]");
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[a]");
        org.junit.Assert.assertNotNull(equalsBuilder88);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray8, 3);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, true, 9);
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray26, true);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray28, true);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray31);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray31, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray31);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.add(booleanArray31, true);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, true, false, false, false]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, true, true, false, true]");
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, ' ');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6);
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        java.lang.Integer[] intArray15 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray16, intArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, (int) (byte) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray21);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray8, (java.lang.Object) intArray23, (int) (short) 100);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23, 7);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray27, (int) (byte) 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray30, 9);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        float[] floatArray4 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray7 = new float[] { (byte) -1, 1L };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) 10L);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray4, floatArray7);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (float) '4');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray12);
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray12);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray14);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray15);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) -1, (byte) 0, (short) 10, (byte) 100 };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray6, (short) (byte) 0, (int) (short) -1);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) (byte) 10, (int) 'a');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) (byte) 10);
        java.lang.Short[] shortArray17 = null;
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray17);
        java.lang.Short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray18);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18, (short) (byte) -1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray18, "hi!");
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) (byte) 10);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.add(shortArray24, (short) (byte) 0);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray24);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, 100, -1, 0, 10, 100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, 100, -1, 0, 10, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[0]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[10, 100, -1, 0, 10, 100]");
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray30 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (byte) 100, 1.0d);
        double[] doubleArray38 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray30, doubleArray38);
        float[] floatArray44 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray47 = new float[] { (byte) -1, 1L };
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray47, (float) 10L);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray44, floatArray47);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray38, (java.lang.Object) boolean50);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray38);
        double[] doubleArray56 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray56, (double) (byte) 100, 1.0d);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray56, 2, (int) 'a');
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray56, (double) '4');
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray52, doubleArray56);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[52.0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) 0);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray3);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray3);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0, 7);
        char[] charArray16 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray20 = new char[] { '#', 'a', 'a' };
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.addAll(charArray16, charArray20);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray16, ' ');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray23);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        boolean boolean27 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) int10, (java.lang.Object) charArray24, true);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray4, '#');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray0);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 0, 1);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, (int) (byte) 100);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 2);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray4);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) intArray9);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray13);
        double[] doubleArray19 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray19, (double) (byte) 100, 1.0d);
        double[] doubleArray27 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray27);
        float[] floatArray33 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray36 = new float[] { (byte) -1, 1L };
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray36, (float) 10L);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray33, floatArray36);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray27, (java.lang.Object) boolean39);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray27, (int) (short) 0, 1);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray43, (double) (byte) -1);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray45, (int) (byte) 100, 1);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray45);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray45, (double) 100L, (int) (short) 10, 0.0d);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray45, (double) 5, (int) (short) 0);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray45, (double) 100, (double) 7);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray45, 6, (-1));
        double[] doubleArray66 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray66, (double) (byte) 100, 1.0d);
        double[] doubleArray74 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray66, doubleArray74);
        float[] floatArray80 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray83 = new float[] { (byte) -1, 1L };
        int int85 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray83, (float) 10L);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray80, floatArray83);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray74, (java.lang.Object) boolean86);
        double[] doubleArray90 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray74, (int) (short) 0, 1);
        double[] doubleArray92 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray90, (double) (byte) -1);
        double[] doubleArray93 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray62, doubleArray92);
        int int94 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray13, (java.lang.Object) doubleArray93);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        java.lang.Short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray0);
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, (int) (byte) 100, (int) (byte) -1);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.clone(shortArray6);
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray14, true);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray14, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray14, true);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray14);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray7, (java.lang.Object) booleanArray14);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        java.lang.Integer[] intArray41 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray41);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray42, intArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(intArray43, (int) '4');
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.add(intArray43, (int) (short) 100);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray43);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray43);
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray43, (int) (short) 1);
        int[] intArray53 = new int[] {};
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray53, intArray54);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder34.append(intArray43, intArray54);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray54);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray57);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.subarray(intArray57, 5, (int) (byte) 1);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray61);
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray61, 5, 0);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray61, (int) (short) 0);
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray67, (int) (short) 100);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, (long) 10);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray1, (long) 5);
        long[] longArray10 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(longArray10, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray10);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray10);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray10);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray10);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        java.lang.Object[] objArray0 = null;
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray6);
        java.lang.Boolean[] booleanArray11 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray12, true);
        boolean[] booleanArray21 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray21, (int) (byte) 0, 0);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray25);
        boolean[] booleanArray29 = new boolean[] { true };
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray33);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray34, false);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray34, true);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray29, booleanArray34);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray41, true);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) booleanArray41, (int) (short) 100);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, true, true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (int) '#', 10);
        java.lang.Byte[] byteArray22 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray22, (byte) 1);
        java.lang.Byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray22);
        java.lang.Byte[][] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray12, byteArray25);
        java.lang.String str28 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray26, "1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{{100,100,1,1,1},{100,100,1,1,1},{0,0,100,-1,-1,0}}" + "'", str28, "{{100,100,1,1,1},{100,100,1,1,1},{0,0,100,-1,-1,0}}");
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream6 = strList3.stream();
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(intArray15, (int) '4');
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (short) 100);
        boolean boolean21 = strList3.contains((java.lang.Object) intArray20);
        java.util.stream.Stream<java.lang.String> strStream22 = strList3.stream();
        strList3.clear();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strStream22);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray3);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray3, (long) (short) 100);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.add(longArray7, (long) 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray16 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray20 = new char[] { '#', 'a', 'a' };
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.addAll(charArray16, charArray20);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray16, ' ');
        char[] charArray29 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray33 = new char[] { '#', 'a', 'a' };
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray29, charArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray33, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder10.append((java.lang.Object) ' ', (java.lang.Object) charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder10.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder10.append((double) '4', 0.0d);
        boolean boolean45 = equalsBuilder44.isEquals();
        long[] longArray47 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray47);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(longArray47, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray47);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(longArray47, (long) 0);
        long[] longArray60 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.subarray(longArray60, 3, (int) (byte) 0);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray60);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.subarray(longArray60, 5, (int) (short) 10);
        long[] longArray69 = org.apache.commons.lang3.ArrayUtils.add(longArray67, 100L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder44.append(longArray47, longArray69);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray69, (long) (byte) 1);
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray69);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray7);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 100, 4]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[10, 1, -1, 1, -1, 100]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[100]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[100, 100]");
        org.junit.Assert.assertNotNull(equalsBuilder70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[-1, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray23);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray23, (int) (short) 0, (int) (byte) 100);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.add(booleanArray32, false);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true, false, false]");
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        java.lang.Object[] objArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray3);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray3);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray5, (long) (byte) 100);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(longArray7, (long) 11);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) 1, (int) '#', (double) 0.0f);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray32, (int) (short) 0, (int) '#');
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray39, (double) 9);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) 4, (double) 4);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, 0.0d, (double) 100L);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray41, (double) (-1.0f));
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) (-1.0f));
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) (byte) 10, 3);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) (-1));
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray26);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) '#');
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, 0.0d);
        double[] doubleArray37 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray37, (double) (byte) 100, 1.0d);
        double[] doubleArray45 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray37, doubleArray45);
        float[] floatArray51 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray54 = new float[] { (byte) -1, 1L };
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, (float) 10L);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray54);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray45, (java.lang.Object) boolean57);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray45, (int) (short) 0, 1);
        double[] doubleArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray61, (double) (byte) -1);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray63, (int) (byte) 100, 1);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray66, (double) 'a');
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray33, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray33, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray12 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, (int) (byte) 0, 0);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray12);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray6);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        boolean[] booleanArray28 = new boolean[] { false, false, false, true, false, false };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray28, true);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray28, true);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray28, true);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray21, booleanArray28);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray21, true);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray39, false);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, false]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        java.lang.Short[] shortArray14 = new java.lang.Short[] {};
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 1);
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray17);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) -1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray21);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[100, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        java.util.AbstractCollection[][][] abstractCollectionArray1 = new java.util.AbstractCollection[0][][];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[][][] strCollectionArray2 = (java.util.AbstractCollection<java.lang.String>[][][]) abstractCollectionArray1;
        java.util.AbstractCollection<java.lang.String>[][][] strCollectionArray3 = org.apache.commons.lang3.ArrayUtils.clone(strCollectionArray2);
        java.util.AbstractCollection[][] abstractCollectionArray6 = new java.util.AbstractCollection[0][];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[][] strCollectionArray7 = (java.util.AbstractCollection<java.lang.String>[][]) abstractCollectionArray6;
        java.util.AbstractCollection<java.lang.String>[][] strCollectionArray8 = org.apache.commons.lang3.ArrayUtils.toArray(strCollectionArray7);
        java.util.AbstractCollection<java.lang.String>[][] strCollectionArray11 = org.apache.commons.lang3.ArrayUtils.subarray(strCollectionArray7, (-1), 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<java.lang.String>[][][] strCollectionArray12 = org.apache.commons.lang3.ArrayUtils.add(strCollectionArray2, 7, strCollectionArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(abstractCollectionArray1);
        org.junit.Assert.assertNotNull(strCollectionArray2);
        org.junit.Assert.assertNotNull(strCollectionArray3);
        org.junit.Assert.assertNotNull(abstractCollectionArray6);
        org.junit.Assert.assertNotNull(strCollectionArray7);
        org.junit.Assert.assertNotNull(strCollectionArray8);
        org.junit.Assert.assertNotNull(strCollectionArray11);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) 0);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray3);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray3);
        short[] shortArray8 = null;
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray7, shortArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(shortArray7, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray7, (short) (byte) 1);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray7);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray7, (short) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.remove(shortArray16, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray6 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, (int) (short) 1);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) 10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 8, 6);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, 3, (float) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray21, (int) (byte) 0, (int) (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray8);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray28, (byte) 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray28, (byte) 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(byteArray28, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 2);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(intArray22, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray22);
        java.lang.Integer[] intArray34 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(intArray35, 1);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray22, intArray35);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.subarray(intArray22, (int) (short) 100, 4);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray42);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray21 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray25 = new char[] { '#', 'a', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray25);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray21);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.remove(charArray9, (int) (short) 1);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray32, '4', (int) (short) 10);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray36);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray36, '#');
        char[] charArray46 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray50 = new char[] { '#', 'a', 'a' };
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.addAll(charArray46, charArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray50, ' ', 2);
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.subarray(charArray50, 0, (int) (byte) 10);
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.add(charArray57, ' ');
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray40, charArray59);
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.addAll(charArray32, charArray59);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.subarray(charArray32, (int) (short) 0, (int) (short) 0);
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.subarray(charArray32, (int) '4', (int) (byte) -1);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray67, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{4,#,a,4,#}" + "'", str27, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, a, a,  ]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "#a#aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "#a#aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, a, #, a, a,  ]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, ' ');
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray0);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((byte) -1, (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((short) (byte) 100, (short) 10);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray38, 'a', (int) '4');
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 0, ' ');
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray38, '4');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        char[] charArray55 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray59 = new char[] { '#', 'a', 'a' };
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.addAll(charArray55, charArray59);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.subarray(charArray59, (int) 'a', (int) (short) 10);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray59, '4');
        char[] charArray71 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray75 = new char[] { '#', 'a', 'a' };
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.addAll(charArray71, charArray75);
        java.lang.String str77 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray71);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray71);
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.addAll(charArray59, charArray78);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder37.append(charArray49, charArray78);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder80.append((byte) 0, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder85 = equalsBuilder83.appendSuper(true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder88 = equalsBuilder85.append(false, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{4,#,a,4,#}" + "'", str77, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(equalsBuilder83);
        org.junit.Assert.assertNotNull(equalsBuilder85);
        org.junit.Assert.assertNotNull(equalsBuilder88);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.apache.commons.lang3.builder.EqualsBuilder[] equalsBuilderArray0 = new org.apache.commons.lang3.builder.EqualsBuilder[] {};
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder1 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray7 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray11 = new char[] { '#', 'a', 'a' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, ' ');
        char[] charArray20 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray24 = new char[] { '#', 'a', 'a' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray24, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = equalsBuilder1.append((java.lang.Object) ' ', (java.lang.Object) charArray24);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder32 = equalsBuilder1.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder1.append((double) '4', 0.0d);
        java.lang.Boolean[] booleanArray39 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray48 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray48, (int) (byte) 0, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray48, true);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray42, booleanArray48);
        java.lang.Boolean[] booleanArray58 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray59);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray59, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder35.append(booleanArray48, booleanArray59);
        org.apache.commons.lang3.builder.EqualsBuilder[] equalsBuilderArray64 = new org.apache.commons.lang3.builder.EqualsBuilder[] { equalsBuilder63 };
        org.apache.commons.lang3.builder.EqualsBuilder[] equalsBuilderArray65 = org.apache.commons.lang3.ArrayUtils.addAll(equalsBuilderArray0, equalsBuilderArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.builder.Builder<java.lang.Boolean>[] booleanBuilderArray67 = org.apache.commons.lang3.ArrayUtils.remove((org.apache.commons.lang3.builder.Builder<java.lang.Boolean>[]) equalsBuilderArray64, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilderArray0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder29);
        org.junit.Assert.assertNotNull(equalsBuilder32);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(equalsBuilderArray64);
        org.junit.Assert.assertNotNull(equalsBuilderArray65);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray5, (java.lang.Object) (byte) 1, (int) (byte) -1);
        long[] longArray16 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray16);
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toObject(longArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray16, (long) (-1));
        java.lang.String[] strArray25 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.parallelStream();
        java.lang.String[] strArray36 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList37.parallelStream();
        boolean boolean40 = strList31.addAll((java.util.Collection<java.lang.String>) strList37);
        java.lang.Object obj41 = null;
        boolean boolean42 = strList37.equals(obj41);
        int int43 = strList37.size();
        boolean boolean44 = strList26.removeAll((java.util.Collection<java.lang.String>) strList37);
        java.lang.String[] strArray47 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.stream.Stream<java.lang.String> strStream50 = strList48.parallelStream();
        boolean boolean51 = strList37.addAll((java.util.Collection<java.lang.String>) strList48);
        java.lang.String[] strArray53 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.lang.String[] strArray58 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.stream.Stream<java.lang.String> strStream61 = strList59.parallelStream();
        java.lang.String[] strArray64 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.stream.Stream<java.lang.String> strStream67 = strList65.parallelStream();
        boolean boolean68 = strList59.addAll((java.util.Collection<java.lang.String>) strList65);
        java.lang.Object obj69 = null;
        boolean boolean70 = strList65.equals(obj69);
        int int71 = strList65.size();
        boolean boolean72 = strList54.removeAll((java.util.Collection<java.lang.String>) strList65);
        java.util.Iterator<java.lang.String> strItor73 = strList65.iterator();
        boolean boolean74 = strList37.retainAll((java.util.Collection<java.lang.String>) strList65);
        java.util.Spliterator<java.lang.String> strSpliterator75 = strList37.spliterator();
        boolean boolean77 = strList37.add("{100,0,1,-1}");
        boolean boolean78 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray5, (java.lang.Object) (-1), (java.util.Collection<java.lang.String>) strList37);
        java.lang.Byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        java.lang.Short[] shortArray80 = new java.lang.Short[] {};
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray80);
        short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray80, (short) 1);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.clone(shortArray83);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray84);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray84);
        short[] shortArray87 = org.apache.commons.lang3.ArrayUtils.clone(shortArray84);
        int int89 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray79, (java.lang.Object) shortArray84, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strStream61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSpliterator75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[]");
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[]");
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        float[] floatArray2 = new float[] { (byte) -1, 1L };
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, (float) (short) 100);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray15 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.remove(floatArray15, (int) (short) 1);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray18);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) (byte) 10);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray21, (float) (short) 100, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray21);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray21);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray21);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 1.0, 10.0]");
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray20);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) 100L, 2, (double) (short) -1);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) 100.0f, (int) (short) 100);
        double[] doubleArray32 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (byte) 100, 1.0d);
        double[] doubleArray40 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray32, doubleArray40);
        float[] floatArray46 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray49 = new float[] { (byte) -1, 1L };
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) 10L);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray46, floatArray49);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray40, (java.lang.Object) boolean52);
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray40, (int) (short) 0, 1);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        double[] doubleArray61 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray61, (double) (byte) 100, 1.0d);
        double[] doubleArray69 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray70 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray61, doubleArray69);
        float[] floatArray75 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray78 = new float[] { (byte) -1, 1L };
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray78, (float) 10L);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray75, floatArray78);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray69, (java.lang.Object) boolean81);
        double[] doubleArray83 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray69);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray57, doubleArray69);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray21, doubleArray57);
        double[] doubleArray87 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray57, (int) (short) 0);
        int int89 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray87, 1.0d);
        double[] doubleArray90 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray87);
        int int91 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray18);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray19);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, true, false, false, false, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        java.lang.Long[] longArray34 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray36);
        char[] charArray41 = new char[] { 'a', '#', ' ' };
        char[][] charArray42 = new char[][] { charArray41 };
        char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder28.append((java.lang.Object[]) longArray36, (java.lang.Object[]) charArray43);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder28.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder28.append((float) (byte) -1, 0.0f);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray58 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray58);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray59, intArray60);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray60, (int) (byte) 0);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray60);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray65, (int) (byte) 1);
        int[] intArray68 = new int[] {};
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray68, intArray69);
        int[] intArray71 = org.apache.commons.lang3.ArrayUtils.addAll(intArray65, intArray68);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder51.append(intArray64, intArray68);
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray64, (int) (short) -1);
        java.lang.Integer[] intArray81 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray82 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray81);
        int[] intArray83 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray82, intArray83);
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray83, (int) (byte) 0);
        int[] intArray88 = org.apache.commons.lang3.ArrayUtils.add(intArray83, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder28.append(intArray74, intArray88);
        java.lang.Integer[] intArray90 = org.apache.commons.lang3.ArrayUtils.toObject(intArray74);
        int[] intArray91 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray90);
        int[] intArray92 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray91);
        int[] intArray94 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray92, (int) (byte) 100);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0]");
        org.junit.Assert.assertNotNull(equalsBuilder89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray6);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray8, (byte) -1);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray8, (byte) 100);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, 0, (int) (short) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (byte) 100, 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder0.append(0.0f, 0.0f);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = equalsBuilder0.append(false, true);
        boolean[] booleanArray34 = new boolean[] { false, false, false, true, false, false };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean[] booleanArray42 = new boolean[] { false, false, false, true, false, false };
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray34, booleanArray42);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray42, true);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray42, true, 5);
        boolean[] booleanArray56 = new boolean[] { false, false, false, true, false, false };
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray56);
        boolean[] booleanArray64 = new boolean[] { false, false, false, true, false, false };
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray56, booleanArray64);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray64, true);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray42, booleanArray68);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray69);
        java.lang.Boolean[] booleanArray74 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray74);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray74);
        java.lang.Boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray76);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder0.append(booleanArray70, booleanArray76);
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray76, true, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(equalsBuilder27);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, false, false, true, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, false, false, true, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 0);
        java.lang.Object[] objArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) shortArray9);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100, 0, 0, 1, -1]");
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray23);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray23);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, true);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray8);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray17, (int) (byte) 100);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(intArray17, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray5);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray6);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, true);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, 0.0f);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) floatArray9);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray9);
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray12);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray12, (float) (short) -1);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        long[] longArray12 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(longArray12, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        long[] longArray22 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray22, 1L);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray17, longArray24);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray24);
        java.lang.Object obj27 = null;
        boolean boolean29 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray26, obj27, true);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray26);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[0, -1, 32, 10, 1, -1, 1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) 1, 3);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray3, (double) (short) 0);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 100.0f, (double) (byte) 0);
        double[] doubleArray24 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, (double) (byte) 100, 1.0d);
        double[] doubleArray32 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray24, doubleArray32);
        float[] floatArray38 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray41 = new float[] { (byte) -1, 1L };
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray41, (float) 10L);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray38, floatArray41);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray32, (java.lang.Object) boolean44);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray32);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray46, (double) (-1.0f));
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray46);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray46, (double) (short) 100, (int) (byte) 0);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray46, (double) 1, (double) 1.0f);
        double[] doubleArray59 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray59, (double) (byte) 100, 1.0d);
        double[] doubleArray67 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray59, doubleArray67);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray68);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray68, 0.0d, (int) (byte) 100, (-1.0d));
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray68, (double) 100L);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray68);
        double[] doubleArray80 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray80, (double) (byte) 100, 1.0d);
        double[] doubleArray86 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray80, 2, (int) 'a');
        double[] doubleArray87 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray68, doubleArray80);
        double[] doubleArray90 = org.apache.commons.lang3.ArrayUtils.add(doubleArray68, (int) (short) 1, (double) (-1L));
        double[] doubleArray93 = org.apache.commons.lang3.ArrayUtils.add(doubleArray68, 6, 0.0d);
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray68);
        int int97 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray68, (double) (byte) 1, (double) (byte) 1);
        boolean boolean98 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray46, doubleArray68);
        double[] doubleArray99 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, -1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[-1.0, 10.0, 52.0, -1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray5);
        float[] floatArray13 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray13);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray13, (int) (byte) 1, 0);
        float[] floatArray21 = new float[] { (byte) -1, 1L };
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 10L);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray21);
        java.lang.Float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray21, (float) (-1L));
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray5, (java.lang.Object) floatArray27);
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray5);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.remove(longArray30, (int) (short) 1);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[0, 100, 100, 1, 0]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[0, 100, 1, 0]");
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream14 = strList3.parallelStream();
        java.lang.String[] strArray17 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.stream.Stream<java.lang.String> strStream20 = strList18.parallelStream();
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.parallelStream();
        boolean boolean27 = strList18.addAll((java.util.Collection<java.lang.String>) strList24);
        boolean boolean28 = strList3.containsAll((java.util.Collection<java.lang.String>) strList24);
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35, false);
        boolean boolean39 = strList3.remove((java.lang.Object) booleanArray35);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList3.spliterator();
        java.lang.Short[] shortArray41 = new java.lang.Short[] {};
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41, (short) 1);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.clone(shortArray44);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray45, (short) (byte) -1, (int) (short) 100);
        java.lang.Short[] shortArray49 = new java.lang.Short[] {};
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49, (short) 1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray45, shortArray52);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray45, (int) (short) 100, 0);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray56);
        boolean boolean58 = strList3.remove((java.lang.Object) shortArray56);
        strList3.clear();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        byte[] byteArray1 = new byte[] { (byte) 10 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray1);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 1, (int) (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.add(byteArray1, (int) 'a', (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), (-1), 2, 1 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, (int) (short) 100, 0);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9, (int) (byte) 100);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray11, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1, 2, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, 2, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray12 = org.apache.commons.lang3.ArrayUtils.remove(longArray6, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append(2, 5);
        equalsBuilder34.reset();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder34.append((float) (byte) 1, (float) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder38.append((float) (-1), (float) 6);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        float[] floatArray4 = new float[] { 7, (-1), (byte) 1, 1.0f };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (float) (byte) 0);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, 0, 0.0f);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, (float) 8, (int) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[7.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[7.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0, 7.0, -1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        short[] shortArray27 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray31 = new java.lang.Short[] {};
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray31);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray31, (short) 1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) 0, 0);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (int) (byte) 0, (short) 0);
        java.lang.Short[] shortArray42 = null;
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray42);
        java.lang.Short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray43);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder0.append(shortArray41, shortArray46);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray46, (short) 0, (int) 'a');
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray46, (short) 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray1, (long) (short) 10);
        long[] longArray13 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(longArray13, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray13);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(longArray13, (long) (short) 100);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray23, (long) (-1), (int) '4');
        long[] longArray28 = null;
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray23, longArray28);
        java.lang.Long[] longArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray30);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray30);
        java.lang.Long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toObject(longArray32);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.subarray(longArray32, (int) '4', (int) (short) 0);
        long[] longArray38 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray38, 0L);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray38);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray42, (long) (byte) 1, (int) (short) 1);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray42, (long) 3, (int) 'a');
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(longArray42, (long) 7);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.remove(longArray42, (int) (byte) 0);
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray52);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.addAll(longArray23, longArray53);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.add(longArray23, 0L);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray23);
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray23);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1]");
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.subarray(intArray8, 3, 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) 100);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) 0, (double) 0L);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) (byte) 1, 10);
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36);
        double[] doubleArray41 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray41, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray41);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) (short) 1, (int) (short) 100);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray41);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray41);
        java.lang.Double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray41);
        java.lang.Double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray51);
        java.lang.Double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray52);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52);
        java.lang.String[] strArray57 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.util.stream.Stream<java.lang.String> strStream60 = strList58.parallelStream();
        java.lang.String[] strArray63 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.stream.Stream<java.lang.String> strStream66 = strList64.parallelStream();
        boolean boolean67 = strList58.addAll((java.util.Collection<java.lang.String>) strList64);
        java.lang.Object obj68 = null;
        boolean boolean69 = strList64.equals(obj68);
        int int70 = strList64.size();
        boolean boolean71 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray36, (java.lang.Object) doubleArray52, (java.util.Collection<java.lang.String>) strList64);
        java.util.stream.Stream<java.lang.String> strStream72 = strList64.parallelStream();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strStream60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strStream72);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        java.lang.Character[][][][] charArray0 = new java.lang.Character[][][][] {};
        java.lang.Character[] charArray7 = new java.lang.Character[] { 'a', 'a', 'a', '#', '4', 'a' };
        java.lang.Character[] charArray14 = new java.lang.Character[] { 'a', 'a', 'a', '#', '4', 'a' };
        java.lang.Character[] charArray21 = new java.lang.Character[] { 'a', 'a', 'a', '#', '4', 'a' };
        java.lang.Character[][] charArray22 = new java.lang.Character[][] { charArray7, charArray14, charArray21 };
        java.lang.Character[][][] charArray23 = new java.lang.Character[][][] { charArray22 };
        java.lang.Character[] charArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray24, '4');
        java.lang.Byte[] byteArray32 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray32);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray33);
        boolean boolean36 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray26, (java.lang.Object) byteArray33, true);
        java.lang.Character[] charArray42 = new java.lang.Character[] { '#', '#', '#', ' ', '#' };
        java.lang.Character[][] charArray43 = new java.lang.Character[][] { charArray42 };
        java.lang.Character[][] charArray44 = org.apache.commons.lang3.ArrayUtils.toArray(charArray43);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray33, (java.lang.Object[]) charArray44);
        java.lang.Character[][][] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray23, charArray44);
        java.lang.Character[][] charArray47 = new java.lang.Character[][] {};
        java.lang.Character[][] charArray48 = new java.lang.Character[][] {};
        java.lang.Character[][][] charArray49 = new java.lang.Character[][][] { charArray47, charArray48 };
        java.lang.Character[][][] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray46, charArray49);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) charArray49);
        java.lang.Character[][][][] charArray52 = org.apache.commons.lang3.ArrayUtils.add(charArray0, charArray49);
        java.lang.Character[][][][] charArray53 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray57);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray57);
        int int60 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray59);
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray65, true);
        boolean[] booleanArray74 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray74, (int) (byte) 0, 0);
        boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray65, booleanArray77);
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray78);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray59, booleanArray78);
        boolean[] booleanArray82 = new boolean[] { true };
        java.lang.Boolean[] booleanArray86 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray87 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray86);
        int int89 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray87, false);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray87);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray87, true);
        boolean[] booleanArray93 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray82, booleanArray87);
        boolean[] booleanArray94 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray59, booleanArray93);
        boolean boolean96 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray93, true);
        boolean[] booleanArray98 = org.apache.commons.lang3.ArrayUtils.add(booleanArray93, false);
        int int99 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray53, (java.lang.Object) booleanArray93);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[]");
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(booleanArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray82), "[true]");
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertNotNull(booleanArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray87), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(booleanArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray93), "[true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray94), "[false, true, true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(booleanArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray98), "[true, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray30 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (byte) 100, 1.0d);
        double[] doubleArray38 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray30, doubleArray38);
        float[] floatArray44 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray47 = new float[] { (byte) -1, 1L };
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray47, (float) 10L);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray44, floatArray47);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray38, (java.lang.Object) boolean50);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray38);
        double[] doubleArray56 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray56, (double) (byte) 100, 1.0d);
        double[] doubleArray64 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray56, doubleArray64);
        float[] floatArray70 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray73 = new float[] { (byte) -1, 1L };
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray73, (float) 10L);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray70, floatArray73);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray64, (java.lang.Object) boolean76);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray25, doubleArray64);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray82 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray79, (int) '#', (int) (short) -1);
        java.lang.Double[] doubleArray83 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray82);
        double[] doubleArray84 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray15 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray19 = new char[] { '#', 'a', 'a' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray15, charArray19);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray15, ' ');
        char[] charArray28 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray32 = new char[] { '#', 'a', 'a' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray28, charArray32);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray32, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder9.append((java.lang.Object) ' ', (java.lang.Object) charArray32);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder9.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder40.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder43.append((long) 4, (long) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder43.append('4', 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder49.append(false, false);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray8, (java.lang.Object) equalsBuilder49);
        java.lang.Boolean boolean54 = equalsBuilder49.build();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, -1, 10, -1, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, -1, 10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(equalsBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + false + "'", boolean54, false);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 0.0d, (int) (byte) 100, (-1.0d));
        double[] doubleArray21 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray21, (double) (byte) 100, 1.0d);
        double[] doubleArray29 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray21, doubleArray29);
        float[] floatArray35 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray38 = new float[] { (byte) -1, 1L };
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray38, (float) 10L);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray35, floatArray38);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray29, (java.lang.Object) boolean41);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (short) 0, 1);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray45, (double) (byte) -1);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray47, (int) (byte) 100, 1);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray50, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray50);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray55, (int) 'a', 3);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray55, (double) 1);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.add(doubleArray55, (double) ' ');
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray62, (double) 100L);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray62);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray62, (double) 'a', 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) (byte) 100, (int) '4');
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (short) 1, 100);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray14);
        float[] floatArray24 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray24);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray24, (int) (byte) 1, 0);
        float[] floatArray32 = new float[] { (byte) -1, 1L };
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 10L);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray32);
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray32);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray36, (float) 10);
        java.lang.Float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray36);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray39, (float) 1L);
        float[] floatArray47 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray47);
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray47, (int) (byte) 1, 0);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.add(floatArray52, (float) (short) 0);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray41, floatArray52);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray52);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray18, 1.0f, 0);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.lang.Object[] objArray5 = strList3.toArray();
        java.util.Iterator<java.lang.String> strItor6 = strList3.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strList3.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strList3.spliterator();
        int int9 = strList3.size();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[, ]");
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        long[] longArray0 = null;
        long[] longArray7 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.subarray(longArray7, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray7);
        long[] longArray13 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(longArray13, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        long[] longArray23 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray23, 1L);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray18, longArray25);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray25);
        long[] longArray29 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(longArray29, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray29);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray29);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(longArray29, (long) (short) 100);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray29);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray29, (long) 3, (int) (byte) 100);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.addAll(longArray25, longArray29);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray43);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray47 = org.apache.commons.lang3.ArrayUtils.add(longArray43, (int) '#', (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[100, -1, 1, -1, 1, 10, 32, -1, 0]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, -1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray32, (int) (byte) -1, (int) (short) 100);
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, (double) (short) 0, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray35, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray9, '4');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, '4');
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray19);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, 'a', (int) '4');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 0, ' ');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '4');
        char[] charArray30 = null;
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray30);
        char[] charArray37 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray41 = new char[] { '#', 'a', 'a' };
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.addAll(charArray37, charArray41);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray41, 'a', (int) (byte) 0);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray41, '4');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray31, charArray41);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray19, charArray41);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.clone(charArray41);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray18, (java.lang.Object) charArray50, (int) ' ');
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray50);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray50, '4', (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray50);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, a, a, 4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "aa#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "aa#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a, a, #]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        float[] floatArray4 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray7 = new float[] { (byte) -1, 1L };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) 10L);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray4, floatArray7);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (float) '4');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) (byte) 100);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray13);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (int) '4', 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        boolean boolean33 = equalsBuilder31.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder31.append(true, true);
        long[] longArray38 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray38, 0L);
        long[] longArray43 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray43);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray45, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder31.append(longArray38, longArray45);
        long[] longArray51 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(longArray51, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray61 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray61, 1L);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray56, longArray63);
        long[] longArray71 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.subarray(longArray71, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray71);
        java.lang.Long[] longArray76 = org.apache.commons.lang3.ArrayUtils.toObject(longArray71);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder49.append(longArray63, longArray71);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.contains(longArray71, (long) (byte) -1);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.add(longArray71, 0, (long) (byte) 10);
        long[] longArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray83, (long) 5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[10, 100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[10, 100, -1, 1, -1, 1, 10]");
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray14, byteArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) -1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 1);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray14);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 0, (int) (byte) 1);
        java.lang.Byte[] byteArray37 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 100);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 1);
        java.lang.Byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray39);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray44, (byte) 100);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray46, (byte) 10);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.clone(byteArray48);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, 5, (byte) -1);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray52);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray14, byteArray52);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray14, (byte) 1);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        float[] floatArray2 = new float[] { (byte) -1, 1L };
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, (float) (short) 100);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 0.0f);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) (-1));
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray11);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) (short) 1, 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 6, 5);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray3);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray3);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray3, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, 4, (int) '4');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) (short) 0);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 10.0f);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) (byte) 0);
        java.lang.Short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) -1);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[100, 0, 0, 1]");
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 100);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray16);
        java.lang.Object[] objArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) intArray19);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, 4);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray22, 9);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray21 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray25 = new char[] { '#', 'a', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray25);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray21);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray28);
        boolean[] booleanArray36 = new boolean[] { false, false, false, true, false, false };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray36);
        boolean[] booleanArray44 = new boolean[] { false, false, false, true, false, false };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray44);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray36, booleanArray44);
        java.lang.String[] strArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.String[] strArray49 = org.apache.commons.lang3.ArrayUtils.add(strArray47, "{true,true}");
        boolean boolean50 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray29, (java.lang.Object) boolean46, strArray49);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray29);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.add(charArray29, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{4,#,a,4,#}" + "'", str27, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "#aa4#a4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "#aa4#a4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, a, a, 4, #, a, 4, #, #]");
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        java.lang.Short[] shortArray22 = new java.lang.Short[] {};
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22, (short) 1);
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(shortArray25, (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray25, (short) 0, (-1));
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray36, (int) (short) 10, 3);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray39);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder0.append((java.lang.Object) int31, (java.lang.Object) booleanArray40);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder0.append(3, (int) (short) 0);
        equalsBuilder44.reset();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray32);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray32);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray32, (double) (short) 10, (int) '#');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray32, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        java.lang.Byte[] byteArray16 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray16);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray17, (byte) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray20, (byte) 100);
        java.lang.Byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray20);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray6, (java.lang.Object) byteArray20, 3);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray6);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray12 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, (int) (byte) 0, 0);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray12);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray6);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        java.lang.Object[] objArray22 = null;
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray26);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray28);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray22, (java.lang.Object) booleanArray28);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray28, (int) (byte) 100, (int) (short) 1);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray28);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        double[] doubleArray0 = null;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray0);
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.add(doubleArray1, 5, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toObject(longArray2);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.subarray(longArray2, (int) '4', (int) (short) 0);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, (int) (short) 0, '4');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray16);
        char[] charArray23 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray27 = new char[] { '#', 'a', 'a' };
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray23, ' ');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray30, '4');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(charArray32, '4');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray16, charArray32);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray35, 'a');
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray35, ' ');
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray35, 'a', (int) ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        byte[] byteArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 10, 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray6, (int) (short) 1);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray6);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray6);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, (int) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, false, false]");
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        float[] floatArray15 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, 0.0f);
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        long[] longArray21 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray21);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray19, (java.lang.Object) longArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray21);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, (long) 6);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        java.lang.Long[] longArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray27);
        java.lang.Object obj29 = null;
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray27, obj29);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray27, (long) (byte) 1);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray32);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1]");
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream14 = strList3.parallelStream();
        java.lang.String[] strArray17 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.stream.Stream<java.lang.String> strStream20 = strList18.parallelStream();
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.parallelStream();
        boolean boolean27 = strList18.addAll((java.util.Collection<java.lang.String>) strList24);
        boolean boolean28 = strList3.containsAll((java.util.Collection<java.lang.String>) strList24);
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35, false);
        boolean boolean39 = strList3.remove((java.lang.Object) booleanArray35);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList3.spliterator();
        boolean boolean41 = strList3.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream42 = strList3.parallelStream();
        java.lang.String[] strArray47 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray56 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray56);
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.remove(floatArray56, (int) (short) 1);
        float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray50, floatArray59);
        boolean boolean61 = strList48.equals((java.lang.Object) floatArray60);
        strList48.clear();
        boolean boolean64 = strList48.contains((java.lang.Object) "");
        java.util.stream.Stream<java.lang.String> strStream65 = strList48.stream();
        int int66 = strList48.size();
        boolean boolean67 = strList3.containsAll((java.util.Collection<java.lang.String>) strList48);
        java.util.Spliterator<java.lang.String> strSpliterator68 = strList3.spliterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strStream65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strSpliterator68);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[][] doubleArray28 = new java.lang.Double[][] { doubleArray12, doubleArray17, doubleArray22, doubleArray27 };
        java.lang.Double[][] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray29);
        long[] longArray38 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.subarray(longArray38, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray38, (java.lang.Object) booleanArray49);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray29, (java.lang.Object) longArray38, (int) (short) 10);
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.addAll(longArray2, longArray38);
        java.lang.Long[] longArray54 = org.apache.commons.lang3.ArrayUtils.toObject(longArray53);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, 100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray54);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray11, (short) (byte) 10);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray11, (short) (byte) -1);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray11);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, (int) (short) 1, (int) (short) 100);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.remove(shortArray20, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 0, 1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 0, 1, -1]");
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), (-1), 2, 1 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.subarray(intArray5, 0, (int) (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray8, (int) (byte) 100, (int) (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray23, intArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray24, (int) (byte) 0);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray24);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray29, (int) (byte) 1);
        int[] intArray32 = new int[] {};
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray32, intArray33);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray29, intArray32);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder15.append(intArray28, intArray32);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray28, (int) (short) -1);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray28);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray39);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray40);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.add(intArray40, (int) (short) 0, 4);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1, 2, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[4, -1]");
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        byte[] byteArray1 = new byte[] { (byte) 10 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.clone(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (byte) 0, 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (-1.0f), (double) '4');
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) (short) 0, (int) (byte) 1);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 7, (double) 6);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray28, (double) 7);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray6);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) 10, (int) 'a');
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) -1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 100, 1, -1, 1]");
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, true };
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray11, false);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, true);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true, true, true, true]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray5, ' ');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray5);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray17 = org.apache.commons.lang3.ArrayUtils.remove(charArray15, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, a, 4, #]");
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray13);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray24 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray24);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray24, (int) (byte) 1, 0);
        float[] floatArray32 = new float[] { (byte) -1, 1L };
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 10L);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray32);
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray32);
        float[] floatArray39 = new float[] { (byte) -1, 1L };
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray39, (float) 10L);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray39);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray39);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray39, 0.0f, (-1));
        float[] floatArray52 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray52);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray53, 100.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray55);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray39, floatArray55);
        float[] floatArray63 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray63);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray63, 0.0f);
        java.lang.Float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray63);
        float[] floatArray73 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray74 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray73);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray73);
        float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray73, (int) (byte) 1, 0);
        float[] floatArray81 = new float[] { (byte) -1, 1L };
        int int83 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray81, (float) 10L);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray78, floatArray81);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray81);
        float[] floatArray86 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray63, floatArray81);
        float[] floatArray88 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray86, (float) 'a');
        float[] floatArray90 = org.apache.commons.lang3.ArrayUtils.add(floatArray86, 0.0f);
        float[] floatArray91 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray86);
        float[] floatArray92 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray57, floatArray86);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray13, floatArray86);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[35.0, 10.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 1.0, 35.0, 10.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(floatArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray86), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray88), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray90), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray92), "[-1.0, 1.0, 35.0, 10.0, 100.0, 100.0, -1.0, -1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        java.lang.Short[] shortArray8 = new java.lang.Short[] {};
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8, (short) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray4, (int) (short) 100, 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) 10);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, 100, 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) -1, (int) (byte) 100);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.remove(shortArray15, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        java.lang.Long[] longArray34 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray36);
        char[] charArray41 = new char[] { 'a', '#', ' ' };
        char[][] charArray42 = new char[][] { charArray41 };
        char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder28.append((java.lang.Object[]) longArray36, (java.lang.Object[]) charArray43);
        long[] longArray49 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray49, 1L);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray49, 0L);
        long[] longArray58 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray58, 1L);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray58, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder28.append(longArray49, longArray58);
        java.lang.Short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray64);
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray64);
        java.lang.Short[] shortArray67 = new java.lang.Short[] {};
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67, (short) 1);
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.clone(shortArray70);
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray71, (short) (byte) -1, (int) (short) 100);
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder76 = equalsBuilder28.append(shortArray66, shortArray71);
        short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.add(shortArray66, (short) -1);
        int int79 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) shortArray78);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.add(shortArray78, (short) (byte) 10);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray78, 4, (int) 'a');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder76);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[-1, 10]");
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[]");
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        int[] intArray0 = null;
        int[] intArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray0);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.subarray(intArray0, (int) (byte) -1, 4);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNull(intArray4);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) 1, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray13);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray15, (double) 100, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = equalsBuilder24.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder27.append(0, (-1));
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(equalsBuilder27);
        org.junit.Assert.assertNotNull(equalsBuilder30);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray6);
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) byteArray9);
        java.lang.Object obj11 = null;
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray9, obj11, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray5, (long) (byte) 1, (int) (short) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray5, (long) 3, (int) 'a');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(longArray5, (long) 7);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.remove(longArray5, (int) (byte) 0);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(longArray17, (long) (byte) 1);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[-1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        short[] shortArray9 = null;
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray10, (short) -1);
        short[] shortArray17 = new short[] { (short) -1, (byte) 0, (byte) 0, (byte) 1 };
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) (byte) 100, (int) 'a');
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray21, (short) (byte) 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) (byte) 100);
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray23);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray23, (int) (byte) 100, 1);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray10, shortArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray10);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        double[] doubleArray14 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) (byte) 100, 1.0d);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 100.0d, (int) (short) 1, (double) 1L);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean10, (java.lang.Object) doubleArray14);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray23);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) 0);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 10.0, 52.0]");
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        byte[] byteArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray0, (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray8);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) '4');
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray12);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, true, true, false]");
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, 4, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) (byte) -1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) (short) 1, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.remove(floatArray10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray21 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray25 = new char[] { '#', 'a', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray25);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray21);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '4');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "aa#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "aa#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, a, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{4,#,a,4,#}" + "'", str27, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        java.lang.Short[] shortArray22 = new java.lang.Short[] {};
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22, (short) 1);
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(shortArray25, (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray25, (short) 0, (-1));
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray36, (int) (short) 10, 3);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray39);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder0.append((java.lang.Object) int31, (java.lang.Object) booleanArray40);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray42);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray42);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray42, 'a', (int) '4');
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.add(charArray42, 0, ' ');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray42, '4');
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray55);
        char[] charArray62 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray66 = new char[] { '#', 'a', 'a' };
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.addAll(charArray62, charArray66);
        java.lang.String str68 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray62);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray55, charArray62);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder41.append(charArray42, charArray55);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray55);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{4,#,a,4,#}" + "'", str68, "{4,#,a,4,#}");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(equalsBuilder70);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[]");
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (int) (byte) 1, (long) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, (long) (byte) 100);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[0, 100, 100, 1, 0]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 10, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray0);
        double[] doubleArray7 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray7, (double) (byte) 100, 1.0d);
        double[] doubleArray15 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray7, doubleArray15);
        float[] floatArray21 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray24 = new float[] { (byte) -1, 1L };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray24, (float) 10L);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray21, floatArray24);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray15, (java.lang.Object) boolean27);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray15, (int) (short) 0, 1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray31, (double) (byte) -1);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray33, (int) (byte) 100, 1);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray33, 0, (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray33);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) charArray0, (java.lang.Object) doubleArray33);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) -1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, (int) (short) -1, 5);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.clone(shortArray9);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray13);
        java.lang.Class<?> wildcardClass15 = shortArray13.getClass();
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray32, (int) (byte) -1, (int) (short) 100);
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, (double) (short) 0, (int) (byte) -1);
        double[] doubleArray43 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray43, (double) (byte) 100, 1.0d);
        double[] doubleArray51 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray43, doubleArray51);
        float[] floatArray57 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray60 = new float[] { (byte) -1, 1L };
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray60, (float) 10L);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray57, floatArray60);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray51, (java.lang.Object) boolean63);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray51, (int) (short) 0, 1);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray67, (double) (byte) -1);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray69, (int) (byte) 100, 1);
        double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray69, 0, (int) (short) 10);
        double[] doubleArray78 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray75, (int) (byte) 10, 100);
        double[] doubleArray79 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray35, doubleArray78);
        double[] doubleArray82 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray79, (int) (short) 100, 0);
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray79, (int) (short) 100, 5);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        java.lang.Short[] shortArray8 = new java.lang.Short[] {};
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8, (short) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray11, 1, (int) (byte) 100);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray15, (short) (byte) 10);
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray18);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.clone(shortArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray20, (short) -1);
        java.lang.Short[] shortArray24 = new java.lang.Short[] {};
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 1);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) 0);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray27);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray27, (short) (byte) 10, (int) (short) -1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(shortArray27, (short) 10);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray27);
        java.lang.Short[] shortArray37 = null;
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray37);
        java.lang.Short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray38);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) (byte) -1);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) (byte) 0);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.add(shortArray43, (short) 10);
        java.lang.Short[] shortArray46 = new java.lang.Short[] {};
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray46);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray46, (short) 1);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray46, (short) 0);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) -1);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.add(shortArray53, (short) 1);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray45, shortArray53);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray20, shortArray53);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray15, shortArray57);
        java.lang.Short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray15, (short) 1);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[10]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[10]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[10]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[]");
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        boolean[] booleanArray5 = new boolean[] { false, true, false, false, false };
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray5, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray5);
        java.lang.Byte[] byteArray14 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray14);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray15);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray16);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray8, (java.lang.Object) byteArray16);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray20);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray22, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, true, false, false, false]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, false, false]");
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        char[] charArray1 = new char[] { 'a' };
        char[][] charArray2 = new char[][] { charArray1 };
        char[] charArray4 = new char[] { 'a' };
        char[][] charArray5 = new char[][] { charArray4 };
        char[] charArray7 = new char[] { 'a' };
        char[][] charArray8 = new char[][] { charArray7 };
        char[] charArray10 = new char[] { 'a' };
        char[][] charArray11 = new char[][] { charArray10 };
        char[][][] charArray12 = new char[][][] { charArray2, charArray5, charArray8, charArray11 };
        char[] charArray14 = new char[] { 'a' };
        char[][] charArray15 = new char[][] { charArray14 };
        char[] charArray17 = new char[] { 'a' };
        char[][] charArray18 = new char[][] { charArray17 };
        char[] charArray20 = new char[] { 'a' };
        char[][] charArray21 = new char[][] { charArray20 };
        char[] charArray23 = new char[] { 'a' };
        char[][] charArray24 = new char[][] { charArray23 };
        char[][][] charArray25 = new char[][][] { charArray15, charArray18, charArray21, charArray24 };
        char[] charArray27 = new char[] { 'a' };
        char[][] charArray28 = new char[][] { charArray27 };
        char[] charArray30 = new char[] { 'a' };
        char[][] charArray31 = new char[][] { charArray30 };
        char[] charArray33 = new char[] { 'a' };
        char[][] charArray34 = new char[][] { charArray33 };
        char[] charArray36 = new char[] { 'a' };
        char[][] charArray37 = new char[][] { charArray36 };
        char[][][] charArray38 = new char[][][] { charArray28, charArray31, charArray34, charArray37 };
        char[][][][] charArray39 = new char[][][][] { charArray12, charArray25, charArray38 };
        char[][][][] charArray40 = org.apache.commons.lang3.ArrayUtils.toArray(charArray39);
        java.lang.Cloneable[][] cloneableArray41 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.Cloneable[][]) charArray39);
        double[] doubleArray45 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray45, (double) (byte) 100, 1.0d);
        double[] doubleArray53 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray45, doubleArray53);
        float[] floatArray59 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray62 = new float[] { (byte) -1, 1L };
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray62, (float) 10L);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray59, floatArray62);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray53, (java.lang.Object) boolean65);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray53);
        java.lang.Double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray67);
        double[] doubleArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray68, (double) 100);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray68);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray39, (java.lang.Object) doubleArray68, 6);
        double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray68, (double) ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[a]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertNotNull(cloneableArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        java.lang.Object[] objArray0 = null;
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray1, byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) -1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) -1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 10);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) byteArray15);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        java.lang.String[] strArray1 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.stream.Stream<java.lang.String> strStream9 = strList7.parallelStream();
        java.lang.String[] strArray12 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.stream.Stream<java.lang.String> strStream15 = strList13.parallelStream();
        boolean boolean16 = strList7.addAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList13.equals(obj17);
        int int19 = strList13.size();
        boolean boolean20 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.parallelStream();
        boolean boolean27 = strList13.addAll((java.util.Collection<java.lang.String>) strList24);
        strList24.clear();
        java.util.Iterator<java.lang.String> strItor29 = strList24.iterator();
        java.util.stream.Stream<java.lang.String> strStream30 = strList24.stream();
        java.util.stream.Stream<java.lang.String> strStream31 = strList24.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strList24.spliterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strSpliterator32);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 10);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 10);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray3, (int) '4', (-1));
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray11, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, 0.0d);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray10, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray13 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray17 = new char[] { '#', 'a', 'a' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.addAll(charArray13, charArray17);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray13, ' ');
        char[] charArray26 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray30 = new char[] { '#', 'a', 'a' };
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray30);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray30, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder7.append((java.lang.Object) ' ', (java.lang.Object) charArray30);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder7.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder38.append((double) 0.0f, 0.0d);
        java.lang.Byte[] byteArray48 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray48, (byte) 1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray48, (byte) -1);
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray53, byteArray58);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray53, (byte) -1);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray53, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder64 = equalsBuilder38.append(byteArray52, byteArray53);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder67 = equalsBuilder38.append(' ', 'a');
        long[] longArray69 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray69);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(longArray69, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray69);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.clone(longArray69);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray69);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray69);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(longArray69, (long) (short) 100);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.clone(longArray69);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray79);
        long[] longArray82 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray82);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.contains(longArray82, 0L);
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray82, (long) (byte) 0);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray82);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder67.append(longArray79, longArray82);
        long[] longArray90 = org.apache.commons.lang3.ArrayUtils.addAll(longArray3, longArray79);
        long[] longArray91 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray90);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray93 = org.apache.commons.lang3.ArrayUtils.remove(longArray90, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder64);
        org.junit.Assert.assertNotNull(equalsBuilder67);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(equalsBuilder89);
        org.junit.Assert.assertNotNull(longArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(longArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray91), "[-1, -1]");
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.apache.commons.lang3.builder.EqualsBuilder[] equalsBuilderArray0 = new org.apache.commons.lang3.builder.EqualsBuilder[] {};
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder1 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray7 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray11 = new char[] { '#', 'a', 'a' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, ' ');
        char[] charArray20 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray24 = new char[] { '#', 'a', 'a' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray24, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = equalsBuilder1.append((java.lang.Object) ' ', (java.lang.Object) charArray24);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder32 = equalsBuilder1.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder1.append((double) '4', 0.0d);
        java.lang.Boolean[] booleanArray39 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray48 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray48, (int) (byte) 0, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray48, true);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray42, booleanArray48);
        java.lang.Boolean[] booleanArray58 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray59);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray59, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder35.append(booleanArray48, booleanArray59);
        org.apache.commons.lang3.builder.EqualsBuilder[] equalsBuilderArray64 = new org.apache.commons.lang3.builder.EqualsBuilder[] { equalsBuilder63 };
        org.apache.commons.lang3.builder.EqualsBuilder[] equalsBuilderArray65 = org.apache.commons.lang3.ArrayUtils.addAll(equalsBuilderArray0, equalsBuilderArray64);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) equalsBuilderArray0);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) equalsBuilderArray0);
        org.junit.Assert.assertNotNull(equalsBuilderArray0);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder29);
        org.junit.Assert.assertNotNull(equalsBuilder32);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(equalsBuilderArray64);
        org.junit.Assert.assertNotNull(equalsBuilderArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 100);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, (int) ' ');
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, 3);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100L, 2, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100.0f, (int) (short) 100);
        double[] doubleArray18 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (byte) 100, 1.0d);
        double[] doubleArray26 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray26);
        float[] floatArray32 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray35 = new float[] { (byte) -1, 1L };
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray35, (float) 10L);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray35);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray26, (java.lang.Object) boolean38);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) (short) 0, 1);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        double[] doubleArray47 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray47, (double) (byte) 100, 1.0d);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray47, doubleArray55);
        float[] floatArray61 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray64 = new float[] { (byte) -1, 1L };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray64, (float) 10L);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray61, floatArray64);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray55, (java.lang.Object) boolean67);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray55);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray43);
        java.lang.Double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray72);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray73);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray43, 0.0d);
        double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray76);
        double[] doubleArray81 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray81, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray81);
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray81, (double) (short) 1, (int) (short) 100);
        int int91 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray81, (double) 10, (double) (byte) 100);
        int int93 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray81, (double) (short) 0);
        double[] doubleArray94 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray81);
        double[] doubleArray95 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray81);
        double[] doubleArray96 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray95);
        double[] doubleArray97 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray96);
        double[] doubleArray98 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray77, doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[1.0, 10.0, -1.0, 52.0, 10.0, -1.0]");
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray2);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray10);
        long[] longArray14 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray14);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray10, longArray14);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray10, 10L);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10]");
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray21, (int) (byte) 0, (int) (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray8);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        java.lang.Byte[] byteArray36 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36, (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(byteArray38, (byte) 100);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(byteArray38, (byte) 1);
        java.lang.Byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43, (byte) 100);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.add(byteArray45, (byte) 10);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.clone(byteArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray47);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.add(byteArray47, (byte) 100);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray51, (byte) 0);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray51, (byte) 10, 5);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray51);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.add(byteArray51, (byte) 10);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray59);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 0, -1, -1, 100, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, -1, -1, 100, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 0, -1, -1, 100, 0, 0, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) (-1.0f));
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray25);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) (short) 100, (int) (byte) 0);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) (short) 10, (int) (short) 100);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray25);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) '#');
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) (short) 0, 9);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        short[] shortArray9 = null;
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        float[] floatArray16 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray16, 0.0f);
        java.lang.Float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        float[] floatArray26 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray26);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (byte) 1, 0);
        float[] floatArray34 = new float[] { (byte) -1, 1L };
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) 10L);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray34);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray34);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, (int) (short) -1, (int) (short) 10);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray42, 0, (float) (-1L));
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray4, (java.lang.Object) floatArray42);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) 0, 6);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray8, (int) (byte) 0, (int) (byte) 1);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (int) '4', (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0]");
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray27, (double) (short) 100, 0, 10.0d);
        double[] doubleArray35 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray35, (double) (byte) 100, 1.0d);
        double[] doubleArray43 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray35, doubleArray43);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray27, doubleArray43);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray43);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray43, (double) 6, (int) (short) 100, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray21 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray25 = new char[] { '#', 'a', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray25);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray21);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray9);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.remove(charArray9, 1);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray33);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{4,#,a,4,#}" + "'", str27, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, a]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray21 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray25 = new char[] { '#', 'a', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray25);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray21);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray28);
        boolean[] booleanArray36 = new boolean[] { false, false, false, true, false, false };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray36);
        boolean[] booleanArray44 = new boolean[] { false, false, false, true, false, false };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray44);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray36, booleanArray44);
        java.lang.String[] strArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.String[] strArray49 = org.apache.commons.lang3.ArrayUtils.add(strArray47, "{true,true}");
        boolean boolean50 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray29, (java.lang.Object) boolean46, strArray49);
        java.lang.String[] strArray51 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.CharSequence[] charSequenceArray54 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.CharSequence[]) strArray51, (-1), 10);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) strArray49, (java.lang.Object) strArray51);
        java.lang.String[] strArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray51);
        java.lang.String[] strArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray56);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{4,#,a,4,#}" + "'", str27, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(charSequenceArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) 0);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray3);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray3);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.add(shortArray7, (short) (byte) -1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray9);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray17 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray21 = new char[] { '#', 'a', 'a' };
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray17, charArray21);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray17, ' ');
        char[] charArray30 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray34 = new char[] { '#', 'a', 'a' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray34, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder11.append((java.lang.Object) ' ', (java.lang.Object) charArray34);
        java.lang.Long[] longArray45 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray45);
        java.lang.Long[] longArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray47);
        char[] charArray52 = new char[] { 'a', '#', ' ' };
        char[][] charArray53 = new char[][] { charArray52 };
        char[][] charArray54 = org.apache.commons.lang3.ArrayUtils.toArray(charArray53);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder55 = equalsBuilder39.append((java.lang.Object[]) longArray47, (java.lang.Object[]) charArray54);
        long[] longArray60 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray60, 1L);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray60, 0L);
        long[] longArray69 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray69, 1L);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray69, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder39.append(longArray60, longArray69);
        java.lang.Short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray75);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray75);
        java.lang.Short[] shortArray78 = new java.lang.Short[] {};
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray78);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray78, (short) 1);
        short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.clone(shortArray81);
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray82, (short) (byte) -1, (int) (short) 100);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray82);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder87 = equalsBuilder39.append(shortArray77, shortArray82);
        short[] shortArray89 = org.apache.commons.lang3.ArrayUtils.add(shortArray77, (short) -1);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray77);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray93 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, 100, (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(equalsBuilder55);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[]");
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[]");
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[]");
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder87);
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray89), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray12 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray15 = new float[] { (byte) -1, 1L };
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) 10L);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray15);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) (short) -1);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        float[] floatArray34 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray34);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray34, (int) (byte) 1, 0);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(floatArray34, (float) 'a');
        float[] floatArray47 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray47);
        float[] floatArray54 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray57 = new float[] { (byte) -1, 1L };
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray57, (float) 10L);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray57);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray57);
        java.lang.Integer[] intArray68 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray68);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray68);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        boolean boolean73 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray57, (java.lang.Object) wildcardClass71, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder0.append(floatArray34, floatArray57);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder77 = equalsBuilder0.append((double) (short) 10, (double) ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder79 = equalsBuilder77.appendSuper(false);
        java.lang.Object obj80 = null;
        java.lang.String[] strArray83 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.util.stream.Stream<java.lang.String> strStream86 = strList84.parallelStream();
        java.lang.String[] strArray89 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        java.util.stream.Stream<java.lang.String> strStream92 = strList90.parallelStream();
        boolean boolean93 = strList84.addAll((java.util.Collection<java.lang.String>) strList90);
        java.lang.Object obj94 = null;
        boolean boolean95 = strList90.equals(obj94);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder96 = equalsBuilder79.append(obj80, (java.lang.Object) boolean95);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder99 = equalsBuilder96.append(false, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(equalsBuilder77);
        org.junit.Assert.assertNotNull(equalsBuilder79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(equalsBuilder96);
        org.junit.Assert.assertNotNull(equalsBuilder99);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        java.lang.String[] strArray1 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.stream.Stream<java.lang.String> strStream9 = strList7.parallelStream();
        java.lang.String[] strArray12 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.stream.Stream<java.lang.String> strStream15 = strList13.parallelStream();
        boolean boolean16 = strList7.addAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList13.equals(obj17);
        int int19 = strList13.size();
        boolean boolean20 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.parallelStream();
        boolean boolean27 = strList13.addAll((java.util.Collection<java.lang.String>) strList24);
        java.lang.String[] strArray29 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String[] strArray34 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList35.parallelStream();
        java.lang.String[] strArray40 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.parallelStream();
        boolean boolean44 = strList35.addAll((java.util.Collection<java.lang.String>) strList41);
        java.lang.Object obj45 = null;
        boolean boolean46 = strList41.equals(obj45);
        int int47 = strList41.size();
        boolean boolean48 = strList30.removeAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Iterator<java.lang.String> strItor49 = strList41.iterator();
        boolean boolean50 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean51 = strList13.isEmpty();
        java.lang.String[] strArray54 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.stream.Stream<java.lang.String> strStream57 = strList55.parallelStream();
        java.lang.String[] strArray60 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.stream.Stream<java.lang.String> strStream63 = strList61.parallelStream();
        boolean boolean64 = strList55.addAll((java.util.Collection<java.lang.String>) strList61);
        java.lang.Object obj65 = null;
        boolean boolean66 = strList61.equals(obj65);
        boolean boolean67 = strList13.removeAll((java.util.Collection<java.lang.String>) strList61);
        java.lang.Short[] shortArray68 = new java.lang.Short[] {};
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray68);
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray68, (short) 1);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.clone(shortArray71);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray72, (short) (byte) -1, (int) (short) 100);
        short[] shortArray76 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray72);
        short[] shortArray77 = null;
        short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray72, shortArray77);
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray72, (short) 0, 3);
        java.lang.Short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray82);
        short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray82, (short) 0);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray72, shortArray85);
        java.lang.Short[] shortArray87 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray72);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray72);
        boolean boolean89 = strList61.equals((java.lang.Object) shortArray72);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray72);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray76), "[]");
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[]");
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[]");
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray5 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray6 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray7 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray4, genericDeclarationArray5, genericDeclarationArray6 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray8 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray9 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray10 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray11 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray8, genericDeclarationArray9, genericDeclarationArray10 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray12 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray13 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray12, genericDeclarationArray13, genericDeclarationArray14 };
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray3, genericDeclarationArray7, genericDeclarationArray11, genericDeclarationArray15 };
        java.lang.Class[] classArray18 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray19 = (java.lang.Class<?>[]) classArray18;
        java.lang.Class[] classArray21 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray22 = (java.lang.Class<?>[]) classArray21;
        java.lang.Class[] classArray24 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray25 = (java.lang.Class<?>[]) classArray24;
        java.lang.Class[] classArray27 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray28 = (java.lang.Class<?>[]) classArray27;
        java.lang.Class[][] classArray30 = new java.lang.Class[4][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray31 = (java.lang.Class<?>[][]) classArray30;
        wildcardClassArray31[0] = wildcardClassArray19;
        wildcardClassArray31[1] = classArray21;
        wildcardClassArray31[2] = classArray24;
        wildcardClassArray31[3] = classArray27;
        boolean[] booleanArray46 = new boolean[] { false, false, false, true, false, false };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray46);
        boolean[] booleanArray54 = new boolean[] { false, false, false, true, false, false };
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray54);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray46, booleanArray54);
        java.lang.Class<?>[][] wildcardClassArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(wildcardClassArray31, (java.lang.Object) boolean56);
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray58 = org.apache.commons.lang3.ArrayUtils.add(genericDeclarationArray16, (java.lang.reflect.GenericDeclaration[][]) wildcardClassArray31);
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray60 = org.apache.commons.lang3.ArrayUtils.remove((java.lang.reflect.AnnotatedElement[][][]) genericDeclarationArray16, 1);
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray61 = org.apache.commons.lang3.ArrayUtils.clone(annotatedElementArray60);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray5);
        org.junit.Assert.assertNotNull(genericDeclarationArray6);
        org.junit.Assert.assertNotNull(genericDeclarationArray7);
        org.junit.Assert.assertNotNull(genericDeclarationArray8);
        org.junit.Assert.assertNotNull(genericDeclarationArray9);
        org.junit.Assert.assertNotNull(genericDeclarationArray10);
        org.junit.Assert.assertNotNull(genericDeclarationArray11);
        org.junit.Assert.assertNotNull(genericDeclarationArray12);
        org.junit.Assert.assertNotNull(genericDeclarationArray13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClassArray19);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClassArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClassArray25);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClassArray57);
        org.junit.Assert.assertNotNull(genericDeclarationArray58);
        org.junit.Assert.assertNotNull(annotatedElementArray60);
        org.junit.Assert.assertNotNull(annotatedElementArray61);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, 4, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) (byte) -1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) (short) 1, (int) '4');
        float[] floatArray24 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray24);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray25, 100.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray27);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray27);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) 0L);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[35.0, 10.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 0);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, (short) (byte) 10);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.clone(shortArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) (byte) -1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, 100, 6);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        boolean boolean15 = strList3.add("{{#,#,#, ,#}}");
        java.lang.String[] strArray20 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray29 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray29);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.remove(floatArray29, (int) (short) 1);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray32);
        boolean boolean34 = strList21.equals((java.lang.Object) floatArray33);
        int int35 = strList21.size();
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray36, (int) (byte) 1);
        boolean boolean39 = strList21.contains((java.lang.Object) int38);
        boolean boolean40 = strList3.addAll((java.util.Collection<java.lang.String>) strList21);
        strList21.clear();
        int int42 = strList21.size();
        java.lang.String[] strArray44 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.lang.String[] strArray49 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.stream.Stream<java.lang.String> strStream52 = strList50.parallelStream();
        java.lang.String[] strArray55 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.stream.Stream<java.lang.String> strStream58 = strList56.parallelStream();
        boolean boolean59 = strList50.addAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.Object obj60 = null;
        boolean boolean61 = strList56.equals(obj60);
        int int62 = strList56.size();
        boolean boolean63 = strList45.removeAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.Object obj64 = null;
        java.lang.String[] strArray65 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.String[] strArray67 = org.apache.commons.lang3.ArrayUtils.add(strArray65, "{true,true}");
        java.lang.String[] strArray68 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray67);
        boolean boolean69 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) strList45, obj64, strArray67);
        boolean boolean70 = strList21.containsAll((java.util.Collection<java.lang.String>) strList45);
        java.util.stream.Stream<java.lang.String> strStream71 = strList21.stream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strStream71);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, ' ');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (short) 0, '4');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) (byte) 100, (int) '4');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 'a');
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (-1.0f));
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, 0.0f);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        boolean boolean33 = equalsBuilder31.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder31.append(true, true);
        long[] longArray38 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray38, 0L);
        long[] longArray43 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray43);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray45, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder31.append(longArray38, longArray45);
        long[] longArray51 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(longArray51, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray61 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray61, 1L);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray56, longArray63);
        long[] longArray71 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.subarray(longArray71, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray71);
        java.lang.Long[] longArray76 = org.apache.commons.lang3.ArrayUtils.toObject(longArray71);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder49.append(longArray63, longArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder49.appendSuper(true);
        java.lang.Boolean boolean81 = equalsBuilder49.build();
        equalsBuilder49.reset();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertEquals("'" + boolean81 + "' != '" + false + "'", boolean81, false);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray23);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray18, 0, 9);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        java.lang.Long[] longArray34 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray36);
        char[] charArray41 = new char[] { 'a', '#', ' ' };
        char[][] charArray42 = new char[][] { charArray41 };
        char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder28.append((java.lang.Object[]) longArray36, (java.lang.Object[]) charArray43);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder28.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder28.append((float) (byte) -1, 0.0f);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder28.appendSuper(false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(equalsBuilder52);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) (byte) 10, (double) 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        boolean boolean4 = equalsBuilder0.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder0.append(0L, (long) 'a');
        equalsBuilder0.reset();
        char[] charArray11 = new char[] { '4', '4' };
        char[] charArray14 = new char[] { '4', '4' };
        char[] charArray17 = new char[] { '4', '4' };
        char[][] charArray18 = new char[][] { charArray11, charArray14, charArray17 };
        char[] charArray21 = new char[] { '4', '4' };
        char[] charArray24 = new char[] { '4', '4' };
        char[] charArray27 = new char[] { '4', '4' };
        char[][] charArray28 = new char[][] { charArray21, charArray24, charArray27 };
        char[] charArray31 = new char[] { '4', '4' };
        char[] charArray34 = new char[] { '4', '4' };
        char[] charArray37 = new char[] { '4', '4' };
        char[][] charArray38 = new char[][] { charArray31, charArray34, charArray37 };
        char[] charArray41 = new char[] { '4', '4' };
        char[] charArray44 = new char[] { '4', '4' };
        char[] charArray47 = new char[] { '4', '4' };
        char[][] charArray48 = new char[][] { charArray41, charArray44, charArray47 };
        char[][][] charArray49 = new char[][][] { charArray18, charArray28, charArray38, charArray48 };
        char[] charArray53 = new char[] { 'a', '#', ' ' };
        char[][] charArray54 = new char[][] { charArray53 };
        char[][] charArray55 = org.apache.commons.lang3.ArrayUtils.toArray(charArray54);
        char[][][] charArray56 = org.apache.commons.lang3.ArrayUtils.add(charArray49, charArray54);
        long[] longArray59 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray59);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(longArray59, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray59);
        boolean boolean64 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray59);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray59);
        java.lang.Long[] longArray66 = org.apache.commons.lang3.ArrayUtils.toObject(longArray65);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray66, (long) 'a');
        char[][][] charArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray49, (java.lang.Object) longArray66);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray66);
        java.lang.Float[][][] floatArray71 = new java.lang.Float[][][] {};
        java.lang.Float[][][] floatArray74 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray71, 100, 100);
        java.lang.Cloneable[] cloneableArray75 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Cloneable[]) floatArray74);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder76 = equalsBuilder0.append((java.lang.Object[]) longArray66, (java.lang.Object[]) floatArray74);
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray66);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, 4]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[-1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[-1]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertNotNull(cloneableArray75);
        org.junit.Assert.assertNotNull(equalsBuilder76);
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[-1]");
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray14);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray14);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray14);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray6, (java.lang.Object) booleanArray17);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray17, true);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray20);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray32);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray32);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) (short) 10);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) 10.0f, (double) 7);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder28.append(false, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((byte) 1, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((double) (byte) 0, (double) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder37.appendSuper(true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder39);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray13);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray24 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray24, 0.0f);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray24);
        long[] longArray30 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray30);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray28, (java.lang.Object) longArray30);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray28, (float) (-1L));
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray13, floatArray34);
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.clone(floatArray34);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray38);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.lang3.ArrayUtils.remove(intArray0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray13);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray13, (-1), 1);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (int) '#', (float) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[1.0]");
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray0, (int) (byte) 0, '4');
        char[] charArray14 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray18 = new char[] { '#', 'a', 'a' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray18);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, ' ');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray23);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#4a#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#4a#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, 4, a, #, 4, 4]");
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray8);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (short) 1);
        int[] intArray16 = new int[] {};
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray16, intArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, (int) '#', (int) (short) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, 4, (int) (short) 100);
        java.lang.Integer[] intArray31 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray31);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray32, intArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(intArray33, (int) '4');
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.add(intArray33, (int) (short) 100);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray33);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.subarray(intArray33, 1, (int) (byte) 1);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray33);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray52 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray52);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray53, intArray54);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray54, (int) (byte) 0);
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray54);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray59, (int) (byte) 1);
        int[] intArray62 = new int[] {};
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray62, intArray63);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.addAll(intArray59, intArray62);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder45.append(intArray58, intArray62);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray62);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray67, 2);
        java.lang.Integer[] intArray76 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray76);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray77, intArray78);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.contains(intArray78, (int) '4');
        int[] intArray83 = org.apache.commons.lang3.ArrayUtils.add(intArray78, (int) (short) 100);
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.addAll(intArray67, intArray78);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray78);
        java.lang.Integer[] intArray86 = org.apache.commons.lang3.ArrayUtils.toObject(intArray78);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        long[] longArray4 = new long[] { (short) 10, (byte) -1, (-1), 1 };
        java.lang.Long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        java.lang.Long[] longArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray5);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[10, -1, -1, 1]");
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) 7);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, 7]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[-1]");
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((short) (byte) 10, (short) (byte) 10);
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray4, byteArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) -1);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) -1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray4);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 0);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray4);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray4, (int) '4', 3);
        java.lang.Short[] shortArray24 = new java.lang.Short[] {};
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 1);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray28, (short) (byte) -1, (int) (short) 100);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray28);
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray32);
        java.lang.Short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray33);
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray35, byteArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray35, (byte) -1);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray35, (byte) -1);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.clone(byteArray45);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray45, (byte) 10);
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray49, byteArray54);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) -1);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) -1);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray49);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (byte) -1, (int) '4');
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray45, byteArray65);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.clone(byteArray66);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray33, (java.lang.Object) byteArray67);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder69 = equalsBuilder3.append(byteArray4, byteArray67);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder69.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder73 = equalsBuilder69.appendSuper(false);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder69);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertNotNull(equalsBuilder73);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray0, (int) (byte) 0, '4');
        char[] charArray14 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray18 = new char[] { '#', 'a', 'a' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray18);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, ' ');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray22);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray32 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (byte) 100, 1.0d);
        double[] doubleArray40 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray32, doubleArray40);
        float[] floatArray46 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray49 = new float[] { (byte) -1, 1L };
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) 10L);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray46, floatArray49);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray40, (java.lang.Object) boolean52);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray28, doubleArray40);
        java.lang.Double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray40);
        long[] longArray58 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray58);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray58);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.subarray(longArray60, (int) (short) 0, (int) 'a');
        java.lang.String[] strArray68 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray77 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray77);
        float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.remove(floatArray77, (int) (short) 1);
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray71, floatArray80);
        boolean boolean82 = strList69.equals((java.lang.Object) floatArray81);
        int int83 = strList69.size();
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray84, (int) (byte) 1);
        boolean boolean87 = strList69.contains((java.lang.Object) int86);
        java.lang.Object[] objArray88 = strList69.toArray();
        boolean boolean89 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray40, (java.lang.Object) longArray60, (java.util.Collection<java.lang.String>) strList69);
        int int91 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray40, (double) (short) 0);
        int int94 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray40, (double) 0, (double) '#');
        double[] doubleArray96 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray40, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0, 10.0, -1.0]");
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        boolean boolean32 = equalsBuilder0.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder0.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((long) '4', (long) ' ');
        java.lang.Character[] charArray43 = new java.lang.Character[] { ' ', '#', '4', 'a', 'a' };
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray43);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, '4');
        java.lang.Class<?>[] wildcardClassArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.AnnotatedElement[] annotatedElementArray48 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.AnnotatedElement[]) wildcardClassArray47);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.Type[]) wildcardClassArray47);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder37.append((java.lang.Object[]) charArray44, (java.lang.Object[]) typeArray49);
        java.lang.Character[] charArray51 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, '4');
        java.lang.Character[] charArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray51);
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray54, ' ');
        java.lang.Object[] objArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) charArray54);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) typeArray49, (java.lang.Object[]) charArray54);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " #4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " #4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , #, 4, a, a]");
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(annotatedElementArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        boolean boolean33 = equalsBuilder31.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder31.append(true, true);
        long[] longArray38 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray38, 0L);
        long[] longArray43 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray43);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray45, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder31.append(longArray38, longArray45);
        java.lang.Byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        float[] floatArray56 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray56);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray56, 0.0f);
        java.lang.Float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray56);
        java.lang.Object[] objArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) floatArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray60);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder49.append((java.lang.Object[]) byteArray50, (java.lang.Object[]) floatArray60);
        java.lang.Byte[] byteArray69 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray75 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray76 = new java.lang.Byte[][] { byteArray69, byteArray75 };
        java.lang.Byte[][] byteArray79 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray76, (int) '#', 10);
        java.lang.Integer[] intArray86 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray87 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray86);
        java.lang.Byte[][] byteArray88 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray76, (java.lang.Object) intArray86);
        int[] intArray90 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray86, 1);
        int[] intArray92 = org.apache.commons.lang3.ArrayUtils.remove(intArray90, (int) (byte) 1);
        int[] intArray93 = org.apache.commons.lang3.ArrayUtils.clone(intArray90);
        boolean boolean94 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray50, (java.lang.Object) intArray90);
        byte[] byteArray96 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray50, (byte) 0);
        byte[] byteArray97 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray50);
        java.lang.Byte[] byteArray98 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray50);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
        org.junit.Assert.assertNotNull(byteArray98);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, (-1.0d), 100.0d, 100.0d, (-1.0d) };
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 100.0f, (java.lang.Object) doubleArray7);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) (-1.0f));
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray7);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray14);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (-1));
        int[] intArray20 = null;
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray7, (java.lang.Object) intArray14, 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        java.lang.Long[] longArray34 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray36);
        char[] charArray41 = new char[] { 'a', '#', ' ' };
        char[][] charArray42 = new char[][] { charArray41 };
        char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.toArray(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder28.append((java.lang.Object[]) longArray36, (java.lang.Object[]) charArray43);
        long[] longArray49 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray49, 1L);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray49, 0L);
        long[] longArray58 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray58, 1L);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray58, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder28.append(longArray49, longArray58);
        boolean[] booleanArray69 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray69, (int) (byte) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray69);
        java.lang.Boolean[] booleanArray77 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray77);
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray77);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder28.append(booleanArray69, booleanArray79);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder28.append((long) (short) 100, (long) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder28.append((byte) 100, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder28.append(false, true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #,  ]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[]");
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[false, true, true]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(equalsBuilder83);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertNotNull(equalsBuilder89);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.lang.Object obj13 = null;
        boolean boolean14 = strList9.equals(obj13);
        int int15 = strList9.size();
        float[] floatArray21 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 1);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10);
        boolean boolean27 = strList9.remove((java.lang.Object) floatArray21);
        java.lang.String[] strArray30 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.parallelStream();
        java.util.Iterator<java.lang.String> strItor34 = strList31.iterator();
        boolean boolean35 = strList9.containsAll((java.util.Collection<java.lang.String>) strList31);
        java.lang.String[] strArray38 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.parallelStream();
        java.lang.String[] strArray44 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.stream.Stream<java.lang.String> strStream47 = strList45.parallelStream();
        boolean boolean48 = strList39.addAll((java.util.Collection<java.lang.String>) strList45);
        java.lang.Object obj49 = null;
        boolean boolean50 = strList45.equals(obj49);
        int int51 = strList45.size();
        float[] floatArray57 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray57);
        int int60 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray57, (float) 1);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.add(floatArray57, (float) 10);
        boolean boolean63 = strList45.remove((java.lang.Object) floatArray57);
        java.lang.String[] strArray66 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.stream.Stream<java.lang.String> strStream69 = strList67.parallelStream();
        java.util.Iterator<java.lang.String> strItor70 = strList67.iterator();
        boolean boolean71 = strList45.containsAll((java.util.Collection<java.lang.String>) strList67);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.util.stream.Stream<java.lang.String> strStream79 = strList77.parallelStream();
        boolean boolean80 = strList45.removeAll((java.util.Collection<java.lang.String>) strList77);
        int int81 = strList77.size();
        strList77.clear();
        boolean boolean83 = strList31.addAll((java.util.Collection<java.lang.String>) strList77);
        strList31.clear();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 0, 0);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(shortArray5, (short) (byte) 0);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) 10);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray5);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray5);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) 10);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray5);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,1,0,0,100}" + "'", str23, "{-1,1,0,0,100}");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[-1, 1, 0, 0, 100]");
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        boolean boolean4 = equalsBuilder0.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder0.append(0L, (long) 'a');
        equalsBuilder0.reset();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = equalsBuilder0.append('a', 'a');
        long[] longArray13 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(longArray13, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray13);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray13);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        boolean boolean23 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) 'a', (java.lang.Object) longArray13, true);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray13, (long) (byte) 10);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(equalsBuilder11);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        float[] floatArray3 = new float[] { (short) -1, 10, (short) 1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, (int) '4', (int) (byte) 100);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        short[] shortArray38 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray38, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray42 = new java.lang.Short[] {};
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42, (short) 1);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray38, shortArray45);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray45, (int) '4', (int) (short) 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray45, (short) 100, (int) (byte) -1);
        java.lang.Short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray45);
        short[] shortArray59 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray59, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray59, (short) (byte) 0);
        java.lang.Short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray59, (int) (byte) 100, (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder31.append(shortArray45, shortArray59);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.add(shortArray59, (short) 0);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray72, (short) (byte) -1);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray72, (int) '4', (int) '#');
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray77, (int) '4', (int) (byte) 100);
        int int82 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray77, (short) (byte) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder70);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[100, 0, 0, 1, -1, 0]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[100, 0, 0, 1, 0]");
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[]");
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (byte) 1);
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray3, (int) '#');
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray12);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray13, intArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) 'a');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray14);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray14);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray14);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray14);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray14);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        boolean boolean4 = equalsBuilder0.isEquals();
        float[] floatArray8 = new float[] { (short) -1, 10, (short) 1 };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray8, (int) '4', (int) (byte) 100);
        float[] floatArray14 = new float[] { (byte) -1, 1L };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 10L);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray14, (float) (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray18, (float) 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(floatArray8, floatArray18);
        boolean[] booleanArray25 = new boolean[] { true, true, true };
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray25, true);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray25, false);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25);
        java.lang.Boolean[] booleanArray36 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray36);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36, false);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder21.append(booleanArray30, booleanArray40);
        java.lang.Boolean[] booleanArray45 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray46);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray46, true);
        boolean[] booleanArray55 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray55, (int) (byte) 0, 0);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray46, booleanArray58);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray59);
        boolean[] booleanArray64 = new boolean[] { true, true, true };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, true);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray64, false);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray64);
        int int72 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray69, false, 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder73 = equalsBuilder41.append(booleanArray60, booleanArray69);
        java.lang.Class<?> wildcardClass74 = equalsBuilder73.getClass();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray6, (int) (short) 1, 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray17, (int) '4', (int) '#');
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.add(booleanArray20, true);
        boolean[] booleanArray29 = new boolean[] { false, false, false, true, false, false };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray29);
        boolean[] booleanArray37 = new boolean[] { false, false, false, true, false, false };
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray29, booleanArray37);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray29, false);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, false);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray29, (int) (byte) 100, 100);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray29);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray20);
        boolean[] booleanArray49 = null;
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray20, booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 2);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((long) 4, (long) (short) 1);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray38, byteArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) -1);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) -1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        java.lang.Byte[] byteArray58 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray58, (byte) 1);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(byteArray60, (byte) 100);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(byteArray60, (byte) 1);
        java.lang.Byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray60);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray65, (byte) 100);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.add(byteArray67, (byte) 10);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray67);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder34.append(byteArray38, byteArray67);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (byte) -1, (int) '4');
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray74, (byte) 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        java.lang.Character[] charArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        java.lang.String str5 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray0);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray12 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray16 = new char[] { '#', 'a', 'a' };
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray12, charArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray16, ' ', 2);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.subarray(charArray16, 0, (int) (byte) 10);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, ' ');
        java.lang.Character[] charArray26 = org.apache.commons.lang3.ArrayUtils.toObject(charArray23);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray0, (java.lang.Object) charArray26);
        double[] doubleArray31 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray31, (double) (byte) 100, 1.0d);
        double[] doubleArray39 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray39);
        float[] floatArray45 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray48 = new float[] { (byte) -1, 1L };
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray48, (float) 10L);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray45, floatArray48);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray39, (java.lang.Object) boolean51);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray39, (int) (short) 0, 1);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray55, (double) (byte) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray57, (int) (byte) 100, 1);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray60, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray60);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray60);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray60);
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray60, (double) (short) 10, (int) '#');
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray26, (java.lang.Object) (short) 10);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26);
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray72, 'a');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a,  ]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#, a, a]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        java.lang.Short[] shortArray0 = null;
        java.lang.Short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray0);
        java.lang.Short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) -1);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 0);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(shortArray8, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, (short) 1);
        java.lang.String str13 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append(2, 5);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder31.append((short) -1, (short) (byte) -1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        java.lang.Object obj0 = null;
        java.lang.Character[] charArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray3);
        char[] charArray10 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray14 = new char[] { '#', 'a', 'a' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray14);
        java.lang.String str16 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray3, charArray10);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 4, (int) '#');
        int int21 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) charArray3);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameType(obj0, (java.lang.Object) charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{4,#,a,4,#}" + "'", str16, "{4,#,a,4,#}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray22, (int) (short) 1);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 100, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray12, (int) '4', (int) (short) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 100, (int) (byte) -1);
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 0, 9);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray12);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) (byte) 100, (int) ' ');
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        double[] doubleArray14 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) (byte) 100, 1.0d);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 100.0d, (int) (short) 1, (double) 1L);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean10, (java.lang.Object) doubleArray14);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) 3, (int) (short) 1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 0, 0);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, (int) (byte) 0, (short) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 1, (int) (short) 0);
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray19);
        java.lang.Short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray26, (int) (byte) 100, (int) (byte) -1);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.clone(shortArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray31);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.remove(shortArray19, 5);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray34, (int) (short) 10, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 100, 0, 0, 1]");
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder28.append(false, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((byte) 1, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((double) (byte) 0, (double) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder34.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder40.append((short) 1, (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder40.append((long) 2, (long) 'a');
        float[] floatArray52 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray52);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray52, 0.0f);
        java.lang.Float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray52);
        float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray56, (float) (byte) 100);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray58);
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray58, (float) (short) 100);
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray62, '4');
        java.lang.Character[] charArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray62);
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray65, ' ');
        java.lang.Character[] charArray68 = org.apache.commons.lang3.ArrayUtils.toObject(charArray67);
        float[] floatArray69 = new float[] {};
        java.lang.Float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray68, (java.lang.Object) floatArray69);
        float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.add(floatArray69, (float) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder40.append(floatArray61, floatArray69);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder77 = equalsBuilder74.append('4', '4');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(equalsBuilder77);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        byte[] byteArray0 = null;
        java.lang.Byte[] byteArray7 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(byteArray9, (byte) 100);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(byteArray9, (byte) 1);
        java.lang.Byte[] byteArray20 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (byte) 0, (int) (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray9, byteArray25);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (byte) 1);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray28, (byte) 100);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, 4, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 1]");
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray8 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray8);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray8, (long) (short) 10);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray0, (java.lang.Object) longArray11, (int) (byte) 100);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 1L);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) '#');
        java.lang.Object[] objArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray0);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (-1));
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((long) 4, (long) (short) 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        java.lang.Short[] shortArray39 = new java.lang.Short[] {};
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39, (short) 1);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.clone(shortArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray43);
        java.lang.Short[] shortArray45 = new java.lang.Short[] {};
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray45);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray45, (short) 1);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray45, (short) 0);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray50, (short) -1);
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.add(shortArray52, (short) 1);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray43, shortArray52);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder37.append(shortArray38, shortArray55);
        java.lang.Short[] shortArray57 = new java.lang.Short[] {};
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray57);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray57, (short) 1);
        java.lang.Short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray60);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.contains(shortArray60, (short) 10);
        java.lang.Short[] shortArray64 = new java.lang.Short[] {};
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray64);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray64, (short) 1);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.clone(shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.add(shortArray68, (short) -1);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray68);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray68, (short) (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder56.append(shortArray60, shortArray73);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder77 = equalsBuilder74.append(1.0d, 100.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder77.append((int) '4', 6);
        java.lang.Boolean boolean81 = equalsBuilder80.build();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[1]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(equalsBuilder77);
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertEquals("'" + boolean81 + "' != '" + false + "'", boolean81, false);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        short[] shortArray0 = null;
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray0, (int) '4', (int) (short) 0);
        org.junit.Assert.assertNull(shortArray3);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray23);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray27);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray27);
        java.lang.Boolean[] booleanArray36 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36, true);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36, false);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36, true);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray42, (int) (short) 100, 7);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray45, 2, (int) (short) 0);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray45, true);
        boolean[] booleanArray57 = new boolean[] { false, false, false, true, false, false };
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray57);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray57, true);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray57, true);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray57);
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray67);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray68);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray68, true);
        boolean[] booleanArray77 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray77, (int) (byte) 0, 0);
        boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray68, booleanArray80);
        int int84 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray80, false, (int) (byte) 1);
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray57, booleanArray80);
        boolean[] booleanArray86 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray80);
        boolean[] booleanArray87 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray45);
        int int89 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray45, false);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray29, booleanArray45);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.add(booleanArray45, true);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray86), "[]");
        org.junit.Assert.assertNotNull(booleanArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray87), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[true]");
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        java.lang.Double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        java.lang.Double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray0);
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 10, 10.0d);
        double[] doubleArray11 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (byte) 100, 1.0d);
        double[] doubleArray19 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray19);
        float[] floatArray25 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray28 = new float[] { (byte) -1, 1L };
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) 10L);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray25, floatArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray19, (java.lang.Object) boolean31);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray19, (int) (short) 0, 1);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray35, (double) (byte) -1);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray37, (int) (byte) 100, 1);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray37, 0, (int) (short) 10);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray37);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray44);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray44, (double) 2, (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        java.lang.Integer[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, 1);
        org.junit.Assert.assertNull(intArray2);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray14 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.remove(floatArray14, (int) (short) 1);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray8, floatArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray8);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray8);
        java.lang.String str22 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray5, "{100,0,1,-1}");
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) 1L);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-1.0,100.0,100.0,10.0,35.0}" + "'", str22, "{-1.0,100.0,100.0,10.0,35.0}");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0]");
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a');
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 10);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray18);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        short[] shortArray27 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray31 = new java.lang.Short[] {};
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray31);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray31, (short) 1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) 0, 0);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (int) (byte) 0, (short) 0);
        java.lang.Short[] shortArray42 = null;
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray42);
        java.lang.Short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray43);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder0.append(shortArray41, shortArray46);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder0.append((double) (byte) 1, (double) 10.0f);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder0.appendSuper(false);
        java.lang.Boolean[] booleanArray56 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56, true);
        java.lang.Boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray56);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56);
        boolean[] booleanArray67 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray67, (int) (byte) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray67);
        java.lang.Boolean[] booleanArray78 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray78, true);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray80, true);
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray80);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray67, booleanArray80);
        int int87 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray80, true, (int) '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder88 = equalsBuilder52.append(booleanArray61, booleanArray80);
        java.lang.Boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray61);
        java.lang.Boolean[] booleanArray90 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray89);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray89, false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(equalsBuilder52);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[]");
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder88);
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[false, true, true]");
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 100L, 1L, 1L };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 100L, 1L, 1L };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 100L, 1L, 1L };
        java.lang.Long[][] longArray12 = new java.lang.Long[][] { longArray3, longArray7, longArray11 };
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = equalsBuilder13.append((byte) -1, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder13.append((int) (byte) 0, (int) (byte) 10);
        java.lang.Long[][] longArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray12, (java.lang.Object) equalsBuilder19);
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray23);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray23, '4');
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = equalsBuilder19.append(charArray22, charArray23);
        java.lang.Integer[] intArray36 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray36);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray37, intArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray38, (int) (byte) 0);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray38);
        short[] shortArray48 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray48, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray48);
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray48, (short) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray48);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray38, (java.lang.Object) shortArray48);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray48, (short) 0);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray48);
        short[] shortArray65 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray65, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray69 = new java.lang.Short[] {};
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray69);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray69, (short) 1);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray65, shortArray72);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray65, (short) 0, 0);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(shortArray65, (short) (byte) 0);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray65);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder29.append(shortArray48, shortArray79);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray79);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(equalsBuilder16);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(equalsBuilder29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[-1, 1, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[100, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[100, 0, 0, 1, -1]");
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 100.0d, (-1.0d), 100.0d, 100.0d, (-1.0d) };
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray5);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, 0.0d);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, 5, (double) (short) 10);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray8, 7, 8);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, -1.0, 100.0, 100.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray6);
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, false, false };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, true);
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "1" };
        boolean boolean24 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean10, (java.lang.Object) true, strArray23);
        java.lang.String[] strArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray23);
        java.lang.String[] strArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray25);
        java.lang.String[] strArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) strArray26);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray26);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10, 1, -1, 1, -1, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, (long) (short) 100);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray11);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray11, (long) (-1), (int) '4');
        long[] longArray16 = null;
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.addAll(longArray11, longArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray11);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray20 = org.apache.commons.lang3.ArrayUtils.remove(longArray11, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray10, (byte) 100);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, 0, (byte) -1);
        java.lang.Byte[] byteArray24 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray24, (byte) 1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(byteArray26, (byte) 100);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(byteArray26, (byte) 1);
        java.lang.Byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray26);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31, (byte) 100);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.add(byteArray33, (byte) 10);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.clone(byteArray35);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray35);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.remove(byteArray35, 3);
        java.lang.Byte[] byteArray46 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray46, (byte) 1);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(byteArray48, (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains(byteArray48, (byte) 1);
        java.lang.Byte[] byteArray59 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray59, (byte) 1);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray61, (int) (byte) 0, (int) (byte) 1);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray48, byteArray64);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray48, (byte) 10);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) -1);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray35, byteArray69);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray69);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray69, (byte) 0);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.clone(byteArray69);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 0, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 0, -1, -1, 100, 0, 0, 0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0, -1]");
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, (long) (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray1, (long) (byte) 0);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertNotNull(longArray12);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 0.0d, (int) (byte) 100, (-1.0d));
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray13, (int) (short) -1);
        int[] intArray24 = new int[] {};
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray25, (int) (byte) 100, 7);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray13, intArray25);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray13, (int) (byte) 0);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray33, (int) (byte) 1);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray33);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray36, (int) '#');
        java.lang.Integer[] intArray45 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray45);
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray46, intArray47);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (byte) 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) 'a');
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.addAll(intArray36, intArray47);
        java.lang.Integer[] intArray56 = org.apache.commons.lang3.ArrayUtils.toObject(intArray47);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray13, intArray47);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray13, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) 100L, (int) (short) 10, 0.0d);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) 5, (int) (short) 0);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, 1, 2);
        double[] doubleArray47 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray47, (double) (byte) 100, 1.0d);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray47, doubleArray55);
        float[] floatArray61 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray64 = new float[] { (byte) -1, 1L };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray64, (float) 10L);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray61, floatArray64);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray55, (java.lang.Object) boolean67);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray55, (int) (short) 0, 1);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray71, (double) (byte) -1);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray73, (int) (byte) 100, 1);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray76, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray81 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray76);
        double[] doubleArray84 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray81, (int) 'a', 3);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray84);
        double[] doubleArray86 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray43);
        int int89 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray43, (double) (byte) 10, (double) (byte) 100);
        int int91 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray43, (double) 100);
        int int95 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray43, 0.0d, 11, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) -1);
        short[] shortArray17 = new short[] { (short) 10 };
        short[] shortArray19 = new short[] { (short) 10 };
        short[] shortArray21 = new short[] { (short) 10 };
        short[] shortArray23 = new short[] { (short) 10 };
        short[][] shortArray24 = new short[][] { shortArray17, shortArray19, shortArray21, shortArray23 };
        short[][] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.stream.Stream<java.lang.String> strStream31 = strList29.parallelStream();
        java.lang.String[] strArray34 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList35.parallelStream();
        boolean boolean38 = strList29.addAll((java.util.Collection<java.lang.String>) strList35);
        boolean boolean40 = strList35.add("{4,#,a,4,#}");
        boolean boolean41 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray7, (java.lang.Object) shortArray24, (java.util.Collection<java.lang.String>) strList35);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray7);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.clone(byteArray7);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray44, (byte) 0);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray46, (byte) -1, (-1));
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[10]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[10]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray23, '#');
        char[] charArray36 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray40 = new char[] { '#', 'a', 'a' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray40, ' ', 2);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.subarray(charArray40, 0, (int) (byte) 10);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray30, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.add(charArray30, '4');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray30);
        java.lang.Character[] charArray52 = org.apache.commons.lang3.ArrayUtils.toObject(charArray30);
        double[] doubleArray56 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray56, (double) (byte) 100, 1.0d);
        double[] doubleArray64 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray56, doubleArray64);
        float[] floatArray70 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray73 = new float[] { (byte) -1, 1L };
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray73, (float) 10L);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray70, floatArray73);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray64, (java.lang.Object) boolean76);
        double[] doubleArray80 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray64, (int) (short) 0, 1);
        double[] doubleArray82 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray80, (double) (byte) -1);
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray82, (int) (byte) 100, 1);
        double[] doubleArray86 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray82);
        int int90 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray82, (double) 100L, (int) (short) 10, 0.0d);
        int int93 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray82, (double) 5, (int) (short) 0);
        double[] doubleArray96 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray82, 1, 2);
        java.util.Collection<java.lang.String> strCollection97 = null;
        boolean boolean98 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray30, (java.lang.Object) doubleArray82, strCollection97);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, a, a]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#aa#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#aa#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, a, a, #, 4]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        boolean boolean15 = strList3.add("{{#,#,#, ,#}}");
        java.lang.Short[] shortArray16 = null;
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray16);
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray17);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray17, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray27 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray31 = new char[] { '#', 'a', 'a' };
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray27, charArray31);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray27, ' ');
        char[] charArray40 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray44 = new char[] { '#', 'a', 'a' };
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.addAll(charArray40, charArray44);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray44, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder21.append((java.lang.Object) ' ', (java.lang.Object) charArray44);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray17, (java.lang.Object) charArray44, 5);
        boolean boolean52 = strList3.remove((java.lang.Object) shortArray17);
        int[] intArray55 = new int[] { ' ', 2 };
        java.lang.Integer[] intArray56 = org.apache.commons.lang3.ArrayUtils.toObject(intArray55);
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray55, 0);
        java.lang.Integer[] intArray65 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray65);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray66, intArray67);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.contains(intArray67, (int) '4');
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.subarray(intArray67, (int) (byte) 100, (int) 'a');
        java.lang.Integer[] intArray80 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray80);
        int[] intArray82 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray81, intArray82);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.contains(intArray82, (int) '4');
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray82, (int) 'a', (int) (short) 0);
        int int91 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray82, (int) '#', (int) (short) 0);
        int[] intArray94 = org.apache.commons.lang3.ArrayUtils.subarray(intArray82, (int) (short) 0, (int) (short) 1);
        int[] intArray95 = org.apache.commons.lang3.ArrayUtils.addAll(intArray73, intArray94);
        boolean boolean96 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray58, intArray95);
        boolean boolean97 = strList3.equals((java.lang.Object) boolean96);
        java.util.Iterator<java.lang.String> strItor98 = strList3.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator99 = strList3.spliterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 2]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 2]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strItor98);
        org.junit.Assert.assertNotNull(strSpliterator99);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        java.lang.String[] strArray4 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray13 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.remove(floatArray13, (int) (short) 1);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray16);
        boolean boolean18 = strList5.equals((java.lang.Object) floatArray17);
        int int19 = strList5.size();
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, (int) (byte) 1);
        boolean boolean23 = strList5.contains((java.lang.Object) int22);
        java.lang.Byte[] byteArray30 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray30, (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(byteArray32, (byte) 100);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(byteArray32, (byte) 1);
        java.lang.Byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray32);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 100);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray39, (byte) 10);
        boolean boolean42 = strList5.contains((java.lang.Object) byteArray39);
        boolean boolean44 = strList5.add("4");
        boolean boolean45 = strList5.isEmpty();
        short[] shortArray51 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray51, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray55 = new java.lang.Short[] {};
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55, (short) 1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray51, shortArray58);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray51, (short) 10);
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray51);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray62, (short) (byte) 1);
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray64, (short) 0);
        boolean boolean67 = strList5.contains((java.lang.Object) shortArray66);
        java.util.Spliterator<java.lang.String> strSpliterator68 = strList5.spliterator();
        boolean boolean70 = strList5.add("{0,0,100,-1,-1,0}");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[100, 0, 0, -1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[100, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.subarray(intArray17, 4, 5);
        java.lang.Integer[] intArray32 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray32);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray33, intArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(intArray34, (int) '4');
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray34, (int) 'a', (int) (short) 0);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(intArray34, (int) '4');
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray34);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray43);
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray44);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray17);
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, '4');
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4]");
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, 0.0f);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        long[] longArray11 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray11);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray9, (java.lang.Object) longArray11);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9, (float) (-1L));
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray9);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) ' ');
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray19);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray19);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 100.0d, (int) (short) 1, (double) 1L);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10, (int) (short) 10);
        java.lang.Integer[] intArray20 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray20);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray20);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray3, (java.lang.Object) intArray20);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray20, (int) '4');
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 10, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        java.lang.Byte[][][][] byteArray0 = new java.lang.Byte[][][][] {};
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray0);
        java.lang.Byte[][][][] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray0, (int) (short) 10, (int) (short) 100);
        java.lang.Byte[][][] byteArray5 = new java.lang.Byte[][][] {};
        java.lang.Byte[][][][] byteArray6 = org.apache.commons.lang3.ArrayUtils.add(byteArray4, byteArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray10 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray14 = new char[] { '#', 'a', 'a' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray14);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray10, ' ');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray17);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray20);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray20);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray17, charArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray4, charArray17);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 4, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.lang.Object obj13 = null;
        boolean boolean14 = strList9.equals(obj13);
        int int15 = strList9.size();
        float[] floatArray21 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 1);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10);
        boolean boolean27 = strList9.remove((java.lang.Object) floatArray21);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(floatArray21, (float) 8);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        long[] longArray12 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(longArray12, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        long[] longArray22 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray22, 1L);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray17, longArray24);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray24);
        long[] longArray29 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(longArray29, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        boolean boolean34 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray29);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray29);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray29);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray29);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray29);
        long[] longArray40 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(longArray40, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray40);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.clone(longArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray40);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray40);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(longArray40, (long) (short) 100);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray40);
        long[] longArray52 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray52);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(longArray52, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray52);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains(longArray52, (long) 0);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.addAll(longArray40, longArray52);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray29, longArray59);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray29, (long) '4', (int) '4');
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains(longArray29, (long) 10);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray29, (long) (byte) 1, 1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[100, -1, 1, -1, 1, 10, 32, -1, 0]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray21 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray25 = new char[] { '#', 'a', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray25);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray21);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.remove(charArray9, (int) (short) 1);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray32);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray33, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{4,#,a,4,#}" + "'", str27, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, a]");
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        boolean[] booleanArray38 = new boolean[] { false, false, false, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray38);
        boolean[] booleanArray46 = new boolean[] { false, false, false, true, false, false };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray38, booleanArray46);
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray52);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray53, false);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray53, false);
        boolean[] booleanArray63 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray63, (int) (byte) 0, 0);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray63, 4, (int) '4');
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray57, booleanArray69);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder0.append(booleanArray46, booleanArray57);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder0.append((long) 4, (long) (-1));
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray75);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.clone(charArray75);
        char[] charArray83 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray87 = new char[] { '#', 'a', 'a' };
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.addAll(charArray83, charArray87);
        char[] charArray90 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray83, ' ');
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray90);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder92 = equalsBuilder74.append(charArray77, charArray91);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder95 = equalsBuilder74.append((double) 1.0f, 10.0d);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[true, true]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(equalsBuilder92);
        org.junit.Assert.assertNotNull(equalsBuilder95);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 4, (int) '#', (double) 0L);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 0.0d, (double) (short) 1);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        int[] intArray0 = null;
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.add(intArray9, (int) (short) 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 0);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray14);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray18);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = org.apache.commons.lang3.ArrayUtils.remove(intArray19, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0]");
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, (long) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        java.lang.Long[] longArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray12);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray12);
        float[] floatArray20 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray20);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) 1, 0);
        float[] floatArray28 = new float[] { (byte) -1, 1L };
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) 10L);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray25, floatArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray28);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.clone(floatArray28);
        boolean boolean34 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray14, (java.lang.Object) floatArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray14);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        java.lang.Long[] longArray42 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42);
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42);
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42, (long) (-1));
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray46);
        java.lang.Long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        java.lang.Long[] longArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray48);
        java.lang.Object[] objArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray49);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[-1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[-1]");
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) (byte) 0);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) 0, 1);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray11, (int) (byte) 10, (int) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 100);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, ' ');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6);
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        java.lang.Integer[] intArray15 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray16, intArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, (int) (byte) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray21);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray8, (java.lang.Object) intArray23, (int) (short) 100);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23, 7);
        java.util.Map<java.lang.Object, java.lang.Object> objMap28 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray23);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray23);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(objMap28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[][] doubleArray20 = new java.lang.Double[][] { doubleArray4, doubleArray9, doubleArray14, doubleArray19 };
        java.lang.Double[][] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray21);
        java.util.Map<java.lang.Object, java.lang.Object> objMap23 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray21);
        java.lang.Double[][] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray21, 0, 7);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objMap23);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 1L);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[1.0]");
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray2);
        char[] charArray9 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray13 = new char[] { '#', 'a', 'a' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray13);
        java.lang.String str15 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray9);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray2, charArray9);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray2, 4, (int) '#');
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, '4');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{4,#,a,4,#}" + "'", str15, "{4,#,a,4,#}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder28.append(0.0d, (double) 10);
        long[] longArray34 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(longArray34, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray34);
        boolean boolean39 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray34);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        java.lang.Long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toObject(longArray40);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41, (long) 'a');
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray44);
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray44);
        java.lang.Long[] longArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray44);
        java.lang.Object[] objArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray47);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.subarray(longArray49, 7, (int) ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder28.append(longArray43, longArray49);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.clone(longArray43);
        float[] floatArray60 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray60);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray60, 0.0f);
        java.lang.Float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray60);
        float[] floatArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray64, (float) (byte) 100);
        float[] floatArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray64, (float) 0);
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray64, (float) 1L);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray43, (java.lang.Object) floatArray70);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray70, 1.0f, 0);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray70, 1.0f);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        java.lang.String str11 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray5);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray5, '#');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.remove(charArray14, 5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{4,#,a,4,#}" + "'", str11, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, #, a, 4, #]");
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray15, 100, (int) (byte) 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 10);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 10);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) -1);
        java.lang.Byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray20);
        java.lang.Byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray25);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray5, (float) (byte) 0);
        float[] floatArray16 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray16);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, (int) (byte) 1, 0);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) 'a');
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray16, (float) (byte) 10, (int) (byte) 100);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray16);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(floatArray27, (float) (short) 100);
        float[] floatArray35 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray35);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray35, (int) (byte) 1, 0);
        float[] floatArray43 = new float[] { (byte) -1, 1L };
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) 10L);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray40, floatArray43);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray43);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.clone(floatArray43);
        float[] floatArray54 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray54);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, 0.0f);
        java.lang.Float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray54);
        long[] longArray60 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray60);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray58, (java.lang.Object) longArray60);
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray58, (float) (-1L));
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray43, floatArray64);
        java.lang.Float[] floatArray66 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray64);
        float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray64);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 100.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[-1.0, 100.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray12 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, (int) (byte) 0, 0);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray12);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray6);
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray25);
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray25);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray27);
        java.lang.Boolean[] booleanArray32 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray32);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray32);
        int int35 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray34);
        java.lang.Boolean[] booleanArray39 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray40, true);
        boolean[] booleanArray49 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray49, (int) (byte) 0, 0);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray40, booleanArray52);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray53);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray34, booleanArray53);
        boolean[] booleanArray57 = new boolean[] { true };
        java.lang.Boolean[] booleanArray61 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray61);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray62, false);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray62);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray62, true);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray57, booleanArray62);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray34, booleanArray68);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray27, (java.lang.Object) booleanArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray69);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray69, false);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray69);
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray69, false);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 1, -1, 10]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, true, true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, true);
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray26);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray27, (int) (short) 10, 3);
        long[] longArray32 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(longArray32, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray32);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray32);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray32);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray32, (long) (short) 100);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.add(longArray32, (long) '#');
        boolean boolean45 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray30, (java.lang.Object) longArray43, true);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray30);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray46, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray46);
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53);
        int int56 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray46, booleanArray55);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.add(booleanArray46, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray59);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray22, booleanArray59);
        java.lang.Boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray6 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, (int) (short) 1);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) 10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, 0.0f, 6);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (-1.0f), (int) '#');
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray14);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L), 4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        long[] longArray12 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(longArray12, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        long[] longArray22 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray22, 1L);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray17, longArray24);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray24);
        long[] longArray29 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(longArray29, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray29);
        boolean boolean34 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray29);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray29);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray29);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray29);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray29);
        long[] longArray40 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(longArray40, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray40);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.clone(longArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray40);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray40);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(longArray40, (long) (short) 100);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray40);
        long[] longArray52 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray52);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(longArray52, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray52);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains(longArray52, (long) 0);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.addAll(longArray40, longArray52);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray29, longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray29, (long) 10);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray63);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[100, -1, 1, -1, 1, 10, 32, -1, 0]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        int[] intArray2 = new int[] { ' ', 2 };
        java.lang.Integer[] intArray3 = org.apache.commons.lang3.ArrayUtils.toObject(intArray2);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, 2]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[32, 2]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray32 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (byte) 100, 1.0d);
        double[] doubleArray40 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray32, doubleArray40);
        float[] floatArray46 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray49 = new float[] { (byte) -1, 1L };
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) 10L);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray46, floatArray49);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray40, (java.lang.Object) boolean52);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray28, doubleArray40);
        java.lang.Double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray40);
        long[] longArray58 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray58);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray58);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.subarray(longArray60, (int) (short) 0, (int) 'a');
        java.lang.String[] strArray68 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray77 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray77);
        float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.remove(floatArray77, (int) (short) 1);
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray71, floatArray80);
        boolean boolean82 = strList69.equals((java.lang.Object) floatArray81);
        int int83 = strList69.size();
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray84, (int) (byte) 1);
        boolean boolean87 = strList69.contains((java.lang.Object) int86);
        java.lang.Object[] objArray88 = strList69.toArray();
        boolean boolean89 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray40, (java.lang.Object) longArray60, (java.util.Collection<java.lang.String>) strList69);
        int int92 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray60, (long) 3, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray95 = org.apache.commons.lang3.ArrayUtils.add(longArray60, 2, (long) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray6 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, (int) (short) 1);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) 10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, 0.0f, 6);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, 100, 100);
        float[] floatArray27 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray27);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray27);
        float[] floatArray34 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray37 = new float[] { (byte) -1, 1L };
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray37, (float) 10L);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray37);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray27, floatArray37);
        java.lang.Float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray27);
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray42, (float) 0);
        java.lang.String[] strArray45 = null;
        boolean boolean46 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray21, (java.lang.Object) 0, strArray45);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray12 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray15 = new float[] { (byte) -1, 1L };
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) 10L);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray15);
        java.lang.Float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray20);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22);
        java.lang.Float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray22);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        boolean[] booleanArray3 = new boolean[] { true, true, true };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray3, true);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray3, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray3);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray8, false, 1);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray12);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray12, false);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        java.lang.Short[] shortArray6 = new java.lang.Short[] {};
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 0);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray11, (short) -1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray13, (short) 1);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray13);
        short[] shortArray23 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray27 = new java.lang.Short[] {};
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27, (short) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray30);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray23, (int) (byte) 0, (short) 0);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.remove(shortArray37, 0);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray37, (short) 100);
        java.lang.Short[] shortArray42 = new java.lang.Short[] {};
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42, (short) 1);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.clone(shortArray45);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.add(shortArray46, (short) -1);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray46);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray46);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray37, shortArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray13, shortArray37);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[0, 100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a', (int) '4');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, ' ');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray6, 'a', (int) '4');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        int[] intArray2 = new int[] { ' ', 2 };
        java.lang.Integer[] intArray3 = org.apache.commons.lang3.ArrayUtils.toObject(intArray2);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray18 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.remove(floatArray18, (int) (short) 1);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray21);
        boolean boolean23 = strList10.equals((java.lang.Object) floatArray22);
        int int24 = strList10.size();
        java.util.stream.Stream<java.lang.String> strStream25 = strList10.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strList10.spliterator();
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) intArray3, (java.lang.Object) strList10);
        java.lang.Object[] objArray28 = strList10.toArray();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) strList10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, 2]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[32, 2]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[{}, {}, 1, {4,#,a,4,#}]");
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, true);
        boolean[] booleanArray26 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray26, (int) (byte) 0, 0);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray29);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, false, (int) (byte) 1);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray29);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, true);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, true);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray46);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray47, true, (int) '4');
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray47);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray51);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray51, false, (-1));
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, true, false, false, false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray19 = new byte[] {};
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray19, byteArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray19, (byte) -1);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) -1);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.clone(byteArray29);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.add(byteArray29, (byte) 10);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray33, byteArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray33, (byte) -1);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray33, (byte) -1);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray33, (byte) 1);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray29, byteArray33);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray18, byteArray33);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray33, (byte) -1);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.clone(byteArray33);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray33, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray5);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6);
        java.lang.Boolean[] booleanArray11 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray13);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13);
        boolean[] booleanArray25 = new boolean[] { false, false, false, true, false, false };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray25, true);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray25, (int) (short) 1, 1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray25, true);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray36, false);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray38, true, 9);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray38);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, 0, true);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, true, true, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 1, 0 };
        java.lang.Integer[] intArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray2);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2);
        java.lang.Integer[] intArray5 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        short[] shortArray12 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray16 = new java.lang.Short[] {};
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16, (short) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray19);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray19, (int) '4', (int) (short) 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray19, (short) 100, (int) (byte) -1);
        java.lang.Short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray19);
        java.lang.String[] strArray32 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray41 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray41);
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.remove(floatArray41, (int) (short) 1);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray35, floatArray44);
        boolean boolean46 = strList33.equals((java.lang.Object) floatArray45);
        int int47 = strList33.size();
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray48, (int) (byte) 1);
        boolean boolean51 = strList33.contains((java.lang.Object) int50);
        java.lang.Object[] objArray52 = strList33.toArray();
        boolean boolean53 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) intArray6, (java.lang.Object) shortArray27, (java.util.Collection<java.lang.String>) strList33);
        java.lang.Short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray27);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27, (short) 100);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[]");
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        boolean boolean15 = strList3.add("{{#,#,#, ,#}}");
        java.lang.String[] strArray18 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.parallelStream();
        java.util.Iterator<java.lang.String> strItor22 = strList19.iterator();
        java.lang.String[] strArray27 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray36 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray36);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.remove(floatArray36, (int) (short) 1);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray30, floatArray39);
        boolean boolean41 = strList28.equals((java.lang.Object) floatArray40);
        int int42 = strList28.size();
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray43, (int) (byte) 1);
        boolean boolean46 = strList28.contains((java.lang.Object) int45);
        java.lang.Byte[] byteArray53 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53, (byte) 1);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(byteArray55, (byte) 100);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(byteArray55, (byte) 1);
        java.lang.Byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray55);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray60, (byte) 100);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.add(byteArray62, (byte) 10);
        boolean boolean65 = strList28.contains((java.lang.Object) byteArray62);
        boolean boolean66 = strList19.addAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.util.stream.Stream<java.lang.String> strStream74 = strList72.parallelStream();
        boolean boolean75 = strList19.removeAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean76 = strList3.contains((java.lang.Object) strList19);
        int int77 = strList19.size();
        java.lang.Object[] objArray78 = strList19.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap79 = org.apache.commons.lang3.ArrayUtils.toMap(objArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '1', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[1]");
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.stream.Stream<java.lang.String> strStream7 = strList5.parallelStream();
        java.lang.Boolean[] booleanArray11 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, (int) (short) 10, 3);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray15);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray15);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, true, 0);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) strList5, (java.lang.Object) booleanArray15, false);
        java.lang.String[] strArray24 = new java.lang.String[] { "{-1.0,100.0,100.0,10.0,35.0}" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        boolean boolean27 = strList5.containsAll((java.util.Collection<java.lang.String>) strList25);
        strList5.clear();
        int int29 = strList5.size();
        java.lang.String[] strArray31 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList37.parallelStream();
        java.lang.String[] strArray42 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.stream.Stream<java.lang.String> strStream45 = strList43.parallelStream();
        boolean boolean46 = strList37.addAll((java.util.Collection<java.lang.String>) strList43);
        java.lang.Object obj47 = null;
        boolean boolean48 = strList43.equals(obj47);
        int int49 = strList43.size();
        boolean boolean50 = strList32.removeAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean52 = strList32.add("");
        strList32.clear();
        boolean boolean54 = strList5.addAll((java.util.Collection<java.lang.String>) strList32);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.lang.Object obj13 = null;
        boolean boolean14 = strList9.equals(obj13);
        int int15 = strList9.size();
        float[] floatArray21 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 1);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10);
        boolean boolean27 = strList9.remove((java.lang.Object) floatArray21);
        java.lang.String[] strArray30 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.parallelStream();
        java.util.Iterator<java.lang.String> strItor34 = strList31.iterator();
        boolean boolean35 = strList9.containsAll((java.util.Collection<java.lang.String>) strList31);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.parallelStream();
        boolean boolean44 = strList9.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean46 = strList9.add("false");
        boolean boolean47 = strList9.isEmpty();
        java.lang.Character[][][][][] charArray48 = new java.lang.Character[][][][][] {};
        java.lang.Character[][][][][] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Character[][][][][] charArray50 = strList9.toArray(charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertNotNull(charArray49);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        boolean[] booleanArray3 = new boolean[] { true, true, true };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray3, true);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray3, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (int) '#', 10);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        java.lang.Byte[][] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (java.lang.Object) intArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, (int) (short) -1);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, (int) ' ');
        java.lang.Integer[] intArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        java.lang.Object obj30 = new java.lang.Object();
        long[] longArray37 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.subarray(longArray37, 3, (int) (byte) 0);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray37);
        boolean[] booleanArray48 = new boolean[] { false, false, false, true, false, false };
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray48);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray48, true);
        java.lang.String[] strArray54 = new java.lang.String[] { "4", "1" };
        boolean boolean55 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean41, (java.lang.Object) true, strArray54);
        java.lang.String[] strArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray54);
        java.lang.String[] strArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray56);
        boolean boolean58 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) intArray22, obj30, strArray56);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, 4);
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, 5);
        java.lang.Integer[] intArray63 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[10, 1, -1, 1, -1, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray6, (java.lang.Object) intArray13);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 10);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray18, (byte) 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) -1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, 4, (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray18);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) (byte) 0, 5);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(byteArray29, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 1, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 100, 1, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 1, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) 1);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) 10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, 3, (float) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0]");
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        boolean boolean4 = equalsBuilder0.isEquals();
        float[] floatArray5 = null;
        float[] floatArray6 = null;
        java.lang.String[] strArray11 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray20 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.remove(floatArray20, (int) (short) 1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray23);
        boolean boolean25 = strList12.equals((java.lang.Object) floatArray24);
        float[] floatArray31 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray31, (float) 1);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray31);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray31);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder0.append(floatArray5, floatArray6);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray38, byteArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) -1);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) -1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (byte) -1, (int) '4');
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray54);
        java.lang.Boolean[] booleanArray62 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, true);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, false);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, true);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray68, (int) (short) 100, 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder0.append((java.lang.Object) byteArray54, (java.lang.Object) 7);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.contains(byteArray54, (byte) 10);
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray54, (byte) 0);
        byte[] byteArray77 = null;
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray54, byteArray77);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        double[] doubleArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray0, (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3, true);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray3);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true, true]");
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray32 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (byte) 100, 1.0d);
        double[] doubleArray40 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray32, doubleArray40);
        float[] floatArray46 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray49 = new float[] { (byte) -1, 1L };
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) 10L);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray46, floatArray49);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray40, (java.lang.Object) boolean52);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray28, doubleArray40);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray40, (double) '#', (double) (byte) 1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.add(doubleArray40, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0, 10.0, -1.0, -1.0]");
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 1, 0 };
        java.lang.Integer[] intArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray2);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2);
        java.lang.Integer[] intArray5 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, 7);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) (byte) 0);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.remove(longArray10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray15 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1, 0]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[0]");
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0, 10, 10, -1]");
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) (short) 0);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) (short) 100);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        float[] floatArray21 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray24 = new float[] { (byte) -1, 1L };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray24, (float) 10L);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray21, floatArray24);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray21, (float) '4');
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray29);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, (float) 1L);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.clone(floatArray29);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray33, (float) (byte) 0);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray16, floatArray33);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[100.0, 10.0, -1.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray0);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, false);
        boolean[] booleanArray6 = null;
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        java.lang.Long[] longArray15 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray15);
        float[] floatArray22 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray22, 0.0f);
        java.lang.Float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        long[] longArray28 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray28);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray26, (java.lang.Object) longArray28);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.addAll(longArray16, longArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray16);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) '#');
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (byte) 10);
        java.lang.Long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray39 = org.apache.commons.lang3.ArrayUtils.remove(longArray8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[0, 1, 100, 100, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(longArray37);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, 5, (byte) -1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray21);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.remove(byteArray22, 7);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        boolean boolean4 = equalsBuilder0.isEquals();
        float[] floatArray5 = null;
        float[] floatArray6 = null;
        java.lang.String[] strArray11 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray20 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.remove(floatArray20, (int) (short) 1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray23);
        boolean boolean25 = strList12.equals((java.lang.Object) floatArray24);
        float[] floatArray31 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray31, (float) 1);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray31);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray31);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder0.append(floatArray5, floatArray6);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray38, byteArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) -1);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) -1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (byte) -1, (int) '4');
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray54);
        java.lang.Boolean[] booleanArray62 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, true);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, false);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, true);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray68, (int) (short) 100, 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder0.append((java.lang.Object) byteArray54, (java.lang.Object) 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder75 = equalsBuilder0.append((long) (short) 0, (long) 9);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder77 = equalsBuilder0.appendSuper(true);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 100.0, 10.0, 35.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
        org.junit.Assert.assertNotNull(equalsBuilder75);
        org.junit.Assert.assertNotNull(equalsBuilder77);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3, true);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, true, true]");
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) (-1));
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray26);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) '#');
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.add(doubleArray31, (double) '#');
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray31, 0);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray35, (double) (-1), 8, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 10.0, 0.0, 1.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        java.lang.String[] strArray4 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray13 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.remove(floatArray13, (int) (short) 1);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray16);
        boolean boolean18 = strList5.equals((java.lang.Object) floatArray17);
        int int19 = strList5.size();
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, (int) (byte) 1);
        boolean boolean23 = strList5.contains((java.lang.Object) int22);
        java.lang.Object[] objArray24 = strList5.toArray();
        boolean boolean25 = strList5.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strList5.spliterator();
        java.util.stream.Stream<java.lang.String> strStream27 = strList5.stream();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(strStream27);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        double[] doubleArray14 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) (byte) 100, 1.0d);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 100.0d, (int) (short) 1, (double) 1L);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean10, (java.lang.Object) doubleArray14);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray23);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (byte) 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) 100.0f, (double) 100.0f);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, (double) (-1L));
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 10.0, 52.0, -1.0]");
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (int) '#', 10);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        java.lang.Byte[][] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (java.lang.Object) intArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, 1);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.remove(intArray26, (int) (byte) 1);
        java.lang.Integer[] intArray29 = org.apache.commons.lang3.ArrayUtils.toObject(intArray28);
        java.lang.Integer[] intArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray29);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray29);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray31, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = org.apache.commons.lang3.ArrayUtils.remove(intArray31, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.add(intArray8, 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray13, 9);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.subarray(intArray13, 0, (int) (short) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder19.append((byte) -1, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = equalsBuilder19.append((int) (byte) 0, (int) (byte) 10);
        java.lang.Short[] shortArray26 = new java.lang.Short[] {};
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray26);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray26, (short) 1);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray26, (short) 0);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray31, (short) -1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray31, (short) 0);
        java.lang.Short[] shortArray36 = new java.lang.Short[] {};
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray36);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray36, (short) 1);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.clone(shortArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray31, shortArray40);
        short[] shortArray47 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray47, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray47);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray47, (short) (byte) 0);
        java.lang.Short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray47);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.clone(shortArray47);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder25.append(shortArray40, shortArray55);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder56.append((short) 1, (short) 0);
        java.lang.Byte[] byteArray65 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray65);
        java.lang.Byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray66);
        java.lang.Byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray67);
        java.lang.Byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray67);
        java.lang.Byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray69);
        java.lang.Byte[] byteArray77 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray77, (byte) 1);
        java.lang.Byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray77);
        java.lang.Object[] objArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) byteArray80);
        java.lang.Byte[] byteArray82 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray80);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder59.append((java.lang.Object[]) byteArray69, (java.lang.Object[]) byteArray80);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (short) 10, (java.lang.Object) byteArray69);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1]");
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(equalsBuilder25);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertNotNull(equalsBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) 100);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 9);
        java.lang.Double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        java.lang.Double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (short) 10, 3);
        long[] longArray9 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(longArray9, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray9);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray9);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray9);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(longArray9, (long) (short) 100);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (long) '#');
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray7, (java.lang.Object) longArray20, true);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray23, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray32);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, true);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray23, (int) (short) 10, (int) (byte) 100);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        float[] floatArray2 = new float[] { (byte) -1, 1L };
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, (float) (short) 100);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) 'a');
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray6);
        float[] floatArray15 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray15);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray15, (int) (byte) 1, 0);
        float[] floatArray23 = new float[] { (byte) -1, 1L };
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, (float) 10L);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray20, floatArray23);
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray23);
        float[] floatArray30 = new float[] { (byte) -1, 1L };
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray30, (float) 10L);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray30);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray23, floatArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray30, 0.0f, (-1));
        float[] floatArray43 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray43);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray44, 100.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray46);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray30, floatArray46);
        float[] floatArray54 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray54);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, 0.0f);
        java.lang.Float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray54);
        float[] floatArray64 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray64);
        float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray64, (int) (byte) 1, 0);
        float[] floatArray72 = new float[] { (byte) -1, 1L };
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray72, (float) 10L);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray69, floatArray72);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray72);
        float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray54, floatArray72);
        float[] floatArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray77, (float) 'a');
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.add(floatArray77, 0.0f);
        float[] floatArray82 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray77);
        float[] floatArray83 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray48, floatArray77);
        float[] floatArray86 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray83, 0, 3);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray86);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[35.0, 10.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0, 35.0, 10.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[-1.0, 1.0, 35.0, 10.0, 100.0, 100.0, -1.0, -1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray86), "[-1.0, 1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, true);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.add(booleanArray22, false);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.add(booleanArray24, false);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false, false, false, false]");
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray8);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, true);
        boolean[] booleanArray20 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray20, (int) (byte) 0, 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray20, true);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray20);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray20);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray20, true, 7);
        java.lang.Boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray20);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (long) (byte) 10);
        long[] longArray9 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray9, 1L);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray9);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.addAll(longArray2, longArray9);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray23);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, true);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, true, true, true]");
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        java.lang.Byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 1);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 100);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.subarray(intArray16, 0, (int) (short) 1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(intArray21, 7);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 0.0d, (int) (byte) 100, (-1.0d));
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 100L);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        double[] doubleArray24 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, (double) (byte) 100, 1.0d);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray24, 2, (int) 'a');
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray24);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (int) (short) 1, (double) (-1L));
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray34, (double) 5, (double) (byte) 0);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray34, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0, 0.0]");
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(shortArray5, (short) 10);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, 5, (short) (byte) -1);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray15, (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.remove(shortArray15, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 0, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 0, 0, 1, -1, -1, 10]");
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '#', '4', 'a', 'a' };
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray12, byteArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray12, (byte) -1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (byte) -1);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray12, (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray12);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray12, (byte) 100, (int) (short) 100);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(byteArray12, (byte) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray12, (byte) 0, 3);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray5, (java.lang.Object) (byte) 0);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(charArray36, '4');
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray36, '#', (int) (short) -1);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " #4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " #4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , #, 4, a, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " #4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " #4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , #, 4, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " #4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " #4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , #, 4, a, a]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " #4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " #4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , #, 4, a, a]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 2);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, (int) 'a', 100);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray22);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray22, (int) (short) 1);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.subarray(intArray30, (int) '#', (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, true, 5);
        boolean[] booleanArray28 = new boolean[] { false, false, false, true, false, false };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray28);
        boolean[] booleanArray36 = new boolean[] { false, false, false, true, false, false };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray28, booleanArray36);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray36, true);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray40);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray41);
        boolean[] booleanArray49 = new boolean[] { false, false, false, true, false, false };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray49);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray49, (int) (short) 1);
        java.lang.Boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray52);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray41, booleanArray54);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, true, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, true, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) (byte) 1);
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        char[] charArray33 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray37 = new char[] { '#', 'a', 'a' };
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray33, charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray13, (java.lang.Object) charArray38);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray13, 0.0f);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray42, (int) (short) -1, (int) (byte) 0);
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[]");
        org.junit.Assert.assertNotNull(floatArray46);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        java.lang.Short[] shortArray0 = null;
        java.lang.Short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray0);
        java.lang.Short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) -1);
        java.lang.String str6 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray1, "hi!");
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray1, (java.lang.Object) intArray14, 3);
        java.lang.Short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray21, (short) 10);
        java.lang.Short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray21);
        java.lang.Short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray24);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.util.Iterator<java.lang.String> strItor6 = strList3.iterator();
        java.lang.String[] strArray11 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray20 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.remove(floatArray20, (int) (short) 1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray23);
        boolean boolean25 = strList12.equals((java.lang.Object) floatArray24);
        int int26 = strList12.size();
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray27, (int) (byte) 1);
        boolean boolean30 = strList12.contains((java.lang.Object) int29);
        java.lang.Byte[] byteArray37 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 100);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 1);
        java.lang.Byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray39);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray44, (byte) 100);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray46, (byte) 10);
        boolean boolean49 = strList12.contains((java.lang.Object) byteArray46);
        boolean boolean50 = strList3.addAll((java.util.Collection<java.lang.String>) strList12);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.stream.Stream<java.lang.String> strStream58 = strList56.parallelStream();
        boolean boolean59 = strList3.removeAll((java.util.Collection<java.lang.String>) strList56);
        int int60 = strList3.size();
        java.util.Iterator<java.lang.String> strItor61 = strList3.iterator();
        int int62 = strList3.size();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray70 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray70);
        int[] intArray72 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray71, intArray72);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray72, (int) (byte) 0);
        int[] intArray76 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray72);
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray77, (int) (byte) 1);
        int[] intArray80 = new int[] {};
        int[] intArray81 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray80, intArray81);
        int[] intArray83 = org.apache.commons.lang3.ArrayUtils.addAll(intArray77, intArray80);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder84 = equalsBuilder63.append(intArray76, intArray80);
        int[] intArray86 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray76, (int) (short) -1);
        int int89 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray76, (int) ' ', 3);
        int[] intArray95 = new int[] { 100, 1, (byte) 0, 2, (short) -1 };
        boolean boolean96 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray76, intArray95);
        boolean boolean97 = strList3.contains((java.lang.Object) intArray76);
        int[] intArray99 = org.apache.commons.lang3.ArrayUtils.add(intArray76, 0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[100, 1, 0, 2, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0]");
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toObject(longArray2);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, (long) (short) 0);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray2, 0L, 100);
        long[] longArray11 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(longArray11, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray11);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray11);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray11);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray2, longArray20);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray25 = org.apache.commons.lang3.ArrayUtils.add(longArray2, 11, (long) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.util.Iterator<java.lang.String> strItor6 = strList3.iterator();
        java.lang.String[] strArray11 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray20 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.remove(floatArray20, (int) (short) 1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray23);
        boolean boolean25 = strList12.equals((java.lang.Object) floatArray24);
        int int26 = strList12.size();
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray27, (int) (byte) 1);
        boolean boolean30 = strList12.contains((java.lang.Object) int29);
        java.lang.Byte[] byteArray37 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 100);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 1);
        java.lang.Byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray39);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray44, (byte) 100);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray46, (byte) 10);
        boolean boolean49 = strList12.contains((java.lang.Object) byteArray46);
        boolean boolean50 = strList3.addAll((java.util.Collection<java.lang.String>) strList12);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.stream.Stream<java.lang.String> strStream58 = strList56.parallelStream();
        boolean boolean59 = strList3.removeAll((java.util.Collection<java.lang.String>) strList56);
        int int60 = strList3.size();
        java.util.Iterator<java.lang.String> strItor61 = strList3.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator62 = strList3.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList3.spliterator();
        java.util.Iterator<java.lang.String> strItor64 = strList3.iterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertNotNull(strItor64);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        java.util.Spliterator[][] spliteratorArray1 = new java.util.Spliterator[0][];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<java.lang.String>[][] strSpliteratorArray2 = (java.util.Spliterator<java.lang.String>[][]) spliteratorArray1;
        java.util.Spliterator[][] spliteratorArray4 = new java.util.Spliterator[0][];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<java.lang.String>[][] strSpliteratorArray5 = (java.util.Spliterator<java.lang.String>[][]) spliteratorArray4;
        java.util.Spliterator[][][] spliteratorArray7 = new java.util.Spliterator[2][][];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<java.lang.String>[][][] strSpliteratorArray8 = (java.util.Spliterator<java.lang.String>[][][]) spliteratorArray7;
        strSpliteratorArray8[0] = strSpliteratorArray2;
        strSpliteratorArray8[1] = strSpliteratorArray5;
        java.util.Spliterator<java.lang.String>[][][] strSpliteratorArray15 = org.apache.commons.lang3.ArrayUtils.subarray(strSpliteratorArray8, (-1), (int) '#');
        java.util.Spliterator<java.lang.String>[][][] strSpliteratorArray16 = org.apache.commons.lang3.ArrayUtils.toArray(strSpliteratorArray8);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strSpliteratorArray16);
        org.junit.Assert.assertNotNull(spliteratorArray1);
        org.junit.Assert.assertNotNull(strSpliteratorArray2);
        org.junit.Assert.assertNotNull(spliteratorArray4);
        org.junit.Assert.assertNotNull(strSpliteratorArray5);
        org.junit.Assert.assertNotNull(spliteratorArray7);
        org.junit.Assert.assertNotNull(strSpliteratorArray8);
        org.junit.Assert.assertNotNull(strSpliteratorArray15);
        org.junit.Assert.assertNotNull(strSpliteratorArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray27);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.lang.Object obj13 = null;
        boolean boolean14 = strList9.equals(obj13);
        int int15 = strList9.size();
        float[] floatArray21 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 1);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10);
        boolean boolean27 = strList9.remove((java.lang.Object) floatArray21);
        java.lang.String[] strArray30 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.parallelStream();
        java.util.Iterator<java.lang.String> strItor34 = strList31.iterator();
        boolean boolean35 = strList9.containsAll((java.util.Collection<java.lang.String>) strList31);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.parallelStream();
        boolean boolean44 = strList9.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean46 = strList9.add("false");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.stream.Stream<java.lang.String> strStream54 = strList52.parallelStream();
        strList52.clear();
        java.lang.Object[] objArray56 = strList52.toArray();
        boolean boolean57 = strList9.containsAll((java.util.Collection<java.lang.String>) strList52);
        boolean boolean58 = strList52.isEmpty();
        boolean boolean59 = strList52.isEmpty();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(floatArray5, (float) 'a');
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) 10);
        float[] floatArray16 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray16);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, (int) (byte) 1, 0);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) 'a');
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.clone(floatArray16);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray24);
        java.lang.Float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray26);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, ' ');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        float[] floatArray7 = new float[] {};
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray6, (java.lang.Object) floatArray7);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray7, (float) 100L);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray7);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray12);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) (-1));
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        double[] doubleArray33 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (byte) 100, 1.0d);
        double[] doubleArray41 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray33, doubleArray41);
        float[] floatArray47 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray50 = new float[] { (byte) -1, 1L };
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray50, (float) 10L);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray41, (java.lang.Object) boolean53);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) (short) 0, 1);
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray57, (double) (byte) -1);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray59, (int) (byte) 100, 1);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray62, (int) (byte) -1, (int) (short) 100);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray65, (double) 'a', (int) (short) 100);
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray65, (double) 1L);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray29, (java.lang.Object) int70, 3);
        java.lang.Double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray29);
        double[] doubleArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray73);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.add(doubleArray74, (double) (-1));
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray76, (double) 10L, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 0.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray9, '4');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, '4');
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray19, '4');
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) charArray18, (java.lang.Object[]) charArray19);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray19, 'a');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray19);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray19, '4');
        java.util.Map<java.lang.Object, java.lang.Object> objMap28 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) charArray19);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, a, a, 4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(objMap28);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray4, '#');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, '4');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, (long) 5, 10);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray3);
        java.lang.Long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toObject(longArray7);
        java.lang.Object[] objArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray8);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.clone(shortArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) -1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(objArray9, (java.lang.Object) shortArray12);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[-1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[-1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[-1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((long) 4, (long) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder34.append('#', 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder34.append(1L, (long) 100);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.util.Iterator<java.lang.String> strItor6 = strList3.iterator();
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray12, (java.lang.Object) (byte) 1, (int) (byte) -1);
        long[] longArray23 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.subarray(longArray23, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray23);
        java.lang.Long[] longArray28 = org.apache.commons.lang3.ArrayUtils.toObject(longArray23);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray23, (long) (-1));
        java.lang.String[] strArray32 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.stream.Stream<java.lang.String> strStream40 = strList38.parallelStream();
        java.lang.String[] strArray43 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.parallelStream();
        boolean boolean47 = strList38.addAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.Object obj48 = null;
        boolean boolean49 = strList44.equals(obj48);
        int int50 = strList44.size();
        boolean boolean51 = strList33.removeAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray54 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.stream.Stream<java.lang.String> strStream57 = strList55.parallelStream();
        boolean boolean58 = strList44.addAll((java.util.Collection<java.lang.String>) strList55);
        java.lang.String[] strArray60 = new java.lang.String[] { "{true,true}" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.lang.String[] strArray65 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.stream.Stream<java.lang.String> strStream68 = strList66.parallelStream();
        java.lang.String[] strArray71 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.util.stream.Stream<java.lang.String> strStream74 = strList72.parallelStream();
        boolean boolean75 = strList66.addAll((java.util.Collection<java.lang.String>) strList72);
        java.lang.Object obj76 = null;
        boolean boolean77 = strList72.equals(obj76);
        int int78 = strList72.size();
        boolean boolean79 = strList61.removeAll((java.util.Collection<java.lang.String>) strList72);
        java.util.Iterator<java.lang.String> strItor80 = strList72.iterator();
        boolean boolean81 = strList44.retainAll((java.util.Collection<java.lang.String>) strList72);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList44.spliterator();
        boolean boolean84 = strList44.add("{100,0,1,-1}");
        boolean boolean85 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray12, (java.lang.Object) (-1), (java.util.Collection<java.lang.String>) strList44);
        java.util.stream.Stream<java.lang.String> strStream86 = strList44.parallelStream();
        boolean boolean87 = strList44.isEmpty();
        boolean boolean88 = strList3.addAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.Object[] objArray89 = strList44.toArray();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[4, hi!, 4, hi!, {100,0,1,-1}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[4, hi!, 4, hi!, {100,0,1,-1}]");
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) (short) 1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray5, ' ');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.remove(charArray12, 0);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.remove(charArray14, 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray16, (int) (short) 1, '4');
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray16, '#');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray28 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray32 = new char[] { '#', 'a', 'a' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray28, charArray32);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray28, ' ');
        char[] charArray41 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray45 = new char[] { '#', 'a', 'a' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.addAll(charArray41, charArray45);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray45, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder22.append((java.lang.Object) ' ', (java.lang.Object) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder22.append((int) (short) 1, 10);
        boolean boolean54 = equalsBuilder22.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder57 = equalsBuilder22.append('a', '#');
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray58, byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.add(byteArray71, (byte) -1);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.clone(byteArray73);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray74, (byte) 100);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(byteArray74, (byte) 0);
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.clone(byteArray74);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder57.append(byteArray63, byteArray74);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray16, (java.lang.Object) byteArray63);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a44#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a44#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, 4, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(equalsBuilder57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, -1, 10, -1, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100, -1, 10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100, -1, 10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100, -1, 10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(floatArray5, (float) 'a');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray5);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, 5, (float) 8);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 100.0, 10.0, 35.0, 8.0]");
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 100, (double) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder28.append(0.0d, (double) 10);
        long[] longArray34 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(longArray34, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray34);
        boolean boolean39 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray34);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        java.lang.Long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toObject(longArray40);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41, (long) 'a');
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray44);
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray44);
        java.lang.Long[] longArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray44);
        java.lang.Object[] objArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray47);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.subarray(longArray49, 7, (int) ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder28.append(longArray43, longArray49);
        long[] longArray60 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.subarray(longArray60, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray60);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray60);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray60, (long) 2);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.addAll(longArray43, longArray67);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray71 = org.apache.commons.lang3.ArrayUtils.add(longArray67, (int) ' ', (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1, 100, -1, 1, -1, 1, 10]");
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        long[] longArray6 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, 3, (int) (byte) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray6);
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, false, false };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, true);
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "1" };
        boolean boolean24 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean10, (java.lang.Object) true, strArray23);
        java.lang.String[] strArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray23);
        java.lang.String[] strArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray25);
        long[] longArray33 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.subarray(longArray33, 3, (int) (byte) 0);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray33);
        boolean[] booleanArray44 = new boolean[] { false, false, false, true, false, false };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray44, true);
        java.lang.String[] strArray50 = new java.lang.String[] { "4", "1" };
        boolean boolean51 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean37, (java.lang.Object) true, strArray50);
        java.lang.String[] strArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray50);
        java.lang.String[] strArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray52);
        java.lang.String[] strArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray53);
        java.lang.String[] strArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray53);
        java.lang.Comparable<java.lang.String>[] strComparableArray56 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.Comparable<java.lang.String>[]) strArray26, (java.lang.Comparable<java.lang.String>[]) strArray53);
        java.lang.String[] strArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray53);
        java.lang.Object[] objArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray53);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10, 1, -1, 1, -1, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[10, 1, -1, 1, -1, 100]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strComparableArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[4, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[4, 1]");
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 10);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray23);
        java.lang.Byte[] byteArray31 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31, (byte) 1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(byteArray33, (byte) 100);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(byteArray33, (byte) 1);
        java.lang.Byte[] byteArray44 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray44, (byte) 1);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray46, (int) (byte) 0, (int) (byte) 1);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray33, byteArray49);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (byte) 1);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray23, byteArray49);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.add(byteArray53, (byte) -1);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.remove(byteArray53, 3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 0, -1, -1, 100, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 0, -1, -1, 100, 0, 0, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 0, -1, -1, 100, 0, 0, 10, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 0, -1, 100, 0, 0, 10, 0]");
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray8);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.subarray(intArray8, 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray15);
        java.lang.Integer[] intArray23 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, (int) (byte) 0);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray25);
        short[] shortArray35 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray35, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray35);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray35, (short) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray35);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray25, (java.lang.Object) shortArray35);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray15, intArray25);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(intArray25, (int) (short) -1);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray25, (int) ' ');
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray48, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = org.apache.commons.lang3.ArrayUtils.remove(intArray51, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[-1, 1, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100]");
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray21, (int) (byte) 0, (int) (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 1);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) 100);
        byte[] byteArray30 = new byte[] {};
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray30, byteArray35);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray30, (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray24, byteArray30);
        java.lang.Byte[] byteArray46 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray46, (byte) 1);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(byteArray48, (byte) 100);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains(byteArray48, (byte) 1);
        java.lang.Byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray48);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53, (byte) 100);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.add(byteArray55, (byte) 10);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.clone(byteArray57);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray57);
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.add(byteArray57, (byte) 100);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray57);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray62);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray62, (byte) -1, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray62);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 0, -1, -1, 100, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a');
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray8);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.add(intArray8, (int) (short) 10);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        java.lang.Long[] longArray27 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray27);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray27, (long) (short) 10);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray19, (java.lang.Object) longArray30, (int) (byte) 100);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19, 1L);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19, (long) '#');
        java.lang.Object[] objArray38 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray19);
        boolean boolean40 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (short) 10, (java.lang.Object) longArray19, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) -1, (byte) 0, (short) 10, (byte) 100 };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray6, (short) (byte) 0, (int) (short) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray6, (short) (byte) 1);
        java.lang.Short[] shortArray12 = new java.lang.Short[] {};
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) 1);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) 0);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 0);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray6, shortArray21);
        java.lang.Short[] shortArray23 = new java.lang.Short[] {};
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23, (short) 1);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) 0);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray26);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) (byte) 10, (int) (short) -1);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) (byte) 0, (int) (byte) 0);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray26);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray21, shortArray36);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.remove(shortArray37, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, 100, -1, 0, 10, 100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[10, 100, -1, 0, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[]");
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder6 = equalsBuilder3.append((float) (-1), (float) '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = equalsBuilder3.append((byte) 1, (byte) 100);
        byte[] byteArray11 = new byte[] { (byte) 10 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray11);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray19);
        java.lang.Byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray20);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20, (byte) 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray23, (byte) 1);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = equalsBuilder3.append(byteArray11, byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder27.append(' ', '#');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder33 = equalsBuilder30.append((long) (byte) 10, (long) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder33.append(true, false);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder6);
        org.junit.Assert.assertNotNull(equalsBuilder9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertNotNull(equalsBuilder27);
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(equalsBuilder33);
        org.junit.Assert.assertNotNull(equalsBuilder36);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder0.append((double) '4', 0.0d);
        java.lang.Boolean[] booleanArray38 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray38);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray38);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray38);
        boolean[] booleanArray47 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray47, (int) (byte) 0, 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray47, true);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray41, booleanArray47);
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray57);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray58);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray58, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder34.append(booleanArray47, booleanArray58);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray47);
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.add(booleanArray47, true);
        java.lang.String str67 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) booleanArray47, "true");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[true, false, true, true, true, true]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{true,false,true,true,true}" + "'", str67, "{true,false,true,true,true}");
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        short[] shortArray9 = null;
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        float[] floatArray16 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray16, 0.0f);
        java.lang.Float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        float[] floatArray26 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray26);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (byte) 1, 0);
        float[] floatArray34 = new float[] { (byte) -1, 1L };
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) 10L);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray34);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray34);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, (int) (short) -1, (int) (short) 10);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray42, 0, (float) (-1L));
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray4, (java.lang.Object) floatArray42);
        java.lang.String str47 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray42);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray42);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 100.0, 100.0, 10.0, 35.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[35.0, 10.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, -1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{-1.0,100.0,100.0,10.0,35.0}" + "'", str47, "{-1.0,100.0,100.0,10.0,35.0}");
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, true);
        boolean[] booleanArray26 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray26, (int) (byte) 0, 0);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray29);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, false, (int) (byte) 1);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray29);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, true);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray37);
        java.lang.Boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(booleanArray39);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100L, 2, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100.0f, (int) (short) 100);
        double[] doubleArray18 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (byte) 100, 1.0d);
        double[] doubleArray26 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray26);
        float[] floatArray32 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray35 = new float[] { (byte) -1, 1L };
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray35, (float) 10L);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray35);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray26, (java.lang.Object) boolean38);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) (short) 0, 1);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        double[] doubleArray47 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray47, (double) (byte) 100, 1.0d);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray47, doubleArray55);
        float[] floatArray61 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray64 = new float[] { (byte) -1, 1L };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray64, (float) 10L);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray61, floatArray64);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray55, (java.lang.Object) boolean67);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray55);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray43);
        java.lang.Double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray72);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray73);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray43, 0.0d);
        double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray76);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray14, byteArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) -1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 1);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray14);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 0, (int) (byte) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(byteArray14, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, 5, (byte) -1);
        java.lang.Byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray21);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        boolean boolean33 = equalsBuilder31.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder31.append(true, true);
        long[] longArray38 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray38, 0L);
        long[] longArray43 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray43);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray45, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder31.append(longArray38, longArray45);
        long[] longArray51 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(longArray51, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray61 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray61, 1L);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray56, longArray63);
        long[] longArray71 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.subarray(longArray71, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray71);
        java.lang.Long[] longArray76 = org.apache.commons.lang3.ArrayUtils.toObject(longArray71);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder49.append(longArray63, longArray71);
        long[] longArray80 = org.apache.commons.lang3.ArrayUtils.add(longArray71, (long) (short) 100);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.subarray(longArray80, (int) (byte) 100, 10);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertNotNull(longArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray80), "[100, -1, 1, -1, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[]");
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) (-1L), (int) (short) 100, (double) 100.0f);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray37, (int) 'a', 3);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray37);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, (double) '4');
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray43, (double) (short) 100, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[52.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        boolean[] booleanArray5 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray5, (int) (byte) 0, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray5, true);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray5);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, false);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, false);
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray20);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        short[] shortArray10 = new short[] { (short) 10 };
        short[] shortArray12 = new short[] { (short) 10 };
        short[] shortArray14 = new short[] { (short) 10 };
        short[] shortArray16 = new short[] { (short) 10 };
        short[][] shortArray17 = new short[][] { shortArray10, shortArray12, shortArray14, shortArray16 };
        short[][] shortArray18 = org.apache.commons.lang3.ArrayUtils.clone(shortArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.parallelStream();
        java.lang.String[] strArray27 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.parallelStream();
        boolean boolean31 = strList22.addAll((java.util.Collection<java.lang.String>) strList28);
        boolean boolean33 = strList28.add("{4,#,a,4,#}");
        boolean boolean34 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray0, (java.lang.Object) shortArray17, (java.util.Collection<java.lang.String>) strList28);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray0);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray0);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 0, 4);
        java.lang.Byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        java.lang.String[] strArray43 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.parallelStream();
        java.lang.String[] strArray51 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray60 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray60);
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.remove(floatArray60, (int) (short) 1);
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray54, floatArray63);
        boolean boolean65 = strList52.equals((java.lang.Object) floatArray64);
        int int66 = strList52.size();
        java.util.stream.Stream<java.lang.String> strStream67 = strList52.parallelStream();
        boolean boolean68 = strList44.addAll((java.util.Collection<java.lang.String>) strList52);
        java.lang.Boolean[] booleanArray72 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray72);
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray72, true);
        java.lang.Boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray72);
        boolean boolean77 = strList52.equals((java.lang.Object) booleanArray72);
        java.lang.Object[] objArray78 = strList52.toArray();
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray40, objArray78);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[{}, {}, 1, {4,#,a,4,#}]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder0.append((double) '4', 0.0d);
        boolean boolean35 = equalsBuilder34.isEquals();
        java.lang.Integer[] intArray42 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray42);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray43, intArray44);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(intArray44, (int) '4');
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.add(intArray44, (int) (short) 100);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray44);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray44);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray44, (int) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder54 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray61 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray61);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray62, intArray63);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray63, (int) (byte) 0);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray63);
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray68, (int) (byte) 1);
        int[] intArray71 = new int[] {};
        int[] intArray72 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray71, intArray72);
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.addAll(intArray68, intArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder75 = equalsBuilder54.append(intArray67, intArray71);
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray67, (int) (short) -1);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray77, (int) '#', (-1));
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder81 = equalsBuilder34.append(intArray44, intArray77);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder84 = equalsBuilder34.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder34.appendSuper(false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder81);
        org.junit.Assert.assertNotNull(equalsBuilder84);
        org.junit.Assert.assertNotNull(equalsBuilder86);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        boolean boolean32 = equalsBuilder0.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder0.append('a', '#');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder0.append(' ', ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder38.append((float) (byte) -1, (float) (-1L));
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder38.append((long) (short) 100, (long) (short) 100);
        java.lang.Boolean boolean45 = equalsBuilder44.build();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertEquals("'" + boolean45 + "' != '" + false + "'", boolean45, false);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, 0, (int) (short) 10);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray8, 6, (int) (byte) -1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray17, (float) 10);
        java.lang.Float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray17);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray20, (float) 1L);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray22, (float) 'a');
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.remove(floatArray22, 0);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, 4, (int) (short) 0);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray26);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[1.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{1.0}" + "'", str27, "{1.0}");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[1.0]");
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 6);
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        float[] floatArray34 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray34);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray34, (int) (byte) 1, 0);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(floatArray34, (float) 'a');
        float[] floatArray47 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray47);
        float[] floatArray54 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray57 = new float[] { (byte) -1, 1L };
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray57, (float) 10L);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray57);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray57);
        java.lang.Integer[] intArray68 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray68);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray68);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        boolean boolean73 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray57, (java.lang.Object) wildcardClass71, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder0.append(floatArray34, floatArray57);
        float[] floatArray75 = org.apache.commons.lang3.ArrayUtils.clone(floatArray34);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.contains(floatArray75, (float) (short) 1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, ' ');
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray20);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray22);
        double[] doubleArray29 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray29, (double) (byte) 100, 1.0d);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray29, doubleArray37);
        float[] floatArray43 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray46 = new float[] { (byte) -1, 1L };
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) 10L);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray43, floatArray46);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray37, (java.lang.Object) boolean49);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray37, (int) (short) 0, 1);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray53, (double) (byte) -1);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray55, (int) (byte) 100, 1);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray55, 0, (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray55);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) charArray22, (java.lang.Object) doubleArray55);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray20, charArray22);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray20, '4');
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray66);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray66);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray68);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "aa#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "aa#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, a, #]");
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        java.lang.Short[] shortArray8 = new java.lang.Short[] {};
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8, (short) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray11, 1, (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray11, (short) (byte) 100, 2);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        java.lang.Long[] longArray2 = new java.lang.Long[] { 1L, 0L };
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2, 0L);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2, 100L);
        java.lang.Long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2, 10L);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(longArray11, (-1L));
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray8);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray8, 1, (int) (short) 10);
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, '4');
        java.lang.Byte[] byteArray26 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) 1, (byte) -1 };
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray26);
        java.lang.Byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray27);
        boolean boolean30 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray20, (java.lang.Object) byteArray27, true);
        java.lang.Character[] charArray36 = new java.lang.Character[] { '#', '#', '#', ' ', '#' };
        java.lang.Character[][] charArray37 = new java.lang.Character[][] { charArray36 };
        java.lang.Character[][] charArray38 = org.apache.commons.lang3.ArrayUtils.toArray(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray27, (java.lang.Object[]) charArray38);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray27);
        java.lang.Byte[] byteArray47 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray47, (byte) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains(byteArray49, (byte) 100);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(byteArray49, (byte) 1);
        java.lang.Byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray49);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray54, (byte) 100);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.add(byteArray56, (byte) 10);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.clone(byteArray58);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray58);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.remove(byteArray58, 3);
        java.lang.Byte[] byteArray69 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray69, (byte) 1);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.contains(byteArray71, (byte) 100);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains(byteArray71, (byte) 1);
        java.lang.Byte[] byteArray82 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray84 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray82, (byte) 1);
        byte[] byteArray87 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray84, (int) (byte) 0, (int) (byte) 1);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray71, byteArray87);
        byte[] byteArray90 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray71, (byte) 10);
        byte[] byteArray92 = org.apache.commons.lang3.ArrayUtils.add(byteArray71, (byte) -1);
        byte[] byteArray93 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray58, byteArray92);
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray40, byteArray92);
        boolean boolean96 = org.apache.commons.lang3.ArrayUtils.contains(byteArray92, (byte) 0);
        byte[] byteArray97 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray92);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 100, 1, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 0, -1, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 0, -1, 100, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 0, -1, -1, 100, 0, 0, 0, 0, 100, -1, -1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[0, 100, -1, -1, 0, 0, 0, 100, -1, -1, 0, -1]");
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray14, byteArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) -1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray14);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) -1, (int) '4');
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(byteArray10, (byte) 100);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray10);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray10, 10, 9);
        java.lang.String str38 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 9);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) 100L, 2, (double) (short) -1);
        double[] doubleArray37 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray37, (double) (byte) 100, 1.0d);
        double[] doubleArray45 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray37, doubleArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder0.append(doubleArray29, doubleArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder0.append((float) 3, (float) (byte) 1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(equalsBuilder50);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (short) 10, 3);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray7, 2, (int) (byte) 0);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, false, true, true, false };
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray18);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.add(booleanArray22, false);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, true, true, false, false]");
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        java.lang.Short[] shortArray22 = new java.lang.Short[] {};
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray22, (short) 1);
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(shortArray25, (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray25, (short) 0, (-1));
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray35);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray36, (int) (short) 10, 3);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray39);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder0.append((java.lang.Object) int31, (java.lang.Object) booleanArray40);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder41.append((float) 2, (float) '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder44.append((float) ' ', (float) 100L);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(equalsBuilder47);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        float[] floatArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) 0, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, 0.0f);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) floatArray9);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9, (float) 100L);
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) ' ');
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) (-1));
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray13);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray18);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { 1, 0 };
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray19, (java.lang.Object[]) intArray22);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = org.apache.commons.lang3.ArrayUtils.remove(intArray25, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0]");
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        java.lang.Short[] shortArray14 = new java.lang.Short[] {};
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 1);
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray17);
        java.lang.Short[] shortArray20 = new java.lang.Short[] {};
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20, (short) 1);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.clone(shortArray23);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 1);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) 1);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, (-1), 10);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(intArray16, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((byte) -1, (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((short) (byte) 100, (short) 10);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray38, 'a', (int) '4');
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 0, ' ');
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray38, '4');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        char[] charArray55 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray59 = new char[] { '#', 'a', 'a' };
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.addAll(charArray55, charArray59);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.subarray(charArray59, (int) 'a', (int) (short) 10);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray59, '4');
        char[] charArray71 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray75 = new char[] { '#', 'a', 'a' };
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.addAll(charArray71, charArray75);
        java.lang.String str77 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray71);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray71);
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.addAll(charArray59, charArray78);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder37.append(charArray49, charArray78);
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray78);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray81, ' ');
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.contains(charArray81, '#');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{4,#,a,4,#}" + "'", str77, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, 0, (int) (short) 10);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray35, (int) (byte) 10, 100);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray12, (int) '4', (int) (short) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 100, (int) (byte) -1);
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 0, 9);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray12);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.add(shortArray25, (int) (byte) 100, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a');
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray8);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, 7, (int) ' ');
        java.lang.Integer[] intArray18 = org.apache.commons.lang3.ArrayUtils.toObject(intArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray8);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray8);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = org.apache.commons.lang3.ArrayUtils.remove(intArray8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, (long) (short) 100);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) '#');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.subarray(longArray1, 4, (int) (byte) 1);
        long[] longArray19 = null;
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) 100);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        long[] longArray0 = null;
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (byte) 1, (int) (short) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, (long) 3, (int) 'a');
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, 1L);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) ' ', 1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) (byte) -1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray29, (int) (byte) 100, 1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray32, (int) (byte) -1, (int) (short) 100);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray35, (double) 'a', (int) (short) 100);
        java.lang.Double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray35);
        java.lang.Double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray39);
        java.lang.Double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        char[] charArray5 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray9 = new char[] { '#', 'a', 'a' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) 'a', (int) (short) 10);
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray14, byteArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) -1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) -1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(byteArray24, (byte) 100);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 0);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray28, (byte) -1);
        char[] charArray36 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray40 = new char[] { '#', 'a', 'a' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray40);
        java.lang.String str42 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray36);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray36);
        java.lang.String[] strArray46 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.stream.Stream<java.lang.String> strStream49 = strList47.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream50 = strList47.stream();
        boolean boolean51 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) int30, (java.lang.Object) charArray36, (java.util.Collection<java.lang.String>) strList47);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.add(charArray36, ' ');
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.addAll(charArray13, charArray36);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.clone(charArray54);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray54);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{4,#,a,4,#}" + "'", str42, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "4#a4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "4#a4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4, #, a, 4, #,  ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#4a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#4a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, 4, a, #, 4]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4, #, a, 4, #]");
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        java.lang.Short[] shortArray8 = new java.lang.Short[] {};
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8, (short) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray11, 1, (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray11, (short) (byte) 100, 2);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.clone(shortArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        char[] charArray0 = null;
        double[] doubleArray4 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray4, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray4);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray10);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray10, '#');
        char[] charArray20 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray24 = new char[] { '#', 'a', 'a' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray24);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray20, ' ');
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray20);
        boolean boolean30 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray9, (java.lang.Object) charArray20, true);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray20, 'a');
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray32);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4#a4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4#a4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, #, a, 4, #, a]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (short) 10, 3);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        boolean[] booleanArray14 = new boolean[] { false, false, false, true, false, false };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray6, 6, (int) (byte) -1);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, 0, true);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray14 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.remove(floatArray14, (int) (short) 1);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray8, floatArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray8);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray8);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray5, 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray5, (float) (short) 100);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray5);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray5);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 6);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        short[] shortArray5 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray9 = new java.lang.Short[] {};
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray5);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) (byte) 0, 10);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        java.lang.Double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, 10, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 100);
        java.lang.Byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 1, -1, 10]");
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) -1);
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray4);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, 0, (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) 100, (-1));
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[-1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray3, (short) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) 1, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 0);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) 1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray3);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray15);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (short) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (-1), (int) (byte) 0, (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append(2, 5);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 1.0d, 100.0d, 0.0d, 1.0d };
        java.lang.Double[][] doubleArray55 = new java.lang.Double[][] { doubleArray39, doubleArray44, doubleArray49, doubleArray54 };
        java.lang.Double[][] doubleArray56 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray56);
        java.util.Map<java.lang.Object, java.lang.Object> objMap58 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray56);
        boolean[] booleanArray64 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray64, (int) (byte) 0, 0);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray64, 4, (int) '4');
        java.lang.Boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray64);
        java.lang.Double[][] doubleArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray56, (java.lang.Object) booleanArray64);
        short[] shortArray78 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray78, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray78);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray78, (short) (byte) 0);
        java.lang.Short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray78);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder34.append((java.lang.Object[]) doubleArray72, (java.lang.Object[]) shortArray85);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder88 = equalsBuilder34.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder91 = equalsBuilder34.append(8, 5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objMap58);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[true]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertNotNull(equalsBuilder88);
        org.junit.Assert.assertNotNull(equalsBuilder91);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder0.append((double) '4', 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder34.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder36.append((float) 'a', (float) '#');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder42 = equalsBuilder39.append('4', '#');
        equalsBuilder39.reset();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertNotNull(equalsBuilder42);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray13);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray18, (float) 10L);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray18);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray18);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[1.0, -1.0]");
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray6 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, (int) (short) 1);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) (short) 100, (int) (byte) 0);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.remove(floatArray12, (int) (byte) 0);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray17);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.remove(floatArray18, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        double[] doubleArray14 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) (byte) 100, 1.0d);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 100.0d, (int) (short) 1, (double) 1L);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean10, (java.lang.Object) doubleArray14);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23);
        double[] doubleArray29 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray29, (double) (byte) 100, 1.0d);
        double[] doubleArray37 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray29, doubleArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray38, 0.0d, (int) (byte) 100, (-1.0d));
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray38, (double) 100L);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray38);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray38, (double) (byte) 0, (double) 10);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray38);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) (short) 100, (double) ' ');
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, 0.0d);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) 1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 10.0, 52.0, -1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        java.lang.Object[] objArray0 = null;
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, false);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        java.lang.Boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 1, (long) '#');
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray13, (long) 2, 10);
        long[] longArray18 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(longArray18, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray18);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray18);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray18);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray18);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.add(longArray27, (int) (short) 1, (long) '#');
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) 2, 10);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray30);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray8, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray13, (byte) -1);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray13, (byte) -1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(byteArray23, (byte) 100);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 0);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.add(byteArray27, 0, (byte) -1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray27, (int) (byte) 1, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray12, byteArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray12);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, -1, 10, -1, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, -1, 10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, -1, 10, -1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (int) '#', 10);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        java.lang.Byte[][] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (java.lang.Object) intArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, (int) (short) -1);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, (int) ' ');
        java.lang.Integer[] intArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap32 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '-1', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 0, 10, -1, 1]");
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray2);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray2);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) (-1));
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray26);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) '#');
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray31, (double) 7);
        double[] doubleArray34 = null;
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray33, doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 10.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 10.0, 0.0, 1.0]");
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) 1, (int) (short) 100);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 10, (double) (byte) 100);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) 0);
        java.lang.Double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16, (double) 4);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[52.0, 10.0, -1.0, 0.0]");
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, 10.0d, (-1.0d), 10.0d, 0.0d, (-1.0d) };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100L, 2, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 100.0f, (int) (short) 100);
        double[] doubleArray18 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (byte) 100, 1.0d);
        double[] doubleArray26 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray26);
        float[] floatArray32 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray35 = new float[] { (byte) -1, 1L };
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray35, (float) 10L);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray35);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray26, (java.lang.Object) boolean38);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) (short) 0, 1);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray26);
        double[] doubleArray47 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray47, (double) (byte) 100, 1.0d);
        double[] doubleArray55 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray47, doubleArray55);
        float[] floatArray61 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray64 = new float[] { (byte) -1, 1L };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray64, (float) 10L);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray61, floatArray64);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray55, (java.lang.Object) boolean67);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray55);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray43);
        java.lang.Double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray72);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray43, doubleArray73);
        int int78 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray73, (double) (short) 10, (int) (byte) 10, 0.0d);
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray73, (double) 10, (int) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, -1.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        java.lang.Short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 0);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 1);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        short[] shortArray9 = null;
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, (short) 100);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) 0);
        short[] shortArray20 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray20, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray24 = new java.lang.Short[] {};
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray27);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray27, (int) '4', (int) (short) 0);
        boolean[] booleanArray38 = new boolean[] { false, false, false, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray38);
        boolean[] booleanArray46 = new boolean[] { false, false, false, true, false, false };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray38, booleanArray46);
        short[] shortArray53 = new short[] { (short) -1, (byte) 0, (byte) 0, (byte) 1 };
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray53, (short) (byte) 100, (int) 'a');
        java.lang.Short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray53);
        boolean boolean58 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) boolean48, (java.lang.Object) shortArray53);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray31, shortArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray31, (short) 100);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.clone(shortArray31);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray10, shortArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray10);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[]");
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((byte) -1, (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((short) (byte) 100, (short) 10);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray38, 'a', (int) '4');
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 0, ' ');
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray38, '4');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        char[] charArray55 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray59 = new char[] { '#', 'a', 'a' };
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.addAll(charArray55, charArray59);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.subarray(charArray59, (int) 'a', (int) (short) 10);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray59, '4');
        char[] charArray71 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray75 = new char[] { '#', 'a', 'a' };
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.addAll(charArray71, charArray75);
        java.lang.String str77 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray71);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray71);
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.addAll(charArray59, charArray78);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder37.append(charArray49, charArray78);
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray78);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray81, ' ');
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray81);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{4,#,a,4,#}" + "'", str77, "{4,#,a,4,#}");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "#aa4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, a, a, 4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, #, a, 4, #]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder0.append((double) '4', 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder34.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder36.append((float) 5, (float) 2);
        boolean boolean40 = equalsBuilder39.isEquals();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) 'a', (int) (short) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 100);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray16);
        java.lang.Object[] objArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) intArray19);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray29 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray33 = new char[] { '#', 'a', 'a' };
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray29, charArray33);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray29, ' ');
        char[] charArray42 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray46 = new char[] { '#', 'a', 'a' };
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.addAll(charArray42, charArray46);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray46, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = equalsBuilder23.append((java.lang.Object) ' ', (java.lang.Object) charArray46);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder54 = equalsBuilder23.append((int) (short) 1, 10);
        java.lang.Boolean boolean55 = equalsBuilder54.build();
        short[] shortArray61 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray61, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray65 = new java.lang.Short[] {};
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray65);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray65, (short) 1);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray61, shortArray68);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray68, (int) '4', (int) (short) 0);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray68, (short) 100, (int) (byte) -1);
        java.lang.Short[] shortArray76 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray68);
        short[] shortArray82 = new short[] { (short) 100, (byte) 0, (short) 0, (byte) 1, (short) -1 };
        int int85 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray82, (short) (byte) 10, (int) (short) 1);
        java.lang.Short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray82);
        short[] shortArray88 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray82, (short) (byte) 0);
        java.lang.Short[] shortArray89 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray82);
        short[] shortArray92 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray82, (int) (byte) 100, (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder93 = equalsBuilder54.append(shortArray68, shortArray82);
        short[] shortArray96 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray82, 9, 9);
        boolean boolean97 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 4, (java.lang.Object) 9);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder51);
        org.junit.Assert.assertNotNull(equalsBuilder54);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + false + "'", boolean55, false);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[100, 0, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertNotNull(shortArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray88), "[100, 0, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertNotNull(shortArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray92), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder93);
        org.junit.Assert.assertNotNull(shortArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray96), "[]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 2);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(intArray22, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray22);
        java.lang.Integer[] intArray34 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(intArray35, 1);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray22, intArray35);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray35, 10, (int) (byte) 0);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray35, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray35);
        java.lang.Integer[] intArray51 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray51);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray52, intArray53);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(intArray53, (int) '4');
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray53, (int) 'a', (int) (short) 0);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray53, (int) '#', (int) (short) 0);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.subarray(intArray53, (int) (short) 0, (int) (short) 1);
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.addAll(intArray35, intArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray35);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = org.apache.commons.lang3.ArrayUtils.add(intArray35, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, -1, 10, 0, 1, -1]");
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) 100);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) 0, (double) 0L);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 0.0, 10.0, -1.0]");
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((byte) -1, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder6 = equalsBuilder3.append((float) (-1), (float) '4');
        char[] charArray12 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray16 = new char[] { '#', 'a', 'a' };
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray12, charArray16);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.subarray(charArray16, (int) 'a', (int) (short) 10);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray20, (int) (short) 0, '4');
        java.lang.Character[] charArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray24, '4');
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray24);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray23);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray31);
        java.lang.Character[] charArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray35);
        char[] charArray42 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray46 = new char[] { '#', 'a', 'a' };
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.addAll(charArray42, charArray46);
        java.lang.String str48 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray42);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray35, charArray42);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.subarray(charArray35, 4, (int) '#');
        int int53 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) charArray35);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray35);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder55 = equalsBuilder3.append(charArray32, charArray54);
        boolean[] booleanArray56 = null;
        boolean[] booleanArray63 = new boolean[] { false, false, false, true, false, false };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray63);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray63, (int) (short) 1);
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray66);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder68 = equalsBuilder55.append(booleanArray56, booleanArray66);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray56, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder6);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{4,#,a,4,#}" + "'", str48, "{4,#,a,4,#}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder55);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, false, true, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder68);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        byte[][][] byteArray0 = new byte[][][] {};
        byte[][][] byteArray1 = new byte[][][] {};
        byte[][][] byteArray2 = new byte[][][] {};
        byte[][][] byteArray3 = new byte[][][] {};
        byte[][][][] byteArray4 = new byte[][][][] { byteArray0, byteArray1, byteArray2, byteArray3 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray4);
        java.lang.Object[][] objArray6 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[][]) byteArray4);
        java.lang.Short[] shortArray7 = new java.lang.Short[] {};
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray7);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray7, (short) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.clone(shortArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) (byte) -1, (int) (short) 100);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray11);
        short[] shortArray16 = null;
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) 0, 3);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray21);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray21, (short) 0);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray24, (short) (byte) 1);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray4, (java.lang.Object) shortArray29, 5);
        // The following exception was thrown during execution in test generation
        try {
            byte[][][][] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray4, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        boolean[] booleanArray3 = new boolean[] { true, true, true };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray3, true);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray3, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray3);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray8, false, 1);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray12);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray12, false);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray15, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.add(booleanArray15, 2, true);
        java.lang.String str22 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) true, "{false,false,true,true,false}");
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, true, true]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "true" + "'", str22, "true");
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        java.lang.Long[] longArray12 = new java.lang.Long[] { 0L, 1L, 100L, 100L, 0L };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray6, (java.lang.Object) longArray13);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray6);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray30 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (byte) 100, 1.0d);
        double[] doubleArray38 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray30, doubleArray38);
        float[] floatArray44 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray47 = new float[] { (byte) -1, 1L };
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray47, (float) 10L);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray44, floatArray47);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray38, (java.lang.Object) boolean50);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray38);
        double[] doubleArray56 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray56, (double) (byte) 100, 1.0d);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray56, 2, (int) 'a');
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray56, (double) '4');
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray52, doubleArray56);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.add(doubleArray52, 5, (-1.0d));
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray52, (double) 8);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[52.0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0, -1.0, 10.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 0.0, 10.0, -1.0, 1.0, -1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        float[] floatArray4 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray7 = new float[] { (byte) -1, 1L };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) 10L);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray4, floatArray7);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (float) '4');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray12);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.clone(floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 3);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.clone(floatArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, (float) (short) 1, 2);
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray17);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 10.0, -1.0, 97.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0, 3.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.remove(floatArray5, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (-1.0f), (double) 7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.lang.Object obj13 = null;
        boolean boolean14 = strList9.equals(obj13);
        int int15 = strList9.size();
        float[] floatArray21 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 1);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10);
        boolean boolean27 = strList9.remove((java.lang.Object) floatArray21);
        java.lang.String[] strArray30 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.parallelStream();
        java.util.Iterator<java.lang.String> strItor34 = strList31.iterator();
        boolean boolean35 = strList9.containsAll((java.util.Collection<java.lang.String>) strList31);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "{}", "{4,#,a,4,#}", "4" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.parallelStream();
        boolean boolean44 = strList9.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean45 = strList9.isEmpty();
        java.util.Collection<java.lang.String> strCollection46 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = strList9.retainAll(strCollection46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 100.0, 100.0, 10.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, ' ');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6);
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8, '#');
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray4, (double) (byte) 100, 1.0d);
        double[] doubleArray12 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray12);
        float[] floatArray18 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray21 = new float[] { (byte) -1, 1L };
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 10L);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray21);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray12, (java.lang.Object) boolean24);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) (short) 0, 1);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray28, (double) (byte) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray30, (int) (byte) 100, 1);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray30, 0, (int) (short) 10);
        double[] doubleArray40 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray40, (double) (byte) 100, 1.0d);
        double[] doubleArray48 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray40, doubleArray48);
        float[] floatArray54 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray57 = new float[] { (byte) -1, 1L };
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray57, (float) 10L);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray57);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray48, (java.lang.Object) boolean60);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray48, (int) (short) 0, 1);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray64, (double) (byte) -1);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray66, (int) (byte) 100, 1);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray66, 0, (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray66);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray36, doubleArray66);
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, (double) 6);
        java.lang.Double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray36);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray30 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (byte) 100, 1.0d);
        double[] doubleArray38 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray30, doubleArray38);
        float[] floatArray44 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray47 = new float[] { (byte) -1, 1L };
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray47, (float) 10L);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray44, floatArray47);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray38, (java.lang.Object) boolean50);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray38);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.add(doubleArray38, 2, (double) 'a');
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.add(doubleArray38, 3, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0, 10.0, -1.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 97.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 0.0, 10.0, 10.0, -1.0]");
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) (byte) 0, (-1.0d));
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray25);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) 0L, (int) '4', (double) (byte) 0);
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray36);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, (long) (short) 100);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) '#');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray15, (long) '4');
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 35]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1]");
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, (int) (byte) 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray9);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 1);
        int[] intArray17 = new int[] {};
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.addAll(intArray14, intArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder0.append(intArray13, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.subarray(intArray17, 4, 5);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray17);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray17, (int) (byte) 100, 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) 1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) -1, (int) (short) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        java.lang.Short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray19, ' ');
        char[] charArray32 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray36 = new char[] { '#', 'a', 'a' };
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray32, charArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray36, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder13.append((java.lang.Object) ' ', (java.lang.Object) charArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder13.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder13.append((double) '4', 0.0d);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray12, (java.lang.Object) 0.0d, (-1));
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        java.lang.Short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray12);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { 'a', (byte) 100, (byte) 100, 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[97, 100, 100, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[97, 100, 100, 100]");
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray0);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray0, (int) (byte) -1, (int) '4');
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray0, (byte) 100);
        java.lang.Byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray0);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray20, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray21, (int) (byte) 0, (int) (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 1);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray24);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        long[] longArray1 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1);
        java.lang.Long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1]");
        org.junit.Assert.assertNotNull(longArray11);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (byte) 1);
        int[] intArray3 = new int[] {};
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray3, intArray4);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray3);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, 9, (int) (short) 100);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = org.apache.commons.lang3.ArrayUtils.add(intArray3, (int) (byte) 100, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        java.lang.String[] strArray4 = new java.lang.String[] { "{}", "{}", "1", "{4,#,a,4,#}" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray13 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.remove(floatArray13, (int) (short) 1);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray16);
        boolean boolean18 = strList5.equals((java.lang.Object) floatArray17);
        int int19 = strList5.size();
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, (int) (byte) 1);
        boolean boolean23 = strList5.contains((java.lang.Object) int22);
        java.lang.Byte[] byteArray30 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray30, (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(byteArray32, (byte) 100);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(byteArray32, (byte) 1);
        java.lang.Byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray32);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 100);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray39, (byte) 10);
        boolean boolean42 = strList5.contains((java.lang.Object) byteArray39);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.add(byteArray39, (byte) 0);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 10);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray39, (byte) -1);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray39);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray39);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray2);
        char[] charArray9 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray13 = new char[] { '#', 'a', 'a' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray13);
        java.lang.String str15 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray9);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray2, charArray9);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray2);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray20, 'a');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray2, charArray20);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray20, 7, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{4,#,a,4,#}" + "'", str15, "{4,#,a,4,#}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        java.lang.String[] strArray2 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.parallelStream();
        java.lang.String[] strArray8 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.parallelStream();
        boolean boolean12 = strList3.addAll((java.util.Collection<java.lang.String>) strList9);
        java.util.stream.Stream<java.lang.String> strStream13 = strList3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream14 = strList3.parallelStream();
        java.lang.String[] strArray17 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.stream.Stream<java.lang.String> strStream20 = strList18.parallelStream();
        java.lang.String[] strArray23 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.parallelStream();
        boolean boolean27 = strList18.addAll((java.util.Collection<java.lang.String>) strList24);
        boolean boolean28 = strList3.containsAll((java.util.Collection<java.lang.String>) strList24);
        java.util.stream.Stream<java.lang.String> strStream29 = strList3.parallelStream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        boolean[] booleanArray38 = new boolean[] { false, false, false, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray38);
        boolean[] booleanArray46 = new boolean[] { false, false, false, true, false, false };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray38, booleanArray46);
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { false, true, true };
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray52);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray53, false);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray53, false);
        boolean[] booleanArray63 = new boolean[] { true, false, true, true, true };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray63, (int) (byte) 0, 0);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray63, 4, (int) '4');
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray57, booleanArray69);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder0.append(booleanArray46, booleanArray57);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder0.append((long) 4, (long) (-1));
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray75);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.clone(charArray75);
        char[] charArray83 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray87 = new char[] { '#', 'a', 'a' };
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.addAll(charArray83, charArray87);
        char[] charArray90 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray83, ' ');
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray90);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder92 = equalsBuilder74.append(charArray77, charArray91);
        java.lang.Character[] charArray93 = org.apache.commons.lang3.ArrayUtils.toObject(charArray91);
        boolean boolean95 = org.apache.commons.lang3.ArrayUtils.contains(charArray91, '#');
        char[] charArray96 = org.apache.commons.lang3.ArrayUtils.clone(charArray91);
        char[] charArray99 = org.apache.commons.lang3.ArrayUtils.subarray(charArray96, (int) '4', 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[true, true]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[true, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(equalsBuilder92);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray99);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray99), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray99), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray99), "[]");
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 100, (byte) 100, (byte) 1, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (int) '#', 10);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { (-1), 1, 0, 10, (-1), 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        java.lang.Byte[][] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (java.lang.Object) intArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, 1);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray28);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 0, 10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, -1, 10, 0, 1, -1]");
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        long[] longArray2 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray2);
        boolean boolean7 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) longArray2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        float[] floatArray15 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, 0.0f);
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        long[] longArray21 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray21);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray19, (java.lang.Object) longArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray21);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, (long) 6);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        java.lang.Long[] longArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray27);
        java.lang.Object obj29 = null;
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray27, obj29);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray27, (long) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray32);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1]");
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        float[] floatArray5 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 1, 0);
        float[] floatArray13 = new float[] { (byte) -1, 1L };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) 10L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray10);
        float[] floatArray18 = null;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, (float) (byte) 10);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray17);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22, (float) '4');
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) 6);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) 0);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        int[] intArray4 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray9 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray14 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray19 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray24 = new int[] { '4', (short) 0, 0, 5 };
        int[][] intArray25 = new int[][] { intArray4, intArray9, intArray14, intArray19, intArray24 };
        int[] intArray30 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray35 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray40 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray45 = new int[] { '4', (short) 0, 0, 5 };
        int[] intArray50 = new int[] { '4', (short) 0, 0, 5 };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][][] intArray52 = new int[][][] { intArray25, intArray51 };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray52);
        int[] intArray59 = new int[] { 7, 0, 100, (short) -1 };
        int[] intArray64 = new int[] { 7, 0, 100, (short) -1 };
        int[] intArray69 = new int[] { 7, 0, 100, (short) -1 };
        int[] intArray74 = new int[] { 7, 0, 100, (short) -1 };
        int[] intArray79 = new int[] { 7, 0, 100, (short) -1 };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = org.apache.commons.lang3.ArrayUtils.clone(intArray80);
        int[][][] intArray82 = org.apache.commons.lang3.ArrayUtils.add(intArray52, 0, intArray80);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[52, 0, 0, 5]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[7, 0, 100, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[7, 0, 100, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[7, 0, 100, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[7, 0, 100, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[7, 0, 100, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray26, (double) 100);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) 0, (double) 0L);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) (byte) 1, 10);
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36);
        double[] doubleArray41 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray41, (double) (byte) 100, 1.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray41);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) (short) 1, (int) (short) 100);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray41);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray41);
        java.lang.Double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray41);
        java.lang.Double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray51);
        java.lang.Double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray52);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52);
        java.lang.String[] strArray57 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.util.stream.Stream<java.lang.String> strStream60 = strList58.parallelStream();
        java.lang.String[] strArray63 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.stream.Stream<java.lang.String> strStream66 = strList64.parallelStream();
        boolean boolean67 = strList58.addAll((java.util.Collection<java.lang.String>) strList64);
        java.lang.Object obj68 = null;
        boolean boolean69 = strList64.equals(obj68);
        int int70 = strList64.size();
        boolean boolean71 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray36, (java.lang.Object) doubleArray52, (java.util.Collection<java.lang.String>) strList64);
        java.lang.Double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[52.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strStream60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        float[] floatArray4 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray7 = new float[] { (byte) -1, 1L };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) 10L);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray4, floatArray7);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (float) '4');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray12);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) (short) 10);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, (float) 9);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[100.0, 10.0, -1.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0, 10.0]");
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder31.append((double) 0.0f, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append((long) 4, (long) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder34.append('4', 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder40.append(false, false);
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray44, byteArray49);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray44, (byte) -1);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray44, (byte) -1);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.clone(byteArray54);
        java.lang.Byte[] byteArray62 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray62, (byte) 1);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains(byteArray64, (byte) 100);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(byteArray64, (byte) 1);
        java.lang.Byte[] byteArray75 = new java.lang.Byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        byte[] byteArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray75, (byte) 1);
        byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray77, (int) (byte) 0, (int) (byte) 1);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray64, byteArray80);
        byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray64, (byte) 10);
        byte[] byteArray85 = org.apache.commons.lang3.ArrayUtils.add(byteArray64, (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder43.append(byteArray55, byteArray64);
        java.lang.Boolean boolean87 = equalsBuilder43.build();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0, 10]");
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertEquals("'" + boolean87 + "' != '" + false + "'", boolean87, false);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        float[] floatArray17 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray20 = new float[] { (byte) -1, 1L };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 10L);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray11, (java.lang.Object) boolean23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray11);
        double[] doubleArray32 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (byte) 100, 1.0d);
        double[] doubleArray40 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray32, doubleArray40);
        float[] floatArray46 = new float[] { 100, (byte) 10, (-1L), 'a' };
        float[] floatArray49 = new float[] { (byte) -1, 1L };
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) 10L);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray46, floatArray49);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray40, (java.lang.Object) boolean52);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray28, doubleArray40);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray40, (double) (byte) 0, (double) 2);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.add(doubleArray40, (double) (byte) 100);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.add(doubleArray60, (double) 1.0f);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 10.0, -1.0, 97.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 0.0, 10.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        long[] longArray4 = new long[] { (short) 10, (byte) -1, (-1), 1 };
        java.lang.Long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        java.lang.Long[] longArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray5);
        java.lang.Long[] longArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray7);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        float[] floatArray8 = new float[] { (-1), (byte) 100, 100.0f, 10, '#' };
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray8);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray8);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray8, (int) (byte) 1, 0);
        float[] floatArray16 = new float[] { (byte) -1, 1L };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray16, (float) 10L);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray13, floatArray16);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray16);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.clone(floatArray16);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray2, (java.lang.Object) floatArray21);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.add(longArray2, (long) (short) 100);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray24, (long) 9, 11);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0, 100.0, 100.0, 10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        double[] doubleArray3 = new double[] { (-1.0f), 10.0d, '4' };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 100, 1.0d);
        double[] doubleArray11 = new double[] { (byte) 1, (byte) 0, 10, (-1.0f) };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray3);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1, (double) 9);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0, 52.0, 1.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        char[] charArray6 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray10 = new char[] { '#', 'a', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray19 = new char[] { '4', '#', 'a', '4', '#' };
        char[] charArray23 = new char[] { '#', 'a', 'a' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder0.append((java.lang.Object) ' ', (java.lang.Object) charArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder0.append((int) (short) 1, 10);
        java.lang.Boolean boolean32 = equalsBuilder31.build();
        boolean boolean33 = equalsBuilder31.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder31.append(true, true);
        long[] longArray38 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(longArray38, 0L);
        long[] longArray43 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray43);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray45, (long) 5, 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder31.append(longArray38, longArray45);
        long[] longArray51 = new long[] { (short) -1 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(longArray51, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray51);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray61 = new long[] { ' ', 1, (short) -1, 0 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray61, 1L);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray56, longArray63);
        long[] longArray71 = new long[] { 10, 1L, (byte) -1, (byte) 1, (short) -1, (short) 100 };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.subarray(longArray71, 3, (int) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray71);
        java.lang.Long[] longArray76 = org.apache.commons.lang3.ArrayUtils.toObject(longArray71);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder49.append(longArray63, longArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder49.appendSuper(true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder49.append((short) 0, (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder83.append(false, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder83.append((short) 1, (short) 10);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, a, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#a4##aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, a, 4, #, #, a, a]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[100, -1, 1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(equalsBuilder83);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertNotNull(equalsBuilder89);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 100);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray12);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray14);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.clone(byteArray14);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        float[] floatArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) 0, (int) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray8 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray11 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[] intArray17 = new java.lang.Integer[] { 10, 1 };
        java.lang.Integer[][] intArray18 = new java.lang.Integer[][] { intArray2, intArray5, intArray8, intArray11, intArray14, intArray17 };
        java.lang.String[] strArray21 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.parallelStream();
        java.lang.String[] strArray27 = new java.lang.String[] { "4", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.parallelStream();
        boolean boolean31 = strList22.addAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.Object obj32 = null;
        boolean boolean33 = strList28.equals(obj32);
        int int34 = strList28.size();
        java.lang.Integer[][] intArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray18, (java.lang.Object) strList28);
        java.util.Iterator<java.lang.String> strItor36 = strList28.iterator();
        int int37 = strList28.size();
        java.util.Iterator<java.lang.String> strItor38 = strList28.iterator();
        java.util.stream.Stream<java.lang.String> strStream39 = strList28.parallelStream();
        java.util.AbstractCollection[][][][] abstractCollectionArray41 = new java.util.AbstractCollection[0][][][];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[][][][] strCollectionArray42 = (java.util.AbstractCollection<java.lang.String>[][][][]) abstractCollectionArray41;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<java.lang.String>[][][][] strCollectionArray43 = strList28.toArray(strCollectionArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertNotNull(abstractCollectionArray41);
        org.junit.Assert.assertNotNull(strCollectionArray42);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        java.lang.Character[][][][][][][][] charArray0 = new java.lang.Character[][][][][][][][] {};
        java.lang.Character[][][][][][][] charArray1 = new java.lang.Character[][][][][][][] {};
        java.lang.Character[][][][][][][][] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, charArray1);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
    }
}


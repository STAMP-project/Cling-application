import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        java.io.IOException iOException4 = new java.io.IOException();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("OR hi!\n    OR hi!\n", (java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("{640911743}", (java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("{1396813159}", (java.lang.Throwable) iOException10);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((-2147483648));
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getTypedefType();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.isTrue();
        com.google.javascript.rhino.Node node11 = node2.cloneNode();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isIf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node17.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node2.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node49 = node17.getParent();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        java.lang.String str53 = node52.getQualifiedName();
        java.lang.String str54 = node49.checkTreeEquals(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isNE();
        boolean boolean59 = node57.isInstanceOf();
        boolean boolean60 = node57.isThrow();
        node57.setCharno(54);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node68.isNot();
        int int72 = node68.getLineno();
        boolean boolean73 = node68.isAdd();
        com.google.javascript.rhino.Node node74 = node68.cloneTree();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node80.isNot();
        int int84 = node80.getLineno();
        boolean boolean85 = node80.isAdd();
        boolean boolean86 = node74.hasChild(node80);
        boolean boolean87 = node80.isDefaultCase();
        int int88 = node80.getSourcePosition();
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean92 = node91.isTypeOf();
        boolean boolean93 = node91.isRegExp();
        com.google.javascript.rhino.Node node94 = node80.copyInformationFromForTree(node91);
        boolean boolean95 = node91.isWhile();
        node57.addChildrenToFront(node91);
        boolean boolean97 = node91.isLocalResultCall();
        com.google.javascript.rhino.Node node98 = node52.clonePropsFrom(node91);
        boolean boolean99 = node98.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nASSIGN_MOD INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: ASSIGN_MOD INSTANCEOF\n" + "'", str54, "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nASSIGN_MOD INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: ASSIGN_MOD INSTANCEOF\n");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor13 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor15 = nodeIterableList0.iterator();
        java.lang.Class<?> wildcardClass16 = nodeIterableList0.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration> genericDeclarationList17 = com.google.common.collect.ImmutableList.of((java.lang.reflect.GenericDeclaration) wildcardClass16);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor13);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
        org.junit.Assert.assertNotNull(nodeIterableItor15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(genericDeclarationList17);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.String str12 = node11.toStringTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        boolean boolean17 = node15.isDelProp();
        boolean boolean18 = node15.hasChildren();
        boolean boolean19 = node15.isOr();
        boolean boolean20 = node15.isAnd();
        com.google.javascript.rhino.Node node21 = node11.srcref(node15);
        boolean boolean22 = node21.isTry();
        boolean boolean23 = node21.isStringKey();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("hi!");
        int int26 = node25.getType();
        boolean boolean27 = node25.isGetElem();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isNE();
        boolean boolean32 = node30.isInstanceOf();
        boolean boolean33 = node30.isThrow();
        node30.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node30.getAncestors();
        java.util.Set<java.lang.String> strSet37 = node30.getDirectives();
        boolean boolean38 = node30.isNumber();
        boolean boolean39 = node30.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildAfter(node25, node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR hi!\n" + "'", str12, "OR hi!\n");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor10 = strSet9.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        boolean boolean25 = objectType24.matchesInt32Context();
        boolean boolean26 = objectType24.isStringValueType();
        boolean boolean27 = objectType24.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair34 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType24, (com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry12.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType24);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = objectType41.toObjectType();
        boolean boolean43 = objectType42.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope44 = objectType42.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType24.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType42);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = objectType42.toObjectType();
        boolean boolean47 = strSet9.equals((java.lang.Object) objectType42);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isScript();
        boolean boolean23 = node5.isExprResult();
        boolean boolean24 = node5.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = nodeIterableList2.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor60 = nodeIterableList59.listIterator();
        boolean boolean61 = nodeIterableItor60.hasPrevious();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(nodeIterableItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        node5.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo25.getThisType();
        boolean boolean32 = jSDocInfo25.isExport();
        java.lang.String str34 = jSDocInfo25.getDescriptionForParameter("{439901092}");
        boolean boolean35 = jSDocInfo25.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean62 = jSDocInfoBuilder1.recordBlockDescription("None");
        boolean boolean63 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        boolean boolean2 = node1.isDec();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        com.google.common.collect.ImmutableList<java.lang.Object[][]> objArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(objArrayList0);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordParameter("OR hi! [directives: []]\n", jSTypeExpression9);
        jSDocInfoBuilder1.markName("None", 39, 46);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.addAuthor("");
        boolean boolean19 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder16.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder24.addAuthor("");
        boolean boolean27 = jSDocInfoBuilder24.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = null;
        boolean boolean29 = jSDocInfoBuilder24.recordThrowType(jSTypeExpression28);
        boolean boolean30 = jSDocInfoBuilder24.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.addAuthor("");
        boolean boolean35 = jSDocInfoBuilder32.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder32.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        jSDocInfoBuilder32.markName("", staticSourceFile40, 29, 50);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node46.isDebugger();
        boolean boolean53 = node46.isSyntheticBlock();
        boolean boolean54 = node46.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node46, "Unknown class name");
        boolean boolean58 = jSDocInfoBuilder32.recordThrowDescription(jSTypeExpression56, "?");
        boolean boolean59 = jSDocInfoBuilder24.recordExtendedInterface(jSTypeExpression56);
        boolean boolean60 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression56);
        boolean boolean61 = jSDocInfoBuilder1.recordThisType(jSTypeExpression56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = null;
        boolean boolean68 = jSDocInfoBuilder63.recordThrowType(jSTypeExpression67);
        boolean boolean69 = jSDocInfoBuilder63.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder63.markName("", staticSourceFile71, 29, 50);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node77.isDebugger();
        boolean boolean84 = node77.isSyntheticBlock();
        boolean boolean85 = node77.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = new com.google.javascript.rhino.JSTypeExpression(node77, "Unknown class name");
        boolean boolean89 = jSDocInfoBuilder63.recordThrowDescription(jSTypeExpression87, "?");
        boolean boolean90 = jSTypeExpression87.isVarArgs();
        boolean boolean91 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression87);
        boolean boolean92 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        com.google.javascript.rhino.jstype.JSType jSType44 = objectType40.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair45 = objectType6.getTypesUnderInequality(jSType44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSType44.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType47 = objectType46.dereference();
        boolean boolean48 = objectType47.hasAnyTemplate();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNotNull(typePair45);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        node12.setLength((int) ' ');
        jSDocInfo0.setAssociatedNode(node12);
        boolean boolean16 = node12.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        boolean boolean10 = objectType6.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry12.createAnonymousObjectType();
        objectType20.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType23 = objectType20.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean24 = objectType20.isNoResolvedType();
        boolean boolean25 = objectType6.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.JSType jSType27 = objectType6.findPropertyType("Named type with empty name component");
        boolean boolean28 = objectType6.isAllType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = objectType6.getJSDocInfo();
        boolean boolean30 = objectType6.matchesInt32Context();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = objectType6.getPossibleToBooleanOutcomes();
        boolean boolean32 = objectType6.isDateType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) '4');
        node5.addChildrenToBack(node13);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node5.getJsDocBuilderForNode();
        fileLevelJsDocBuilder15.append("function (None, {...}, {...}, ...[{...}]): None");
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder15);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType10 = jSTypeRegistry1.getType("{1923315740}");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        boolean boolean13 = jSTypeRegistry12.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry12.getTypesWithProperty("");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry17.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType30, "");
        com.google.javascript.rhino.jstype.UnionType unionType33 = objectType30.toMaybeUnionType();
        boolean boolean34 = objectType30.matchesObjectContext();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        boolean boolean42 = jSTypeRegistry37.canPropertyBeDefined(jSType40, "Unknown class name");
        jSTypeRegistry37.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        boolean boolean51 = jSTypeRegistry46.canPropertyBeDefined(jSType49, "Unknown class name");
        jSTypeRegistry46.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable55 = jSTypeRegistry46.getTypesWithProperty("hi!");
        jSTypeRegistry46.resetForTypeCheck();
        jSTypeRegistry46.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        boolean boolean65 = jSTypeRegistry60.canPropertyBeDefined(jSType63, "Unknown class name");
        jSTypeRegistry60.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode70 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry69.setResolveMode(resolveMode70);
        com.google.javascript.rhino.jstype.ObjectType objectType72 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType73 = jSTypeRegistry69.createObjectType(objectType72);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = objectType73.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] { objectType73 };
        com.google.javascript.rhino.Node node76 = jSTypeRegistry60.createParametersWithVarArgs(jSTypeArray75);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry46.createUnionType(jSTypeArray75);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry37.createOptionalParameters(jSTypeArray75);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType30, false, jSTypeArray75);
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = objectType85.toObjectType();
        boolean boolean87 = objectType86.matchesInt32Context();
        boolean boolean88 = objectType86.isStringValueType();
        boolean boolean89 = objectType86.canBeCalled();
        boolean boolean90 = objectType86.isAllType();
        boolean boolean91 = objectType86.matchesInt32Context();
        com.google.javascript.rhino.jstype.FunctionType functionType92 = jSTypeRegistry1.createFunctionTypeWithNewThisType(functionType79, objectType86);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot94 = functionType79.getOwnSlot("{1693950811}");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertNull(unionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable55);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + resolveMode70 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode70.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(functionType92);
        org.junit.Assert.assertNull(jSTypeStaticSlot94);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean18 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder16.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean21 = jSDocInfoBuilder16.recordVisibility(visibility20);
        boolean boolean22 = jSDocInfoBuilder16.recordExpose();
        boolean boolean24 = jSDocInfoBuilder16.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.siblings();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet37);
        node28.putBooleanProp(0, false);
        node28.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean45 = node28.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node28.getStaticSourceFile();
        boolean boolean47 = staticSourceFile46.isExtern();
        int int49 = staticSourceFile46.getLineOffset(16);
        jSDocInfoBuilder16.markName("OR hi! [directives: []]\n", staticSourceFile46, 8, 41);
        boolean boolean53 = staticSourceFile46.isExtern();
        int int55 = staticSourceFile46.getColumnOfOffset(4095);
        jSDocInfoBuilder1.markName("{1517329911}", staticSourceFile46, 36, (int) (short) 1);
        boolean boolean59 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("REGEXP Unknown class name 100\n", (int) ' ', (int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2147483648) + "'", int49 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry21.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        jSTypeRegistry32.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = objectType39.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot42 = objectType39.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType39);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType50 = objectType49.toMaybeEnumElementType();
        boolean boolean51 = jSTypeRegistry21.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType39, objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = objectType57.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = objectType64.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode68 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry67.setResolveMode(resolveMode68);
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        boolean boolean72 = jSTypeRegistry67.canPropertyBeDefined(jSType70, "Unknown class name");
        jSTypeRegistry67.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry76.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry67.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType80, "");
        boolean boolean83 = jSType82.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = objectType65.testForEquality(jSType82);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSType82.collapseUnion();
        boolean boolean86 = objectType58.differsFrom(jSType82);
        boolean boolean87 = jSType82.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType88 = jSTypeRegistry21.createOptionalType(jSType82);
        node17.putProp((int) (byte) -1, (java.lang.Object) jSTypeRegistry21);
        node17.setType(30);
        int int92 = node17.getChildCount();
        node17.setSourceFileForTesting("{439901092}");
        boolean boolean95 = node17.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNull(jSTypeStaticSlot42);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNull(enumElementType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + resolveMode68 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode68.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = node39.cloneNode();
        boolean boolean41 = node40.isAssignAdd();
        int int42 = node3.getIndexOfChild(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node40.siblings();
        typePosition0.setItem(node40);
        int int45 = typePosition0.getEndLine();
        int int46 = typePosition0.getEndLine();
        int int47 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node5.setJSType(jSType11);
        boolean boolean13 = node5.isOptionalArg();
        boolean boolean14 = node5.isOr();
        com.google.javascript.rhino.Node node15 = node5.getLastSibling();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry17.createAnonymousObjectType();
        objectType25.clearResolved();
        java.lang.String str27 = objectType25.toAnnotationString();
        boolean boolean28 = objectType25.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType29 = objectType25.autobox();
        node15.setJSType((com.google.javascript.rhino.jstype.JSType) objectType25);
        node15.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSType29);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        boolean boolean86 = nodeIterableList23.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder87 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility88 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder89 = visibilityEnumBuilder87.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility88);
        boolean boolean90 = nodeIterableList23.contains((java.lang.Object) visibilityEnumBuilder89);
        java.lang.Object[] objArray91 = nodeIterableList23.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + visibility88 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility88.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType20 = jSType16.findPropertyType("{1057987973}");
        boolean boolean21 = jSType16.isNumber();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList86 = nodeIterableList79.asList();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList79.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor88 = nodeIterableList79.listIterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor89 = nodeIterableList79.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertNotNull(nodeIterableList86);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertNotNull(nodeIterableItor88);
        org.junit.Assert.assertNotNull(nodeIterableItor89);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        int int6 = node2.getIntProp(4095);
        node2.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        boolean boolean63 = jSType62.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = objectType45.testForEquality(jSType62);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType62.collapseUnion();
        boolean boolean66 = objectType38.differsFrom(jSType62);
        boolean boolean67 = jSType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry1.createOptionalType(jSType62);
        boolean boolean70 = jSTypeRegistry1.isForwardDeclaredType("Not declared as a constructor");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray73 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList74 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList74, jSTypeArray73);
        com.google.javascript.rhino.Node node76 = jSTypeRegistry72.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList74);
        boolean boolean79 = jSTypeRegistry1.isForwardDeclaredType("{1057987973}");
        jSTypeRegistry1.clearTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        int int3 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean34 = jSType33.isBooleanValueType();
        boolean boolean35 = jSType33.isNoObjectType();
        boolean boolean36 = jSType33.hasDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        boolean boolean57 = jSTypeRegistry52.canPropertyBeDefined(jSType55, "Unknown class name");
        jSTypeRegistry52.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry52.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType65, "");
        boolean boolean68 = jSType67.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = objectType50.testForEquality(jSType67);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType67.collapseUnion();
        boolean boolean71 = objectType43.differsFrom(jSType67);
        boolean boolean72 = jSType67.matchesStringContext();
        boolean boolean73 = jSType67.matchesStringContext();
        java.lang.String str74 = jSType67.toAnnotationString();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope76 = null;
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType67.resolve(errorReporter75, jSTypeStaticScope76);
        boolean boolean78 = jSType33.differsFrom(jSType77);
        boolean boolean79 = jSType77.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "?" + "'", str74, "?");
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = objectType14.isBooleanObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags7.setMutatesArguments();
        sideEffectFlags7.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags11.setAllFlags();
        sideEffectFlags11.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags15.setAllFlags();
        sideEffectFlags15.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags(4095);
        sideEffectFlags19.setMutatesThis();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray31 = nodeIterableList21.toArray(typePositionArray30);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor32 = nodeIterableList21.iterator();
        java.lang.Object[] objArray33 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList44 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean45 = nodeIterableList44.add(nodeIterable43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node48.siblings();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet57);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList60 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray61 = nodeIterableList60.toArray();
        boolean boolean62 = strSet57.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList60);
        java.lang.Object[] objArray63 = nodeIterableList60.toArray();
        boolean boolean64 = nodeIterableList60.isEmpty();
        boolean boolean65 = nodeIterableList44.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList60);
        boolean boolean66 = nodeIterableList34.equals((java.lang.Object) nodeIterableList44);
        boolean boolean67 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList44);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        boolean boolean69 = nodeIterableList68.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator70 = nodeIterableList68.spliterator();
        boolean boolean71 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray73 = nodeIterableList72.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = nodeIterableList72.reverse();
        boolean boolean75 = nodeIterableList72.isEmpty();
        boolean boolean76 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags77 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags77.setMutatesArguments();
        sideEffectFlags77.setReturnsTainted();
        int int80 = nodeIterableList72.lastIndexOf((java.lang.Object) sideEffectFlags77);
        sideEffectFlags77.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags83 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags83.setAllFlags();
        sideEffectFlags83.setThrows();
        sideEffectFlags83.setAllFlags();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList87 = com.google.common.collect.ImmutableList.of(sideEffectFlags0, sideEffectFlags6, sideEffectFlags7, sideEffectFlags11, sideEffectFlags15, sideEffectFlags19, sideEffectFlags77, sideEffectFlags83);
        sideEffectFlags83.clearAllFlags();
        boolean boolean89 = sideEffectFlags83.areAllFlagsSet();
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(typePositionArray31);
        org.junit.Assert.assertNotNull(nodeIterableItor32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableList60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(sideEffectFlagsList87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.identifyNonNullableName("OR hi!");
        jSTypeRegistry1.incrementGeneration();
        boolean boolean6 = jSTypeRegistry1.isForwardDeclaredType("Named type with empty name component");
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry1.createAnonymousObjectType();
        jSTypeRegistry1.identifyNonNullableName("java.io.IOException");
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry11.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType24, "");
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        boolean boolean33 = jSType26.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType32);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = objectType48.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] { objectType48 };
        com.google.javascript.rhino.Node node51 = jSTypeRegistry35.createParametersWithVarArgs(jSTypeArray50);
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry1.createFunctionType(jSType26, jSTypeArray50);
        jSTypeRegistry1.forwardDeclareType("{776423123}");
        java.util.List<java.lang.String> strList55 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSTypeRegistry1.setTemplateTypeNames(strList55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(functionType52);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        jSTypeRegistry28.clearTemplateTypeNames();
        jSTypeRegistry28.setLastGeneration(false);
        jSTypeRegistry28.identifyNonNullableName("OR hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        boolean boolean42 = jSTypeRegistry37.canPropertyBeDefined(jSType40, "Unknown class name");
        jSTypeRegistry37.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry46.createObjectType(objectType49);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry37.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType50, "");
        boolean boolean53 = objectType50.isEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = objectType59.toObjectType();
        boolean boolean61 = objectType50.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType60);
        boolean boolean62 = objectType60.matchesNumberContext();
        boolean boolean63 = objectType60.matchesUint32Context();
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry28.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType60, "Named type with empty name component", "Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! [input_id: InputId: InputId: ]\n    OR hi!\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! [input_id: InputId: InputId: ]\n    OR hi!\n", 16, (int) (byte) 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean70 = jSDocInfo69.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        boolean boolean72 = jSDocInfo69.isImplicitCast();
        boolean boolean73 = jSDocInfo69.isExport();
        java.lang.String str74 = jSDocInfo69.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo69.getType();
        java.lang.String str76 = jSDocInfo69.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = jSDocInfo69.getTemplateTypeNames();
        jSTypeRegistry28.setTemplateTypeNames((java.util.List<java.lang.String>) strList77);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "JSDocInfo" + "'", str74, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo6.hasEnumParameterType();
        boolean boolean14 = jSDocInfo6.isDefine();
        java.lang.String str15 = jSDocInfo6.getLendsName();
        boolean boolean16 = jSDocInfo6.hasModifies();
        boolean boolean17 = jSDocInfo6.isNoSideEffects();
        boolean boolean18 = strSet3.equals((java.lang.Object) boolean17);
        boolean boolean20 = strSet3.add("{637073315}");
        strSet3.clear();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        jSTypeRegistry1.identifyNonNullableName("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        boolean boolean24 = node22.isDelProp();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node26 = node22.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        boolean boolean33 = jSTypeRegistry28.canPropertyBeDefined(jSType31, "Unknown class name");
        jSTypeRegistry28.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry28.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType41, "");
        boolean boolean44 = jSType43.canBeCalled();
        com.google.javascript.rhino.jstype.EnumType enumType45 = jSTypeRegistry1.createEnumType("java.io.IOException: OR hi!\n    OR hi!\n", node22, jSType43);
        boolean boolean46 = node22.isFalse();
        boolean boolean47 = node22.isComma();
        boolean boolean48 = node22.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean5 = strSet3.contains((java.lang.Object) (-1.0d));
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet3.spliterator();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("INSTANCEOF", 50, 46);
        boolean boolean11 = node10.isObjectLit();
        java.lang.String str15 = node10.toString(true, false, false);
        boolean boolean16 = strSet3.contains((java.lang.Object) true);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean23 = jSDocInfoBuilder18.recordExpose();
        boolean boolean24 = jSDocInfoBuilder18.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean29 = jSDocInfoBuilder26.recordDescription("hi!");
        boolean boolean30 = jSDocInfoBuilder26.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression31);
        boolean boolean33 = jSDocInfoBuilder26.recordConstancy();
        boolean boolean34 = jSDocInfoBuilder26.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordInterface();
        boolean boolean38 = jSDocInfoBuilder36.isInterfaceRecorded();
        boolean boolean39 = jSDocInfoBuilder36.recordImplicitCast();
        boolean boolean41 = jSDocInfoBuilder36.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder36.recordThrowType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder36.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder46.recordDefineType(jSTypeExpression47);
        jSDocInfoBuilder46.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node55.siblings();
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        boolean boolean73 = strSet64.remove((java.lang.Object) jSDocInfoBuilder68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder68.recordTypedef(jSTypeExpression74);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        boolean boolean81 = jSDocInfoBuilder77.recordHiddenness();
        boolean boolean82 = jSDocInfoBuilder77.recordExpose();
        boolean boolean83 = jSDocInfoBuilder77.recordConstructor();
        boolean boolean85 = jSDocInfoBuilder77.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder87 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean88 = jSDocInfoBuilder87.recordInterface();
        boolean boolean90 = jSDocInfoBuilder87.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = null;
        boolean boolean92 = jSDocInfoBuilder87.recordDefineType(jSTypeExpression91);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = null;
        boolean boolean94 = jSDocInfoBuilder87.recordThisType(jSTypeExpression93);
        boolean boolean95 = jSDocInfoBuilder87.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList96 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder18, jSDocInfoBuilder26, jSDocInfoBuilder36, jSDocInfoBuilder46, jSDocInfoBuilder68, jSDocInfoBuilder77, jSDocInfoBuilder87);
        boolean boolean97 = strSet3.equals((java.lang.Object) jSDocInfoBuilder18);
        boolean boolean98 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean99 = jSDocInfoBuilder18.recordExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING INSTANCEOF 50" + "'", str15, "STRING INSTANCEOF 50");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        jSDocInfo0.setLicense("{1559619413}");
        boolean boolean10 = jSDocInfo0.isExport();
        boolean boolean11 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordDescription("{}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordInterface();
        boolean boolean10 = jSDocInfoBuilder7.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder7.recordDefineType(jSTypeExpression11);
        boolean boolean14 = jSDocInfoBuilder7.recordMeaning("hi!");
        boolean boolean16 = jSDocInfoBuilder7.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean38 = jSDocInfoBuilder37.recordInterface();
        boolean boolean40 = jSDocInfoBuilder37.recordDescription("hi!");
        boolean boolean41 = jSDocInfoBuilder37.recordHiddenness();
        boolean boolean42 = strSet33.remove((java.lang.Object) jSDocInfoBuilder37);
        boolean boolean43 = jSDocInfoBuilder37.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.addAuthor("");
        boolean boolean48 = jSDocInfoBuilder45.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder45.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        jSDocInfoBuilder45.markName("", staticSourceFile53, 29, 50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node59.isDebugger();
        boolean boolean66 = node59.isSyntheticBlock();
        boolean boolean67 = node59.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = new com.google.javascript.rhino.JSTypeExpression(node59, "Unknown class name");
        boolean boolean71 = jSDocInfoBuilder45.recordThrowDescription(jSTypeExpression69, "?");
        boolean boolean72 = jSDocInfoBuilder37.recordThrowType(jSTypeExpression69);
        boolean boolean73 = jSDocInfoBuilder18.recordEnumParameterType(jSTypeExpression69);
        boolean boolean74 = jSDocInfoBuilder7.recordImplementedInterface(jSTypeExpression69);
        boolean boolean75 = jSDocInfoBuilder1.recordThisType(jSTypeExpression69);
        boolean boolean76 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        java.lang.Object[] objArray14 = nodeIterableList0.toArray();
        java.lang.Object[] objArray15 = nodeIterableList0.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor16 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        node19.putBooleanProp(0, false);
        node19.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean36 = node19.isThrow();
        boolean boolean37 = node19.isDebugger();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node19.siblings();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor16.add(nodeIterable38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry24.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType37, "");
        boolean boolean40 = jSType39.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType39.collapseUnion();
        boolean boolean43 = objectType15.differsFrom(jSType39);
        boolean boolean44 = jSType39.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType6.getGreatestSubtype(jSType39);
        boolean boolean46 = objectType6.isStringObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        boolean boolean18 = strSet11.contains((java.lang.Object) nodeIterableList17);
        strSet11.clear();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition23, typePosition24, typePosition25, typePosition26, typePosition27, typePosition28 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = nodeIterableList20.toArray(typePositionArray29);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = nodeIterableList31.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray40 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition34, typePosition35, typePosition36, typePosition37, typePosition38, typePosition39 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = nodeIterableList31.toArray(typePositionArray40);
        boolean boolean42 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList31);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray44 = nodeIterableList43.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList43.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray52 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition46, typePosition47, typePosition48, typePosition49, typePosition50, typePosition51 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray53 = nodeIterableList43.toArray(typePositionArray52);
        boolean boolean54 = nodeIterableList20.equals((java.lang.Object) nodeIterableList43);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor55 = nodeIterableList43.iterator();
        boolean boolean56 = nodeIterableList43.isEmpty();
        boolean boolean57 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList43);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList43.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(typePositionArray40);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(typePositionArray52);
        org.junit.Assert.assertNotNull(typePositionArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        int int2 = jSDocInfo0.getParameterCount();
        java.lang.String str3 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = nodeIterableList4.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray13 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition7, typePosition8, typePosition9, typePosition10, typePosition11, typePosition12 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray14 = nodeIterableList4.toArray(typePositionArray13);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray16 = nodeIterableList15.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = nodeIterableList15.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray24 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition18, typePosition19, typePosition20, typePosition21, typePosition22, typePosition23 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray25 = nodeIterableList15.toArray(typePositionArray24);
        boolean boolean26 = nodeIterableList4.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList15);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray28 = nodeIterableList27.toArray();
        java.lang.Object[] objArray29 = nodeIterableList27.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray31 = nodeIterableList30.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = nodeIterableList30.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray37 = nodeIterableList36.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = nodeIterableList36.reverse();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        java.lang.Object[] objArray48 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList38, 52, node45 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = nodeIterableList52.reverse();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList54, 52, node61 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray69 = nodeIterableList68.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = nodeIterableList68.reverse();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        java.lang.Object[] objArray80 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList70, 52, node77 };
        java.lang.Object[][] objArray81 = new java.lang.Object[][] { objArray48, objArray64, objArray80 };
        java.lang.Object[][] objArray82 = nodeIterableList32.toArray(objArray81);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList83 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray84 = nodeIterableList83.toArray();
        int int86 = nodeIterableList83.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray87 = nodeIterableList83.toArray();
        boolean boolean88 = nodeIterableList32.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList83);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList89 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList4, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList27, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList83);
        boolean boolean90 = nodeIterableList27.isEmpty();
        int int92 = nodeIterableList27.indexOf((java.lang.Object) 12);
        boolean boolean93 = strSet3.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor95 = nodeIterableList27.listIterator(200716);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (200716) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(typePositionArray13);
        org.junit.Assert.assertNotNull(typePositionArray14);
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertNotNull(typePositionArray24);
        org.junit.Assert.assertNotNull(typePositionArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(nodeIterableList83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        com.google.javascript.rhino.Node node23 = node5.getAncestor((int) (short) 1);
        boolean boolean24 = node23.isNull();
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException29);
        node23.putProp(0, (java.lang.Object) iOException29);
        boolean boolean33 = node23.isNoSideEffectsCall();
        boolean boolean34 = node23.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean31 = nodeIterableList30.add(nodeIterable29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        boolean boolean48 = strSet43.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        java.lang.Object[] objArray49 = nodeIterableList46.toArray();
        boolean boolean50 = nodeIterableList46.isEmpty();
        boolean boolean51 = nodeIterableList30.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        boolean boolean52 = strSet11.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList30);
        java.lang.Object[] objArray53 = strSet11.toArray();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node59.isNot();
        int int63 = node59.getLineno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        boolean boolean72 = node69.isNot();
        int int73 = node69.getLineno();
        com.google.javascript.rhino.Node node74 = node59.srcref(node69);
        boolean boolean75 = node74.isDelProp();
        com.google.javascript.rhino.Node node76 = node74.getLastSibling();
        boolean boolean77 = node76.isSetterDef();
        com.google.javascript.rhino.Node node78 = node76.removeChildren();
        boolean boolean79 = strSet11.contains((java.lang.Object) node76);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = node76.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(staticSourceFile80);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        boolean boolean63 = jSType62.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = objectType45.testForEquality(jSType62);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType62.collapseUnion();
        boolean boolean66 = objectType38.differsFrom(jSType62);
        boolean boolean67 = jSType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry1.createOptionalType(jSType62);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node73.isDebugger();
        boolean boolean80 = node73.isAssign();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(51, node73, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node84 = node83.getLastChild();
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode87 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry86.setResolveMode(resolveMode87);
        com.google.javascript.rhino.jstype.ObjectType objectType89 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType90 = jSTypeRegistry86.createObjectType(objectType89);
        com.google.javascript.rhino.jstype.ObjectType objectType91 = objectType90.toObjectType();
        boolean boolean92 = objectType91.matchesInt32Context();
        boolean boolean93 = objectType91.isStringValueType();
        boolean boolean94 = objectType91.canBeCalled();
        boolean boolean95 = objectType91.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType96 = objectType91.getTypeOfThis();
        boolean boolean97 = objectType91.isNoResolvedType();
        com.google.javascript.rhino.jstype.EnumType enumType98 = jSTypeRegistry1.createEnumType("{...}", node84, (com.google.javascript.rhino.jstype.JSType) objectType91);
        boolean boolean99 = enumType98.isString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + resolveMode87 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode87.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(enumType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        com.google.javascript.rhino.jstype.StaticSourceFile[] staticSourceFileArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.StaticSourceFile> staticSourceFileList1 = com.google.common.collect.ImmutableList.copyOf(staticSourceFileArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node11 = node2.getLastChild();
        boolean boolean12 = node2.isCall();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        node15.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node24 = node15.getLastChild();
        boolean boolean25 = node15.isCall();
        com.google.javascript.rhino.Node node26 = node2.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node29.isDebugger();
        boolean boolean36 = node29.isVoid();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isTypeOf();
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node39);
        node26.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("{599635391}");
        boolean boolean45 = node44.isRegExp();
        boolean boolean46 = node26.isEquivalentToTyped(node44);
        boolean boolean47 = node26.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        jSTypeRegistry45.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry48.createObjectType(objectType51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = objectType52.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot55 = objectType52.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType52);
        boolean boolean57 = objectType52.isEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry1.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType52, "{1131164336}", "INSTANCEOF", 48, 29);
        jSTypeRegistry1.forwardDeclareType("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry66.createObjectType(objectType69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = objectType70.toObjectType();
        boolean boolean72 = objectType71.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope73 = objectType71.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType74 = objectType71.toMaybeUnionType();
        java.lang.String str75 = objectType71.toDebugHashCodeString();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection76 = jSTypeRegistry1.getDirectImplementors(objectType71);
        boolean boolean77 = objectType71.hasAnyTemplate();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNull(jSTypeStaticSlot55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope73);
        org.junit.Assert.assertNull(unionType74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{1056997980}" + "'", str75, "{1056997980}");
        org.junit.Assert.assertNotNull(functionTypeCollection76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition1.getStartLine();
        com.google.javascript.rhino.Node node16 = namePosition1.getItem();
        int int17 = namePosition1.getStartLine();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(nodeCollection11);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray4 = nodeIterableList3.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList9.reverse();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList11, 52, node18 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = nodeIterableList25.reverse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList27, 52, node34 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray42 = nodeIterableList41.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = nodeIterableList41.reverse();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList43, 52, node50 };
        java.lang.Object[][] objArray54 = new java.lang.Object[][] { objArray21, objArray37, objArray53 };
        java.lang.Object[][] objArray55 = nodeIterableList5.toArray(objArray54);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray57 = nodeIterableList56.toArray();
        int int59 = nodeIterableList56.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray60 = nodeIterableList56.toArray();
        boolean boolean61 = nodeIterableList5.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList56);
        boolean boolean63 = nodeIterableList5.equals((java.lang.Object) (short) 1);
        int int64 = nodeIterableList5.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream65 = nodeIterableList5.stream();
        boolean boolean66 = nodeIterableList5.isEmpty();
        boolean boolean67 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList0.listIterator();
        boolean boolean69 = nodeIterableItor68.hasNext();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(nodeIterableList56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isInstanceOf();
        boolean boolean6 = node3.isThrow();
        node3.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node3.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        objectType19.clearResolved();
        node3.setJSType((com.google.javascript.rhino.jstype.JSType) objectType19);
        boolean boolean22 = node3.isTrue();
        node3.setLength(40);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        node27.detachChildren();
        java.lang.String str40 = node27.toStringTree();
        java.lang.String str41 = node27.getString();
        int int42 = node27.getLength();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(49, node3, node27, 49, 39);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = node27.getChildAtIndex(43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi! [directives: []]\n" + "'", str40, "OR hi! [directives: []]\n");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        node1.setIsSyntheticBlock(true);
        java.lang.String str4 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "STRING hi! [synthetic: 1]\n" + "'", str4, "STRING hi! [synthetic: 1]\n");
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        boolean boolean25 = jSType23.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType26 = jSType23.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSType23.dereference();
        boolean boolean28 = jSType23.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, jSType23);
        boolean boolean30 = jSType23.isEnumType();
        boolean boolean31 = jSType23.isNoObjectType();
        com.google.javascript.rhino.jstype.UnionType unionType32 = jSType23.toMaybeUnionType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(unionType32);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isString();
        boolean boolean10 = node2.isSwitch();
        boolean boolean11 = node2.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(4093);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        boolean boolean64 = nodeIterableList63.isEmpty();
        boolean boolean65 = nodeIterableList63.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = nodeIterableList63.get(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (6) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        boolean boolean15 = node10.isAdd();
        com.google.javascript.rhino.Node node16 = node10.cloneTree();
        java.lang.String str17 = node16.toStringTree();
        boolean boolean18 = node16.isNE();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 1, node16);
        node2.putProp((int) '4', (java.lang.Object) node16);
        com.google.javascript.rhino.Node node21 = node2.cloneNode();
        boolean boolean22 = node2.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR hi!\n" + "'", str17, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.hasChildren();
        boolean boolean6 = node2.isStringKey();
        boolean boolean7 = node2.isVar();
        boolean boolean8 = node2.isOr();
        boolean boolean9 = node2.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean4 = node3.isOptionalArg();
        int int5 = node3.getSourceOffset();
        boolean boolean6 = node3.isCatch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        boolean boolean15 = node12.isNot();
        int int16 = node12.getLineno();
        boolean boolean17 = node12.isAdd();
        com.google.javascript.rhino.Node node18 = node12.cloneTree();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isNot();
        int int28 = node24.getLineno();
        boolean boolean29 = node24.isAdd();
        boolean boolean30 = node18.hasChild(node24);
        boolean boolean31 = node24.isDefaultCase();
        int int32 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isTypeOf();
        boolean boolean37 = node35.isRegExp();
        com.google.javascript.rhino.Node node38 = node24.copyInformationFromForTree(node35);
        boolean boolean39 = node38.isBlock();
        boolean boolean40 = node38.isLabel();
        com.google.javascript.rhino.Node node41 = node3.srcrefTree(node38);
        boolean boolean42 = node41.hasChildren();
        boolean boolean43 = node41.isNumber();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordInterface();
        boolean boolean9 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean12 = jSDocInfoBuilder7.recordVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.containsDeclaration();
        boolean boolean15 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression10);
        jSDocInfoBuilder1.markName("OR hi!\n    OR hi!\n", 51, 3);
        boolean boolean18 = jSDocInfoBuilder1.recordParameterDescription("{1559619413}", "{764597585}");
        boolean boolean20 = jSDocInfoBuilder1.addAuthor("OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean21 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node2.getJsDocBuilderForNode();
        java.lang.String str7 = node2.getString();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean12 = node11.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isNE();
        boolean boolean17 = node15.isInstanceOf();
        boolean boolean18 = node15.isThrow();
        node15.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node15.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry23.createAnonymousObjectType();
        objectType31.clearResolved();
        node15.setJSType((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.jstype.JSType jSType34 = node15.getJSType();
        boolean boolean35 = jSType34.isNominalConstructor();
        node11.setJSType(jSType34);
        boolean boolean37 = jSType34.isEmptyType();
        node2.setJSType(jSType34);
        boolean boolean39 = node2.isNot();
        int int40 = node2.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.isExterns();
        int int43 = jSDocInfo41.getParameterCount();
        boolean boolean44 = jSDocInfo41.isIdGenerator();
        boolean boolean45 = jSDocInfo41.isInterface();
        boolean boolean46 = jSDocInfo41.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo41.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = jSDocInfo41.getVisibility();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo41.getParameterNames();
        boolean boolean50 = strSet49.isEmpty();
        node2.setDirectives(strSet49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertNull(visibility48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition18 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker20.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker20.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList24 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker7, marker11, marker15, marker16, marker20);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition25 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = marker16.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker28 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = marker28.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker31 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition32 = marker31.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition33 = marker31.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition34 = marker31.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker35 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition36 = marker35.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition37 = marker35.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker38 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = marker38.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = marker38.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker38.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker42 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition43 = marker42.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition44 = marker42.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition45 = marker42.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker46 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker47 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition48 = marker47.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition49 = marker47.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition50 = marker47.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker51 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition52 = marker51.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition53 = marker51.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition54 = marker51.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList55 = com.google.common.collect.ImmutableList.of(marker31, marker35, marker38, marker42, marker46, marker47, marker51);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition56 = marker42.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = marker42.getAnnotation();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList58 = com.google.common.collect.ImmutableList.of(marker16, marker28, marker42);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition59 = marker16.getAnnotation();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(nodeSourcePosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNotNull(markerList24);
        org.junit.Assert.assertNull(nodeSourcePosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
        org.junit.Assert.assertNull(typePosition27);
        org.junit.Assert.assertNull(stringPosition29);
        org.junit.Assert.assertNull(typePosition30);
        org.junit.Assert.assertNull(nodeSourcePosition32);
        org.junit.Assert.assertNull(nodeSourcePosition33);
        org.junit.Assert.assertNull(nodeSourcePosition34);
        org.junit.Assert.assertNull(nodeSourcePosition36);
        org.junit.Assert.assertNull(nodeSourcePosition37);
        org.junit.Assert.assertNull(stringPosition39);
        org.junit.Assert.assertNull(stringPosition40);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(nodeSourcePosition43);
        org.junit.Assert.assertNull(nodeSourcePosition44);
        org.junit.Assert.assertNull(nodeSourcePosition45);
        org.junit.Assert.assertNull(nodeSourcePosition48);
        org.junit.Assert.assertNull(nodeSourcePosition49);
        org.junit.Assert.assertNull(nodeSourcePosition50);
        org.junit.Assert.assertNull(nodeSourcePosition52);
        org.junit.Assert.assertNull(nodeSourcePosition53);
        org.junit.Assert.assertNull(stringPosition54);
        org.junit.Assert.assertNotNull(markerList55);
        org.junit.Assert.assertNull(stringPosition56);
        org.junit.Assert.assertNull(stringPosition57);
        org.junit.Assert.assertNotNull(markerList58);
        org.junit.Assert.assertNull(stringPosition59);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        jSTypeRegistry1.resetForTypeCheck();
        boolean boolean13 = jSTypeRegistry1.hasNamespace("Not declared as a type name");
        boolean boolean15 = jSTypeRegistry1.isForwardDeclaredType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        boolean boolean23 = objectType22.matchesInt32Context();
        boolean boolean24 = objectType22.isStringValueType();
        boolean boolean25 = objectType22.canBeCalled();
        boolean boolean26 = objectType22.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType27 = objectType22.getTypeOfThis();
        boolean boolean28 = objectType22.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType22);
        boolean boolean30 = jSType29.isTemplateType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(47);
        java.lang.Class<?> wildcardClass2 = sideEffectFlags1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        strSet6.clear();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', 37, 0);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node17.getJSDocInfo();
        jSDocInfoBuilder1.markTypeNode(node17, 35, 29, 0, 100, false);
        node17.removeProp(45);
        node17.setVarArgs(false);
        node17.setType(42);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean11 = nodeIterableList10.add(nodeIterable9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node14.siblings();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        boolean boolean28 = strSet23.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList26);
        java.lang.Object[] objArray29 = nodeIterableList26.toArray();
        boolean boolean30 = nodeIterableList26.isEmpty();
        boolean boolean31 = nodeIterableList10.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList26);
        boolean boolean32 = nodeIterableList0.equals((java.lang.Object) nodeIterableList10);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor33 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray34 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList35 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray34);
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray36 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList37 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray36);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList38 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray36);
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray39 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList40 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray39);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition[]> stringPositionArrayList41 = com.google.common.collect.ImmutableList.of(stringPositionArray34, stringPositionArray36, stringPositionArray39);
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray42 = nodeIterableList0.toArray(stringPositionArray39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder44.addAuthor("");
        boolean boolean47 = jSDocInfoBuilder44.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder44.recordNoAlias();
        boolean boolean51 = jSDocInfoBuilder44.recordConstancy();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = nodeIterableList0.remove((java.lang.Object) boolean51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor33);
        org.junit.Assert.assertNotNull(stringPositionArray34);
        org.junit.Assert.assertNotNull(stringPositionList35);
        org.junit.Assert.assertNotNull(stringPositionArray36);
        org.junit.Assert.assertNotNull(stringPositionList37);
        org.junit.Assert.assertNotNull(stringPositionList38);
        org.junit.Assert.assertNotNull(stringPositionArray39);
        org.junit.Assert.assertNotNull(stringPositionList40);
        org.junit.Assert.assertNotNull(stringPositionArrayList41);
        org.junit.Assert.assertNotNull(stringPositionArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean18 = node17.isObjectLit();
        int int19 = nodeIterableList0.indexOf((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream20 = nodeIterableList0.stream();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator21 = nodeIterableList0.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        boolean boolean25 = nodeIterableList22.isEmpty();
        int int26 = nodeIterableList22.size();
        boolean boolean27 = nodeIterableList22.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor28 = nodeIterableList22.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = nodeIterableList0.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream20);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator21);
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor28);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isAssign();
        boolean boolean10 = node2.isInstanceOf();
        boolean boolean11 = node2.isTry();
        boolean boolean12 = node2.isDelProp();
        boolean boolean13 = node2.isDo();
        node2.setLineno(29);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        boolean boolean63 = nodeIterableList2.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator64 = nodeIterableList2.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor65 = nodeIterableList2.listIterator();
        int int66 = nodeIterableItor65.nextIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = nodeIterableItor65.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator64);
        org.junit.Assert.assertNotNull(nodeIterableItor65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node18.isDebugger();
        com.google.javascript.rhino.Node node25 = node18.getFirstChild();
        boolean boolean26 = node2.hasChild(node25);
        boolean boolean27 = node25.isAnd();
        com.google.javascript.rhino.Node node28 = node25.removeFirstChild();
        java.lang.String str29 = node25.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR hi!\n" + "'", str29, "OR hi!\n");
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean8 = jSDocInfoBuilder6.recordPreserveTry();
        boolean boolean9 = nodeIterableList0.equals((java.lang.Object) boolean8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList0.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList12 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray13 = nodeIterableList12.toArray();
        boolean boolean14 = nodeIterableList12.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder15.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder30.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo33.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo33.getVisibility();
        boolean boolean37 = jSDocInfo33.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo33.setVisibility(visibility38);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray40 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility38 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray40);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray44 = nodeIterableList12.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray40);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry46.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        int int51 = nodeIterableList12.lastIndexOf((java.lang.Object) jSTypeList48);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = nodeIterableList12.reverse();
        boolean boolean53 = nodeIterableList12.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo57.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = jSDocInfo57.getVisibility();
        boolean boolean61 = jSDocInfo57.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo57.setVisibility(visibility62);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray64 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility62 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        int int68 = nodeIterableList12.lastIndexOf((java.lang.Object) visibilityEnumBuilder65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = nodeIterableList11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(nodeIterableList12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray40);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder41);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder42);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertNotNull(visibilityEnumArray44);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(visibility60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        java.io.IOException iOException1 = new java.io.IOException("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition18);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList21 = com.google.common.collect.ImmutableList.of(namePosition20);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition26);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition28 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList29 = com.google.common.collect.ImmutableList.of(namePosition15, namePosition16, namePosition17, namePosition18, namePosition20, namePosition22, namePosition23, namePosition24, namePosition25, namePosition26, namePosition28);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition32 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition33);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition35 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList36 = com.google.common.collect.ImmutableList.of(namePosition35);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition41 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList42 = com.google.common.collect.ImmutableList.of(namePosition41);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList44 = com.google.common.collect.ImmutableList.of(namePosition30, namePosition31, namePosition32, namePosition33, namePosition35, namePosition37, namePosition38, namePosition39, namePosition40, namePosition41, namePosition43);
        int int45 = namePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition49 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList50 = com.google.common.collect.ImmutableList.of(namePosition49);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition51 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList52 = com.google.common.collect.ImmutableList.of(namePosition51);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition54 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition55 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition56 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition57 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList58 = com.google.common.collect.ImmutableList.of(namePosition57);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition59 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList60 = com.google.common.collect.ImmutableList.of(namePosition46, namePosition47, namePosition48, namePosition49, namePosition51, namePosition53, namePosition54, namePosition55, namePosition56, namePosition57, namePosition59);
        int int61 = namePosition53.getPositionOnEndLine();
        com.google.javascript.rhino.Node node62 = namePosition53.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition65 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList67 = com.google.common.collect.ImmutableList.of(namePosition66);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition68);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition70 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition71 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition72 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition73 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition74 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList75 = com.google.common.collect.ImmutableList.of(namePosition74);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition76 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList77 = com.google.common.collect.ImmutableList.of(namePosition63, namePosition64, namePosition65, namePosition66, namePosition68, namePosition70, namePosition71, namePosition72, namePosition73, namePosition74, namePosition76);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList78 = com.google.common.collect.ImmutableList.of(namePosition7, namePosition18, namePosition33, namePosition53, namePosition74);
        int int79 = namePosition33.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertNotNull(namePositionList21);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList29);
        org.junit.Assert.assertNotNull(namePositionList34);
        org.junit.Assert.assertNotNull(namePositionList36);
        org.junit.Assert.assertNotNull(namePositionList42);
        org.junit.Assert.assertNotNull(namePositionList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(namePositionList50);
        org.junit.Assert.assertNotNull(namePositionList52);
        org.junit.Assert.assertNotNull(namePositionList58);
        org.junit.Assert.assertNotNull(namePositionList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(namePositionList67);
        org.junit.Assert.assertNotNull(namePositionList69);
        org.junit.Assert.assertNotNull(namePositionList75);
        org.junit.Assert.assertNotNull(namePositionList77);
        org.junit.Assert.assertNotNull(namePositionList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        boolean boolean11 = node5.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isIf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node17.useSourceInfoFromForTree(node41);
        boolean boolean48 = node5.hasChild(node41);
        node41.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node51 = node41.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node51.siblings();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node56.isDec();
        boolean boolean63 = node56.isBlock();
        boolean boolean64 = node56.isTrue();
        com.google.javascript.rhino.Node node65 = node56.cloneNode();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(38, node56, (int) (short) 100, 39);
        node56.putIntProp(49, (int) (byte) 0);
        com.google.javascript.rhino.Node node72 = node51.useSourceInfoFromForTree(node56);
        int int73 = node72.getType();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n" + "'", str2, "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n" + "'", str3, "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean4 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean5 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean7 = jSDocInfoBuilder1.recordLends("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node6 = node2.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isNE();
        boolean boolean11 = node9.isInstanceOf();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        java.lang.String str13 = node9.getString();
        java.lang.String str14 = node9.getString();
        java.lang.String str15 = node9.getString();
        boolean boolean16 = node9.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = null;
        node9.setJSDocInfo(jSDocInfo17);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        java.lang.String str9 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("{764597585}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType5.isTemplateType();
        boolean boolean8 = objectType5.isResolved();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = objectType5.getPossibleToBooleanOutcomes();
        boolean boolean10 = objectType5.matchesStringContext();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        boolean boolean36 = node29.isDo();
        boolean boolean37 = node29.isBlock();
        node29.setWasEmptyNode(true);
        node29.setString("OR hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("{764597585}", 12, 45);
        com.google.javascript.rhino.Node node46 = node29.srcrefTree(node45);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node51.isDebugger();
        boolean boolean58 = node51.isVoid();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isTypeOf();
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node61);
        boolean boolean64 = node63.isObjectLit();
        boolean boolean65 = node63.isExprResult();
        com.google.javascript.rhino.Node node66 = node48.useSourceInfoIfMissingFrom(node63);
        boolean boolean67 = node48.isBlock();
        boolean boolean68 = node48.isReturn();
        boolean boolean69 = node48.isHook();
        boolean boolean70 = node48.isIf();
        int int71 = node48.getLineno();
        com.google.javascript.rhino.Node node72 = node29.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable73 = node72.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(ancestorIterable73);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        java.lang.Object obj49 = node47.getProp((int) (byte) 0);
        int int50 = node47.getChildCount();
        node35.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node52 = node35.removeFirstChild();
        node52.setSourceEncodedPositionForTree((int) '4');
        boolean boolean55 = node52.isFalse();
        java.lang.String str59 = node52.toString(true, false, true);
        node52.putBooleanProp((-1), true);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags64 = new com.google.javascript.rhino.Node.SideEffectFlags(31);
        sideEffectFlags64.setThrows();
        sideEffectFlags64.setThrows();
        sideEffectFlags64.setThrows();
        sideEffectFlags64.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node52.setSideEffectFlags(sideEffectFlags64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR hi! 0" + "'", str59, "OR hi! 0");
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("{1078264502}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        boolean boolean10 = jSTypeRegistry5.canPropertyBeDefined(jSType8, "Unknown class name");
        jSTypeRegistry5.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry5.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        jSTypeRegistry16.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot26 = objectType23.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType33.toMaybeEnumElementType();
        boolean boolean35 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType23, objectType33);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType23, "JSDocInfo");
        jSTypeRegistry1.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry1.getType("OR hi!\n");
        jSTypeRegistry1.forwardDeclareType("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry1.createOptionalType(jSType43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNull(jSTypeStaticSlot26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType40);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("None");
        boolean boolean16 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        boolean boolean43 = jSType42.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = objectType25.testForEquality(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType42.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry11.createNullableType(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createOptionalType(jSType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry1.createAnonymousObjectType();
        jSTypeRegistry1.setLastGeneration(true);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        boolean boolean57 = objectType56.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry66.createObjectType(objectType69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = objectType70.toObjectType();
        boolean boolean72 = objectType71.matchesInt32Context();
        boolean boolean73 = objectType71.isStringValueType();
        boolean boolean74 = objectType71.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry76.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair81 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType71, (com.google.javascript.rhino.jstype.JSType) objectType80);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry59.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType71);
        com.google.javascript.rhino.jstype.FunctionType functionType83 = jSType82.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair84 = objectType56.getTypesUnderInequality(jSType82);
        boolean boolean85 = objectType56.isNumberObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType86 = objectType56.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry1.createObjectType(objectType86);
        boolean boolean88 = objectType86.isAllType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(functionType83);
        org.junit.Assert.assertNotNull(typePair84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "{proxy:{1599737624}}");
        boolean boolean3 = node2.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        boolean boolean63 = jSType62.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = objectType45.testForEquality(jSType62);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType62.collapseUnion();
        boolean boolean66 = objectType38.differsFrom(jSType62);
        boolean boolean67 = jSType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry1.createOptionalType(jSType62);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node73.isDebugger();
        boolean boolean80 = node73.isAssign();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(51, node73, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node84 = node83.getLastChild();
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode87 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry86.setResolveMode(resolveMode87);
        com.google.javascript.rhino.jstype.ObjectType objectType89 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType90 = jSTypeRegistry86.createObjectType(objectType89);
        com.google.javascript.rhino.jstype.ObjectType objectType91 = objectType90.toObjectType();
        boolean boolean92 = objectType91.matchesInt32Context();
        boolean boolean93 = objectType91.isStringValueType();
        boolean boolean94 = objectType91.canBeCalled();
        boolean boolean95 = objectType91.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType96 = objectType91.getTypeOfThis();
        boolean boolean97 = objectType91.isNoResolvedType();
        com.google.javascript.rhino.jstype.EnumType enumType98 = jSTypeRegistry1.createEnumType("{...}", node84, (com.google.javascript.rhino.jstype.JSType) objectType91);
        boolean boolean99 = enumType98.isConstructor();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + resolveMode87 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode87.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(enumType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean18 = strSet11.remove((java.lang.Object) stringPosition17);
        int int19 = stringPosition17.getEndLine();
        int int20 = stringPosition17.getPositionOnEndLine();
        int int21 = stringPosition17.getEndLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isNE();
        boolean boolean29 = node27.isInstanceOf();
        boolean boolean30 = node27.isThrow();
        node27.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node27.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry35.createAnonymousObjectType();
        objectType43.clearResolved();
        node27.setJSType((com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node48.isDebugger();
        com.google.javascript.rhino.Node node55 = node48.getFirstChild();
        boolean boolean56 = node48.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType57 = jSTypeRegistry22.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType43, node48);
        boolean boolean58 = jSTypeRegistry11.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair59 = objectType6.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.jstype.JSType jSType60 = typePair59.typeA;
        com.google.javascript.rhino.jstype.JSType jSType61 = typePair59.typeB;
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = objectType67.toObjectType();
        boolean boolean69 = objectType68.matchesInt32Context();
        com.google.javascript.rhino.jstype.JSType jSType70 = objectType68.autobox();
        com.google.javascript.rhino.jstype.JSType jSType72 = objectType68.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean73 = jSType61.isEquivalentTo(jSType72);
        boolean boolean74 = jSType61.isNumberObjectType();
        boolean boolean75 = jSType61.isNominalType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(functionType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(typePair59);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean13 = jSDocInfoBuilder1.addReference("OR hi!\n");
        boolean boolean14 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean15 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray44 = nodeIterableList43.toArray();
        boolean boolean45 = nodeIterableList43.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo52.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = jSDocInfo52.getVisibility();
        boolean boolean56 = jSDocInfo52.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo52.setVisibility(visibility57);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray59 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility57 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray59);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo64.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = jSDocInfo64.getVisibility();
        boolean boolean68 = jSDocInfo64.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo64.setVisibility(visibility69);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray71 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility69 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = visibilityEnumBuilder63.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder74 = visibilityEnumBuilder48.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray75 = nodeIterableList43.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList79 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList79, jSTypeArray78);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry77.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList79);
        int int82 = nodeIterableList43.lastIndexOf((java.lang.Object) jSTypeList79);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList79);
        jSTypeRegistry1.resetForTypeCheck();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertNull(visibility55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertNull(visibility67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray71);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder72);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder74);
        org.junit.Assert.assertNotNull(visibilityEnumArray75);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(40);
        boolean boolean2 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId4 = new com.google.javascript.rhino.InputId("");
        java.lang.String str5 = inputId4.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry7.createObjectType(objectType10);
        boolean boolean12 = objectType11.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry14.createObjectType(objectType17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = objectType18.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair20 = objectType11.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = objectType11.collapseUnion();
        boolean boolean22 = inputId4.equals((java.lang.Object) objectType11);
        node1.setInputId(inputId4);
        java.lang.String str24 = inputId4.getIdName();
        java.lang.String str25 = inputId4.getIdName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "InputId: " + "'", str5, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(typePair20);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean15 = jSDocInfoBuilder1.recordLends("JSDocInfo");
        boolean boolean16 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        node3.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node12 = node3.getLastChild();
        boolean boolean13 = node3.isCall();
        boolean boolean14 = node3.isFunction();
        boolean boolean15 = node3.isEmpty();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFrom(node28);
        node17.setSourceEncodedPositionForTree(5);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        boolean boolean42 = node37.isAdd();
        com.google.javascript.rhino.Node node43 = node37.cloneTree();
        java.lang.Object obj45 = node43.getProp((int) (byte) 0);
        node17.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(50);
        node48.setLength((int) ' ');
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isAssign();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(51, node54, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoIfMissingFromForTree(node54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(97, node3, node17, node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression1 = jSDocInfo0.getEnumParameterType();
        java.lang.String str2 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = jSDocInfo3.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo3.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo3.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo3.getBaseType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean16 = jSDocInfo10.hasDescriptionForParameter("Unknown class name");
        boolean boolean17 = jSDocInfo10.hasReturnType();
        boolean boolean19 = jSDocInfo10.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        boolean boolean23 = jSDocInfo20.isImplicitCast();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getReturnType();
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        int int28 = jSDocInfo20.getParameterCount();
        java.lang.String str29 = jSDocInfo20.getVersion();
        jSDocInfo20.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        int int33 = jSDocInfo32.getExtendedInterfacesCount();
        boolean boolean34 = jSDocInfo32.isInterface();
        boolean boolean36 = jSDocInfo32.hasParameter("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.isExterns();
        boolean boolean39 = jSDocInfo37.hasReturnType();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo37.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo41.getType();
        boolean boolean44 = jSDocInfo41.isImplicitCast();
        boolean boolean45 = jSDocInfo41.isOverride();
        boolean boolean46 = jSDocInfo41.isNoSideEffects();
        boolean boolean48 = jSDocInfo41.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet49 = jSDocInfo41.getModifies();
        java.lang.String str50 = jSDocInfo41.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isExterns();
        boolean boolean53 = jSDocInfo51.hasReturnType();
        boolean boolean54 = jSDocInfo51.isOverride();
        jSDocInfo51.setLicense("hi!");
        java.lang.String str57 = jSDocInfo51.getDeprecationReason();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo51.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.lang.String str62 = jSDocInfo59.getReturnDescription();
        boolean boolean64 = jSDocInfo59.hasParameter("Not declared as a constructor");
        java.lang.String str65 = jSDocInfo59.getMeaning();
        boolean boolean66 = jSDocInfo59.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.isExterns();
        boolean boolean69 = jSDocInfo67.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo70.getSuppressions();
        boolean boolean72 = jSDocInfo70.isNoSideEffects();
        java.lang.String str73 = jSDocInfo70.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo74.getType();
        boolean boolean77 = jSDocInfo74.isNoTypeCheck();
        boolean boolean78 = jSDocInfo74.isHidden();
        boolean boolean79 = jSDocInfo74.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo37, jSDocInfo41, jSDocInfo51, jSDocInfo59, jSDocInfo67, jSDocInfo70, jSDocInfo74);
        boolean boolean81 = jSDocInfo41.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean83 = jSDocInfo82.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo82.getType();
        boolean boolean85 = jSDocInfo82.isImplicitCast();
        boolean boolean86 = jSDocInfo82.isInterface();
        boolean boolean88 = jSDocInfo82.hasParameterType("{1078264502}");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo82.getReturnType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList90 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo3, jSDocInfo10, jSDocInfo20, jSDocInfo32, jSDocInfo41, jSDocInfo82);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = jSDocInfo10.getBaseType();
        boolean boolean92 = jSDocInfo10.isNoTypeCheck();
        org.junit.Assert.assertNull(jSTypeExpression1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertNotNull(jSDocInfoList90);
        org.junit.Assert.assertNull(jSTypeExpression91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = objectType64.toObjectType();
        boolean boolean66 = objectType65.matchesInt32Context();
        boolean boolean67 = objectType65.isStringValueType();
        boolean boolean68 = objectType65.canBeCalled();
        boolean boolean69 = objectType65.isAllType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType70 = objectType65.toMaybeEnumElementType();
        int int71 = nodeIterableList45.lastIndexOf((java.lang.Object) objectType65);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList45.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor73 = nodeIterableList45.iterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor74 = nodeIterableList45.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor76 = nodeIterableList45.listIterator(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (97) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(enumElementType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertNotNull(nodeIterableItor73);
        org.junit.Assert.assertNotNull(nodeIterableItor74);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean15 = jSDocInfoBuilder1.recordLends("JSDocInfo");
        boolean boolean17 = jSDocInfoBuilder1.recordReturnDescription("OR hi!");
        boolean boolean18 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 2);
        boolean boolean2 = node1.isGetElem();
        node1.addSuppression("{...}");
        boolean boolean5 = node1.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(40);
        boolean boolean3 = node2.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node25 = node10.srcref(node20);
        boolean boolean26 = node10.isString();
        boolean boolean27 = node10.isTry();
        boolean boolean28 = node10.isInstanceOf();
        com.google.javascript.rhino.Node node29 = node2.useSourceInfoFromForTree(node10);
        boolean boolean30 = node2.hasChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isAssign();
        node33.putBooleanProp(42, true);
        node33.setWasEmptyNode(false);
        boolean boolean46 = node33.isLabelName();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(5, node2, node33, 50, 0);
        int int51 = node2.getIntProp((int) (byte) 100);
        boolean boolean52 = node2.isFalse();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isConstant();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        java.lang.String str10 = jSDocInfo0.toString();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection11);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        node2.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node18.isNot();
        int int22 = node18.getLineno();
        boolean boolean23 = node18.isAdd();
        com.google.javascript.rhino.Node node24 = node18.cloneTree();
        java.lang.Object obj26 = node24.getProp((int) (byte) 0);
        int int27 = node24.getChildCount();
        boolean boolean28 = node24.isThis();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.isImplicitCast();
        int int31 = jSDocInfo29.getParameterCount();
        node24.setJSDocInfo(jSDocInfo29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        boolean boolean43 = node38.isAdd();
        com.google.javascript.rhino.Node node44 = node38.cloneTree();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        boolean boolean56 = node44.hasChild(node50);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node24, node50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node already has a parent.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry25.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType38, "");
        com.google.javascript.rhino.jstype.UnionType unionType41 = objectType38.toMaybeUnionType();
        boolean boolean42 = objectType38.matchesObjectContext();
        boolean boolean43 = objectType38.hasAnyTemplate();
        boolean boolean44 = strSet11.equals((java.lang.Object) objectType38);
        boolean boolean45 = objectType38.isString();
        boolean boolean46 = objectType38.isEnumType();
        com.google.javascript.rhino.jstype.JSType jSType47 = objectType38.getTypeOfThis();
        boolean boolean48 = objectType38.isNoObjectType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(unionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isGetElem();
        jSDocInfoBuilder1.markTypeNode(node7, (int) '#', (int) (short) -1, (int) '4', 2, false);
        boolean boolean15 = jSDocInfoBuilder1.recordPreserveTry();
        jSDocInfoBuilder1.recordOriginalCommentString("Not declared as a type name");
        boolean boolean19 = jSDocInfoBuilder1.hasParameter("JSDocInfo");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isSyntheticBlock();
        boolean boolean30 = node22.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = new com.google.javascript.rhino.JSTypeExpression(node22, "Unknown class name");
        boolean boolean33 = jSDocInfoBuilder1.recordThisType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        java.lang.String str19 = jSType16.toString();
        boolean boolean20 = jSType16.matchesNumberContext();
        boolean boolean21 = jSType16.isGlobalThisType();
        com.google.javascript.rhino.jstype.JSType jSType22 = jSType16.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = jSType22.isBooleanObjectType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "None" + "'", str19, "None");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSType22);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray31 = nodeIterableList21.toArray(typePositionArray30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition35, typePosition36, typePosition37, typePosition38, typePosition39, typePosition40 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray42 = nodeIterableList32.toArray(typePositionArray41);
        boolean boolean43 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream44 = nodeIterableList21.stream();
        boolean boolean45 = nodeIterableList19.contains((java.lang.Object) nodeIterableList21);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator46 = nodeIterableList19.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(typePositionArray31);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertNotNull(typePositionArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator46);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.InputId inputId15 = new com.google.javascript.rhino.InputId("");
        java.lang.String str16 = inputId15.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        boolean boolean23 = objectType22.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair31 = objectType22.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = objectType22.collapseUnion();
        boolean boolean33 = inputId15.equals((java.lang.Object) objectType22);
        java.lang.String str34 = inputId15.getIdName();
        java.lang.String str35 = inputId15.toString();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean46 = nodeIterableList45.add(nodeIterable44);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node49.siblings();
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node49.setDirectives((java.util.Set<java.lang.String>) strSet58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList61 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray62 = nodeIterableList61.toArray();
        boolean boolean63 = strSet58.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList61);
        java.lang.Object[] objArray64 = nodeIterableList61.toArray();
        boolean boolean65 = nodeIterableList61.isEmpty();
        boolean boolean66 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList61);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node72.isNot();
        int int76 = node72.getLineno();
        boolean boolean77 = node72.isAdd();
        com.google.javascript.rhino.Node node78 = node72.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node78.setJSType(jSType79);
        com.google.javascript.rhino.InputId inputId82 = new com.google.javascript.rhino.InputId("");
        java.lang.String str83 = inputId82.getIdName();
        node78.setInputId(inputId82);
        com.google.javascript.rhino.Node node85 = node78.getLastSibling();
        int int86 = nodeIterableList45.indexOf((java.lang.Object) node85);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator87 = nodeIterableList45.spliterator();
        boolean boolean88 = inputId15.equals((java.lang.Object) nodeIterableList45);
        java.lang.String str89 = inputId15.toString();
        node3.setInputId(inputId15);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "InputId: " + "'", str16, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(typePair31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "InputId: " + "'", str35, "InputId: ");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(nodeIterableList61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableSpliterator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "InputId: " + "'", str89, "InputId: ");
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType6 = objectType5.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType5.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType21 = objectType20.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = objectType27.toObjectType();
        boolean boolean29 = objectType20.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType5, (com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.JSType jSType31 = objectType5.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSType31.getJSDocInfo();
        boolean boolean33 = jSType31.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        jSTypeRegistry35.forwardDeclareType("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        boolean boolean47 = jSTypeRegistry42.canPropertyBeDefined(jSType45, "Unknown class name");
        jSTypeRegistry42.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry42.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType55, "");
        boolean boolean58 = jSType57.isInstanceType();
        boolean boolean59 = jSType57.isNumber();
        jSTypeRegistry35.unregisterPropertyOnType("{1078264502}", jSType57);
        boolean boolean61 = jSType57.isNullType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair62 = jSType31.getTypesUnderInequality(jSType57);
        com.google.javascript.rhino.jstype.EnumType enumType63 = jSType57.toMaybeEnumType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = enumType63.isEmptyType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNull(enumElementType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(enumElementType21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(typePair62);
        org.junit.Assert.assertNull(enumType63);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry17.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType30, "");
        boolean boolean33 = jSType32.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = objectType15.testForEquality(jSType32);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSType32.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry1.createNullableType(jSType32);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        boolean boolean44 = objectType43.matchesInt32Context();
        boolean boolean45 = objectType43.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        com.google.javascript.rhino.jstype.UnionType unionType63 = objectType60.toMaybeUnionType();
        com.google.javascript.rhino.Node node64 = objectType60.getRootNode();
        boolean boolean65 = objectType60.isRegexpType();
        boolean boolean66 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType43, objectType60);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry1.createNamedType("OR hi!", "Not declared as a type name", 40, 3);
        boolean boolean72 = jSType71.isNoObjectType();
        boolean boolean73 = jSType71.isFunctionPrototypeType();
        boolean boolean74 = jSType71.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(unionType63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        jSTypeRegistry1.incrementGeneration();
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry46.createObjectType(objectType49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = objectType50.toObjectType();
        boolean boolean52 = objectType51.matchesInt32Context();
        boolean boolean53 = objectType51.isStringValueType();
        boolean boolean54 = objectType51.canBeCalled();
        boolean boolean55 = objectType51.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType56 = objectType51.getTypeOfThis();
        boolean boolean57 = objectType51.isNoResolvedType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType58 = objectType51.toMaybeEnumElementType();
        java.lang.String str59 = objectType51.toAnnotationString();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection60 = jSTypeRegistry1.getDirectImplementors(objectType51);
        boolean boolean61 = objectType51.isString();
        objectType51.clearResolved();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(enumElementType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "?" + "'", str59, "?");
        org.junit.Assert.assertNotNull(functionTypeCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node7.isAdd();
        boolean boolean11 = node7.isAnd();
        typePosition1.setItem(node7);
        com.google.javascript.rhino.Node node13 = node7.cloneTree();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, node13);
        int int15 = node13.getLength();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean20 = node19.isOptionalArg();
        boolean boolean21 = node19.isFalse();
        boolean boolean22 = node19.isVoid();
        int int23 = node19.getSourceOffset();
        boolean boolean24 = node19.isNot();
        com.google.javascript.rhino.Node node25 = node13.clonePropsFrom(node19);
        boolean boolean26 = node25.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>> jSTypeStaticScopeBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(jSTypeStaticScopeBuilder0);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str9 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        java.lang.String str11 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = jSTypeRegistry1.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry14.createObjectType(objectType17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = objectType18.toObjectType();
        boolean boolean20 = objectType19.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry22.createObjectType(objectType25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = objectType26.toObjectType();
        boolean boolean28 = objectType27.matchesInt32Context();
        boolean boolean29 = objectType27.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = objectType35.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        boolean boolean50 = jSTypeRegistry45.canPropertyBeDefined(jSType48, "Unknown class name");
        jSTypeRegistry45.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry45.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType58, "");
        boolean boolean61 = jSType60.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = objectType43.testForEquality(jSType60);
        com.google.javascript.rhino.jstype.JSType jSType63 = jSType60.collapseUnion();
        boolean boolean64 = objectType36.differsFrom(jSType60);
        boolean boolean65 = jSType60.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType66 = objectType27.getGreatestSubtype(jSType60);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType66.findPropertyType("OR hi! [directives: []]\n");
        java.lang.String str69 = jSType66.toAnnotationString();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair70 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType19, jSType66);
        boolean boolean71 = jSType66.isNumber();
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType66.findPropertyType("?");
        com.google.javascript.rhino.jstype.JSType jSType74 = jSType73.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry1.getGreatestSubtypeWithProperty(jSType73, "InputId: function (this:me, {346588212}): me");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry1.getNativeObjectType(jSTypeNative77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNull(errorReporter12);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "?" + "'", str69, "?");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertNotNull(jSType76);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        com.google.javascript.rhino.Node node29 = node26.cloneTree();
        boolean boolean30 = node29.isInstanceOf();
        int int31 = node29.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean4 = node3.isVoid();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node25 = node10.srcref(node20);
        int int26 = node10.getCharno();
        boolean boolean27 = node10.isQuotedString();
        boolean boolean28 = node10.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node10.setStaticSourceFile(staticSourceFile29);
        int int31 = node10.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node10.getStaticSourceFile();
        boolean boolean33 = node10.isFunction();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = node39.cloneNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 100, node39);
        node39.setCharno(36);
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChild(node10, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node already has a parent.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = jSType16.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSType16.collapseUnion();
        boolean boolean19 = jSType16.isInterface();
        boolean boolean20 = jSType16.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isNot();
        int int10 = node6.getLineno();
        boolean boolean11 = node6.isAdd();
        com.google.javascript.rhino.Node node12 = node6.cloneTree();
        java.lang.Object obj14 = node12.getProp((int) (byte) 0);
        int int15 = node12.getChildCount();
        boolean boolean16 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] { node12 };
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(12, nodeArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = node18.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: EQ 0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.String str12 = node11.toStringTree();
        boolean boolean13 = node11.isLocalResultCall();
        boolean boolean14 = node11.isTrue();
        boolean boolean15 = node11.isTrue();
        boolean boolean16 = node11.isTrue();
        boolean boolean17 = node11.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR hi!\n" + "'", str12, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType19 = jSType16.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSType16.dereference();
        boolean boolean21 = jSType16.isRecordType();
        java.lang.String str22 = jSType16.toString();
        boolean boolean23 = jSType16.isGlobalThisType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "None" + "'", str22, "None");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean4 = node3.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        int int6 = node3.getSourcePosition();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = node3.getExistingIntProp((-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: -2147483648");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8202 + "'", int6 == 8202);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        boolean boolean43 = jSType42.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        boolean boolean51 = objectType50.matchesInt32Context();
        boolean boolean52 = objectType50.isStringValueType();
        boolean boolean53 = objectType50.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair60 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType50, (com.google.javascript.rhino.jstype.JSType) objectType59);
        boolean boolean61 = objectType59.isNullable();
        boolean boolean62 = objectType59.isString();
        boolean boolean63 = objectType59.isNumberValueType();
        com.google.javascript.rhino.jstype.JSType jSType65 = objectType59.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair66 = jSType42.getTypesUnderShallowEquality(jSType65);
        boolean boolean67 = jSType42.isNumberObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNotNull(typePair66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        boolean boolean23 = node20.getBooleanProp(0);
        boolean boolean24 = node20.isName();
        boolean boolean25 = node20.isVoid();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        boolean boolean27 = node26.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        jSTypeRegistry21.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType38.toMaybeEnumElementType();
        boolean boolean40 = jSTypeRegistry10.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType28, objectType38);
        boolean boolean42 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType28, "OR hi! [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordInterface();
        boolean boolean47 = jSDocInfoBuilder44.recordDescription("hi!");
        boolean boolean48 = jSDocInfoBuilder44.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder44.recordConstancy();
        boolean boolean52 = jSDocInfoBuilder44.recordOverride();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "None", "{1078264502}", "OR hi! [directives: []]\n", "{1078264502}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        boolean boolean65 = jSDocInfoBuilder44.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean68 = jSTypeRegistry1.isForwardDeclaredType("hi!");
        jSTypeRegistry1.forwardDeclareType("function (this:me, {1469723246}): me");
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry1.createNamedType("{651460268}", "{1299232661}", 1, 40);
        jSTypeRegistry1.incrementGeneration();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(jSType75);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        java.lang.String[] strArray13 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        boolean boolean16 = strSet14.isEmpty();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList48 = com.google.common.collect.ImmutableList.of(strSet14, strSet28, strSet42);
        int int49 = strSet28.size();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean51 = node2.isLabelName();
        boolean boolean52 = node2.hasMoreThanOneChild();
        boolean boolean53 = node2.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSetList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder12 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray22 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility20 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.addAuthor("");
        boolean boolean29 = jSDocInfoBuilder26.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder26.recordReturnType(jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder26.recordOverride();
        boolean boolean34 = jSDocInfoBuilder26.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node40.isNot();
        int int44 = node40.getLineno();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        com.google.javascript.rhino.Node node55 = node40.srcref(node50);
        boolean boolean56 = node55.isDelProp();
        com.google.javascript.rhino.Node node57 = node55.getLastSibling();
        boolean boolean58 = node57.isFunction();
        java.lang.Object obj60 = node57.getProp((int) ' ');
        jSDocInfoBuilder26.markTypeNode(node57, 35, (int) (byte) 0, 16, 49, true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean68 = jSDocInfoBuilder26.recordVisibility(visibility67);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = visibilityEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility67);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder71 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean73 = jSDocInfoBuilder71.recordVersion("hi!");
        boolean boolean74 = jSDocInfoBuilder71.isJavaDispatch();
        boolean boolean76 = jSDocInfoBuilder71.recordBlockDescription("InputId: ");
        boolean boolean79 = jSDocInfoBuilder71.recordParameterDescription("Unknown class name", "Unknown class name");
        boolean boolean80 = jSDocInfoBuilder71.isInterfaceRecorded();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = visibilityEnumBuilder81.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility82);
        boolean boolean84 = jSDocInfoBuilder71.recordVisibility(visibility82);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility82);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList86 = visibilityEnumBuilder69.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray22);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertNotNull(visibilityEnumList86);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.isDefine();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeRegistry1.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        jSTypeRegistry1.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable12 = jSTypeRegistry1.getTypesWithProperty("{690905048}");
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        boolean boolean19 = jSTypeRegistry14.canPropertyBeDefined(jSType17, "Unknown class name");
        jSTypeRegistry14.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry14.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType27, "");
        boolean boolean30 = jSType29.isInstanceType();
        boolean boolean31 = jSType29.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType32 = jSType29.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSType29.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType34 = objectType33.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = objectType40.toObjectType();
        boolean boolean42 = objectType41.matchesInt32Context();
        boolean boolean43 = objectType41.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = objectType56.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        jSTypeRegistry59.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry59.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType72, "");
        boolean boolean75 = jSType74.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = objectType57.testForEquality(jSType74);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType74.collapseUnion();
        boolean boolean78 = objectType50.differsFrom(jSType74);
        boolean boolean79 = jSType74.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType80 = objectType41.getGreatestSubtype(jSType74);
        boolean boolean81 = objectType41.isConstructor();
        boolean boolean82 = objectType41.isNullable();
        boolean boolean83 = objectType41.isNoType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair84 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType33, (com.google.javascript.rhino.jstype.JSType) objectType41);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope86 = objectType33.getParentScope();
        org.junit.Assert.assertNotNull(jSType8);
        org.junit.Assert.assertNotNull(jSTypeIterable12);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNull(jSTypeStaticScope86);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot8 = objectType5.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = objectType5.toObjectType();
        boolean boolean10 = objectType9.matchesStringContext();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertNull(jSTypeStaticSlot8);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor13 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("{247883875}", 0, 8202);
        boolean boolean19 = nodeIterableList0.contains((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList0.subList((int) (short) 1, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (1) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor13);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        jSDocInfo14.addSuppression("{1256335049}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isWhile();
        boolean boolean7 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = node2.removeChildren();
        boolean boolean9 = node2.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        boolean boolean86 = nodeIterableList23.isEmpty();
        int int88 = nodeIterableList23.indexOf((java.lang.Object) 12);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator89 = nodeIterableList23.spliterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableSpliterator89);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        java.lang.String[] strArray10 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList42 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray43 = nodeIterableList42.toArray();
        boolean boolean44 = strSet39.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList42);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList45 = com.google.common.collect.ImmutableList.of(strSet11, strSet25, strSet39);
        boolean boolean46 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet11);
        boolean boolean47 = jSDocInfoBuilder1.recordInterface();
        boolean boolean49 = jSDocInfoBuilder1.recordLends("PARAM_LIST\n");
        jSDocInfoBuilder1.recordOriginalCommentString("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeIterableList42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSetList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.hasParameter("OR hi! [var_args_name: 1]\n");
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean19 = jSDocInfoBuilder1.recordLends("{439901092}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean23 = jSDocInfoBuilder21.recordVisibility(visibility22);
        boolean boolean24 = jSDocInfoBuilder21.isConstructorRecorded();
        boolean boolean25 = jSDocInfoBuilder21.isPopulatedWithFileOverview();
        boolean boolean26 = jSDocInfoBuilder21.recordDeprecated();
        boolean boolean28 = jSDocInfoBuilder21.hasParameter("{1574821220}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.addAuthor("");
        boolean boolean34 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression35);
        boolean boolean37 = jSDocInfoBuilder31.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        jSDocInfoBuilder31.markName("", staticSourceFile39, 29, 50);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node45.isDebugger();
        boolean boolean52 = node45.isSyntheticBlock();
        boolean boolean53 = node45.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node45, "Unknown class name");
        boolean boolean57 = jSDocInfoBuilder31.recordThrowDescription(jSTypeExpression55, "?");
        com.google.javascript.rhino.Node node58 = jSTypeExpression55.getRoot();
        boolean boolean59 = jSDocInfoBuilder21.recordParameter("java.io.IOException: OR []", jSTypeExpression55);
        boolean boolean60 = jSDocInfoBuilder1.recordThisType(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition5.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean26 = node21.isEquivalentToTyped(node25);
        boolean boolean27 = node25.isWhile();
        namePosition5.setItem(node25);
        boolean boolean29 = node25.isHook();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType11 = node2.getJSType();
        node2.setSourceEncodedPosition(8202);
        boolean boolean14 = node2.isOptionalArg();
        java.lang.Object obj16 = node2.getProp(83);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("{}");
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("OR hi! 0\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        node12.setLength((int) ' ');
        jSDocInfo0.setAssociatedNode(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getSuppressions();
        boolean boolean18 = jSDocInfo16.isNoSideEffects();
        java.lang.String str19 = jSDocInfo16.getReturnDescription();
        boolean boolean21 = jSDocInfo16.hasDescriptionForParameter("{...}");
        java.lang.String str22 = jSDocInfo16.getSourceName();
        boolean boolean23 = jSDocInfo16.hasBaseType();
        node12.setJSDocInfo(jSDocInfo16);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean35 = node30.isEquivalentToTyped(node34);
        com.google.javascript.rhino.Node node36 = node30.cloneNode();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) '4');
        node30.addChildrenToBack(node38);
        int int41 = node30.getIntProp(10);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(40);
        boolean boolean44 = node43.isReturn();
        com.google.javascript.rhino.InputId inputId46 = new com.google.javascript.rhino.InputId("");
        java.lang.String str47 = inputId46.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        boolean boolean54 = objectType53.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = objectType60.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair62 = objectType53.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType60);
        com.google.javascript.rhino.jstype.JSType jSType63 = objectType53.collapseUnion();
        boolean boolean64 = inputId46.equals((java.lang.Object) objectType53);
        node43.setInputId(inputId46);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isAnd();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node73.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo75.getSuppressions();
        boolean boolean77 = jSDocInfo75.isNoSideEffects();
        java.lang.String str78 = jSDocInfo75.getReturnDescription();
        boolean boolean80 = jSDocInfo75.hasParameter("Not declared as a constructor");
        java.lang.String str81 = jSDocInfo75.getMeaning();
        boolean boolean82 = jSDocInfo75.isJavaDispatch();
        node73.setJSDocInfo(jSDocInfo75);
        boolean boolean84 = node68.isEquivalentToTyped(node73);
        java.lang.String str85 = node73.getQualifiedName();
        boolean boolean86 = node73.isComma();
        java.lang.String str87 = node73.toString();
        boolean boolean88 = inputId46.equals((java.lang.Object) str87);
        node30.setInputId(inputId46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node90 = node12.removeChildAfter(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "InputId: " + "'", str47, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNotNull(typePair62);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "GETELEM 2 [jsdoc_info: JSDocInfo]" + "'", str87, "GETELEM 2 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        boolean boolean6 = nodeIterableList0.equals((java.lang.Object) objArray5);
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.replaceAll(nodeIterableUnaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int2 = stringPosition1.getPositionOnEndLine();
        int int3 = stringPosition1.getEndLine();
        int int4 = stringPosition1.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getStartLine();
        int int7 = stringPosition5.getPositionOnStartLine();
        int int8 = stringPosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int10 = stringPosition9.getStartLine();
        int int11 = stringPosition9.getPositionOnStartLine();
        int int12 = stringPosition9.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int14 = stringPosition13.getStartLine();
        int int15 = stringPosition13.getPositionOnStartLine();
        java.lang.String str16 = stringPosition13.getItem();
        stringPosition13.setPositionInformation(16, 53, 48, 5);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int23 = stringPosition22.getStartLine();
        int int24 = stringPosition22.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int26 = stringPosition25.getPositionOnEndLine();
        int int27 = stringPosition25.getPositionOnEndLine();
        int int28 = stringPosition25.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int30 = stringPosition29.getStartLine();
        int int31 = stringPosition29.getPositionOnStartLine();
        int int32 = stringPosition29.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList33 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition1, stringPosition5, stringPosition9, stringPosition13, stringPosition22, stringPosition25, stringPosition29);
        int int34 = stringPosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition35 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int36 = stringPosition35.getPositionOnEndLine();
        int int37 = stringPosition35.getPositionOnEndLine();
        int int38 = stringPosition35.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int41 = stringPosition40.getPositionOnEndLine();
        int int42 = stringPosition40.getEndLine();
        int int43 = stringPosition40.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition44 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int45 = stringPosition44.getStartLine();
        int int46 = stringPosition44.getPositionOnStartLine();
        int int47 = stringPosition44.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int49 = stringPosition48.getStartLine();
        int int50 = stringPosition48.getPositionOnStartLine();
        int int51 = stringPosition48.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int53 = stringPosition52.getStartLine();
        int int54 = stringPosition52.getPositionOnStartLine();
        java.lang.String str55 = stringPosition52.getItem();
        stringPosition52.setPositionInformation(16, 53, 48, 5);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition61 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int62 = stringPosition61.getStartLine();
        int int63 = stringPosition61.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int65 = stringPosition64.getPositionOnEndLine();
        int int66 = stringPosition64.getPositionOnEndLine();
        int int67 = stringPosition64.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition68 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int69 = stringPosition68.getStartLine();
        int int70 = stringPosition68.getPositionOnStartLine();
        int int71 = stringPosition68.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList72 = com.google.common.collect.ImmutableList.of(stringPosition39, stringPosition40, stringPosition44, stringPosition48, stringPosition52, stringPosition61, stringPosition64, stringPosition68);
        int int73 = stringPosition39.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition35, stringPosition39);
        int int75 = stringPosition35.getPositionOnStartLine();
        java.lang.Class<?> wildcardClass76 = stringPosition35.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(stringPositionList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(stringPositionList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        int int36 = nodeIterableList20.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray38 = nodeIterableList37.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = nodeIterableList37.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray46 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition40, typePosition41, typePosition42, typePosition43, typePosition44, typePosition45 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray47 = nodeIterableList37.toArray(typePositionArray46);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor48 = nodeIterableList37.iterator();
        java.lang.Object[] objArray49 = nodeIterableList37.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor50 = nodeIterableList37.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor51 = nodeIterableList37.iterator();
        boolean boolean52 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        int int53 = nodeIterableList20.size();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(45, 83, 12);
        boolean boolean58 = nodeIterableList20.contains((java.lang.Object) 45);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(typePositionArray46);
        org.junit.Assert.assertNotNull(typePositionArray47);
        org.junit.Assert.assertNotNull(nodeIterableItor48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor50);
        org.junit.Assert.assertNotNull(nodeIterableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression72);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression72);
        boolean boolean80 = jSTypeExpression72.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node5 = typePosition4.getItem();
        int int6 = typePosition4.getStartLine();
        int int7 = typePosition4.getEndLine();
        int int8 = typePosition4.getEndLine();
        int int9 = typePosition4.getPositionOnStartLine();
        int int10 = typePosition4.getPositionOnStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        jSTypeRegistry12.forwardDeclareType("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        com.google.javascript.rhino.Node node23 = jSTypeRegistry19.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean28 = node23.isEquivalentToTyped(node27);
        com.google.javascript.rhino.Node node29 = node23.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry31.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean40 = node35.isEquivalentToTyped(node39);
        com.google.javascript.rhino.Node node41 = node35.cloneNode();
        boolean boolean42 = node35.isEmpty();
        boolean boolean43 = node23.hasChild(node35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        boolean boolean51 = objectType50.matchesInt32Context();
        boolean boolean52 = objectType50.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = objectType58.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = objectType65.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        boolean boolean73 = jSTypeRegistry68.canPropertyBeDefined(jSType71, "Unknown class name");
        jSTypeRegistry68.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode78 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry77.setResolveMode(resolveMode78);
        com.google.javascript.rhino.jstype.ObjectType objectType80 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType81 = jSTypeRegistry77.createObjectType(objectType80);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry68.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType81, "");
        boolean boolean84 = jSType83.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = objectType66.testForEquality(jSType83);
        com.google.javascript.rhino.jstype.JSType jSType86 = jSType83.collapseUnion();
        boolean boolean87 = objectType59.differsFrom(jSType83);
        boolean boolean88 = jSType83.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType89 = objectType50.getGreatestSubtype(jSType83);
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType89.findPropertyType("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.EnumType enumType92 = jSTypeRegistry12.createEnumType("{1078264502}", node35, jSType89);
        typePosition4.setItem(node35);
        jSDocInfo0.setAssociatedNode(node35);
        boolean boolean95 = node35.isThrow();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + resolveMode78 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode78.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNotNull(enumType92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        boolean boolean10 = objectType6.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType11 = objectType6.getTypeOfThis();
        boolean boolean12 = objectType6.isNoResolvedType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType13 = objectType6.toMaybeEnumElementType();
        java.lang.String str14 = objectType6.toAnnotationString();
        boolean boolean15 = objectType6.isStringObjectType();
        boolean boolean16 = objectType6.isInstanceType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(enumElementType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "?" + "'", str14, "?");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression72);
        com.google.javascript.rhino.Node node79 = jSTypeExpression72.getRoot();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean87 = node86.isThis();
        node83.addChildToBack(node86);
        boolean boolean89 = node83.isDebugger();
        boolean boolean90 = node83.isAssign();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node83, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node94 = node93.getLastChild();
        com.google.javascript.rhino.Node node95 = node79.clonePropsFrom(node94);
        boolean boolean96 = node94.hasMoreThanOneChild();
        int int97 = node94.getLineno();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.lang.String str9 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("None");
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        iOException5.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException13 = new java.io.IOException("None");
        java.io.IOException iOException15 = new java.io.IOException();
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        iOException13.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException21);
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException22);
        java.io.IOException iOException25 = new java.io.IOException();
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException26);
        java.io.IOException iOException29 = new java.io.IOException();
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.lang.Throwable[] throwableArray34 = iOException32.getSuppressed();
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        iOException32.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException39 = new java.io.IOException();
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException39);
        java.io.IOException iOException41 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException40);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList42 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException5, (java.lang.Throwable) iOException13, (java.lang.Throwable) iOException22, (java.lang.Throwable) iOException27, (java.lang.Throwable) iOException31, (java.lang.Throwable) iOException35, (java.lang.Throwable) iOException40);
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException46 = new java.io.IOException("");
        iOException43.addSuppressed((java.lang.Throwable) iOException46);
        iOException13.addSuppressed((java.lang.Throwable) iOException43);
        iOException2.addSuppressed((java.lang.Throwable) iOException13);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableList42);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isDefine();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        boolean boolean8 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        com.google.javascript.rhino.jstype.JSType jSType2 = null;
        node1.setJSType(jSType2);
        node1.setVarArgs(true);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        boolean boolean11 = node3.hasOneChild();
        com.google.javascript.rhino.InputId inputId12 = node3.getInputId();
        java.lang.String str13 = node3.toStringTree();
        com.google.javascript.rhino.InputId inputId15 = new com.google.javascript.rhino.InputId("InputId: ");
        node3.setInputId(inputId15);
        boolean boolean17 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        boolean boolean33 = node25.hasOneChild();
        com.google.javascript.rhino.InputId inputId34 = node25.getInputId();
        node21.putProp(32, (java.lang.Object) inputId34);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry37.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean46 = node41.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node47 = node41.cloneNode();
        com.google.javascript.rhino.InputId inputId48 = node41.getInputId();
        boolean boolean49 = node41.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable50 = node41.getAncestors();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(49, node3, node21, node41);
        boolean boolean52 = node21.isNumber();
        boolean boolean53 = node21.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str13, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(inputId34);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ancestorIterable50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList9.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        int int12 = nodeIterableList11.size();
        boolean boolean13 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList9.listIterator();
        boolean boolean15 = nodeIterableItor14.hasNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        boolean boolean24 = node5.isObjectLit();
        com.google.javascript.rhino.InputId inputId25 = node5.getInputId();
        node5.setLength(8);
        int int29 = node5.getIntProp(35);
        int int30 = node5.getLength();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        java.lang.String str63 = nodeIterableList2.toString();
        java.lang.Object obj64 = null;
        int int65 = nodeIterableList2.indexOf(obj64);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(36, "{1604895782}");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node68.children();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = nodeIterableList2.add(nodeIterable69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeIterable69);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("Unknown class name");
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor20 = nodeIterableList19.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        boolean boolean27 = jSTypeRegistry22.canPropertyBeDefined(jSType25, "Unknown class name");
        jSTypeRegistry22.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        boolean boolean36 = jSTypeRegistry31.canPropertyBeDefined(jSType34, "Unknown class name");
        jSTypeRegistry31.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry31.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        jSTypeRegistry42.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot52 = objectType49.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType60 = objectType59.toMaybeEnumElementType();
        boolean boolean61 = jSTypeRegistry31.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType59);
        boolean boolean63 = jSTypeRegistry22.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType49, "OR hi! [directives: []]\n");
        int int64 = nodeIterableList19.indexOf((java.lang.Object) jSTypeRegistry22);
        jSTypeRegistry22.incrementGeneration();
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry22.getType("PARAM_LIST");
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder70.addAuthor("");
        boolean boolean73 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordReturnType(jSTypeExpression74);
        boolean boolean76 = jSDocInfoBuilder70.recordOverride();
        boolean boolean78 = jSDocInfoBuilder70.recordMeaning("");
        boolean boolean79 = jSDocInfoBuilder70.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean81 = jSDocInfo80.isExterns();
        int int82 = jSDocInfo80.getParameterCount();
        boolean boolean83 = jSDocInfo80.isIdGenerator();
        boolean boolean84 = jSDocInfo80.isInterface();
        boolean boolean85 = jSDocInfo80.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = jSDocInfo80.getVisibility();
        boolean boolean87 = jSDocInfo80.isNoTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList88 = jSDocInfo80.getTemplateTypeNames();
        boolean boolean89 = jSDocInfoBuilder70.recordTemplateTypeNames((java.util.List<java.lang.String>) strList88);
        jSTypeRegistry22.setTemplateTypeNames((java.util.List<java.lang.String>) strList88);
        jSTypeRegistry22.setLastGeneration(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableItor20);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNull(jSTypeStaticSlot52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNull(enumElementType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(visibility86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        jSTypeRegistry1.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        objectType19.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType22 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType19);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable25 = jSTypeRegistry1.getTypesWithProperty("{599635391}");
        jSTypeRegistry1.identifyNonNullableName("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertNotNull(jSTypeIterable25);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int2 = stringPosition1.getPositionOnEndLine();
        int int3 = stringPosition1.getEndLine();
        int int4 = stringPosition1.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getStartLine();
        int int7 = stringPosition5.getPositionOnStartLine();
        int int8 = stringPosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int10 = stringPosition9.getStartLine();
        int int11 = stringPosition9.getPositionOnStartLine();
        int int12 = stringPosition9.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int14 = stringPosition13.getStartLine();
        int int15 = stringPosition13.getPositionOnStartLine();
        java.lang.String str16 = stringPosition13.getItem();
        stringPosition13.setPositionInformation(16, 53, 48, 5);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int23 = stringPosition22.getStartLine();
        int int24 = stringPosition22.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int26 = stringPosition25.getPositionOnEndLine();
        int int27 = stringPosition25.getPositionOnEndLine();
        int int28 = stringPosition25.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int30 = stringPosition29.getStartLine();
        int int31 = stringPosition29.getPositionOnStartLine();
        int int32 = stringPosition29.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList33 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition1, stringPosition5, stringPosition9, stringPosition13, stringPosition22, stringPosition25, stringPosition29);
        int int34 = stringPosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition35 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int36 = stringPosition35.getPositionOnEndLine();
        int int37 = stringPosition35.getPositionOnEndLine();
        int int38 = stringPosition35.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int41 = stringPosition40.getPositionOnEndLine();
        int int42 = stringPosition40.getEndLine();
        int int43 = stringPosition40.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition44 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int45 = stringPosition44.getStartLine();
        int int46 = stringPosition44.getPositionOnStartLine();
        int int47 = stringPosition44.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int49 = stringPosition48.getStartLine();
        int int50 = stringPosition48.getPositionOnStartLine();
        int int51 = stringPosition48.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int53 = stringPosition52.getStartLine();
        int int54 = stringPosition52.getPositionOnStartLine();
        java.lang.String str55 = stringPosition52.getItem();
        stringPosition52.setPositionInformation(16, 53, 48, 5);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition61 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int62 = stringPosition61.getStartLine();
        int int63 = stringPosition61.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int65 = stringPosition64.getPositionOnEndLine();
        int int66 = stringPosition64.getPositionOnEndLine();
        int int67 = stringPosition64.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition68 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int69 = stringPosition68.getStartLine();
        int int70 = stringPosition68.getPositionOnStartLine();
        int int71 = stringPosition68.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList72 = com.google.common.collect.ImmutableList.of(stringPosition39, stringPosition40, stringPosition44, stringPosition48, stringPosition52, stringPosition61, stringPosition64, stringPosition68);
        int int73 = stringPosition39.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition35, stringPosition39);
        // The following exception was thrown during execution in test generation
        try {
            stringPosition35.setPositionInformation(39, (int) '#', 37, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 39?end-line: 37");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(stringPositionList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(stringPositionList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean6 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node11.setJSType(jSType12);
        boolean boolean14 = node11.isString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        boolean boolean37 = node32.isAdd();
        boolean boolean38 = node26.hasChild(node32);
        boolean boolean39 = node32.isDefaultCase();
        int int40 = node32.getSourcePosition();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isTypeOf();
        boolean boolean45 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = node32.copyInformationFromForTree(node43);
        boolean boolean47 = node11.isEquivalentToTyped(node43);
        boolean boolean48 = node43.isStringKey();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        boolean boolean56 = jSTypeRegistry51.canPropertyBeDefined(jSType54, "Unknown class name");
        jSTypeRegistry51.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry51.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType64, "");
        com.google.javascript.rhino.jstype.JSType jSType68 = objectType64.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean69 = jSType68.isUnionType();
        boolean boolean70 = jSType68.isInterface();
        node43.putProp(83, (java.lang.Object) boolean70);
        boolean boolean72 = node43.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setReturnsTainted();
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str3 = jSDocInfo0.toString();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.hasParameter("OR hi! [directives: []]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder11.recordThrowType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder11.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder11.recordReturnType(jSTypeExpression19);
        boolean boolean22 = jSDocInfoBuilder11.recordDeprecationReason("Not declared as a constructor");
        boolean boolean23 = jSDocInfoBuilder11.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean28 = jSDocInfoBuilder25.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression29);
        boolean boolean32 = jSDocInfoBuilder25.recordMeaning("hi!");
        boolean boolean34 = jSDocInfoBuilder25.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordInterface();
        boolean boolean39 = jSDocInfoBuilder36.recordDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node42.siblings();
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder55.recordInterface();
        boolean boolean58 = jSDocInfoBuilder55.recordDescription("hi!");
        boolean boolean59 = jSDocInfoBuilder55.recordHiddenness();
        boolean boolean60 = strSet51.remove((java.lang.Object) jSDocInfoBuilder55);
        boolean boolean61 = jSDocInfoBuilder55.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = null;
        boolean boolean68 = jSDocInfoBuilder63.recordThrowType(jSTypeExpression67);
        boolean boolean69 = jSDocInfoBuilder63.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder63.markName("", staticSourceFile71, 29, 50);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node77.isDebugger();
        boolean boolean84 = node77.isSyntheticBlock();
        boolean boolean85 = node77.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = new com.google.javascript.rhino.JSTypeExpression(node77, "Unknown class name");
        boolean boolean89 = jSDocInfoBuilder63.recordThrowDescription(jSTypeExpression87, "?");
        boolean boolean90 = jSDocInfoBuilder55.recordThrowType(jSTypeExpression87);
        boolean boolean91 = jSDocInfoBuilder36.recordEnumParameterType(jSTypeExpression87);
        boolean boolean92 = jSDocInfoBuilder25.recordImplementedInterface(jSTypeExpression87);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression87);
        boolean boolean95 = jSDocInfoBuilder11.recordThrowDescription(jSTypeExpression87, "OR hi!");
        boolean boolean96 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "OR hi! [source_file: {1078264502}]", 13, (int) (short) 100);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry33.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        boolean boolean48 = jSTypeRegistry43.canPropertyBeDefined(jSType46, "Unknown class name");
        jSTypeRegistry43.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = objectType56.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        jSTypeRegistry59.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry59.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType72, "");
        boolean boolean75 = jSType74.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = objectType57.testForEquality(jSType74);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType74.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry43.createNullableType(jSType74);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry33.createOptionalType(jSType78);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry1.createOptionalNullableType(jSType78);
        boolean boolean81 = jSType78.isNoObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getType();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        boolean boolean5 = jSDocInfo0.isExpose();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator11 = nodeCollection10.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isString();
        boolean boolean10 = node2.isArrayLit();
        com.google.javascript.rhino.Node node12 = node2.getChildAtIndex(0);
        boolean boolean13 = node2.isVar();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry15.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isNE();
        boolean boolean33 = node31.isInstanceOf();
        boolean boolean34 = node31.isThrow();
        node31.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node31.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode40 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry39.setResolveMode(resolveMode40);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        boolean boolean44 = jSTypeRegistry39.canPropertyBeDefined(jSType42, "Unknown class name");
        jSTypeRegistry39.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry39.createAnonymousObjectType();
        objectType47.clearResolved();
        node31.setJSType((com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node52.isDebugger();
        com.google.javascript.rhino.Node node59 = node52.getFirstChild();
        boolean boolean60 = node52.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType61 = jSTypeRegistry26.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType47, node52);
        boolean boolean62 = jSTypeRegistry15.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        com.google.javascript.rhino.Node node69 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        int int70 = node69.getType();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node73.siblings();
        node73.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType82 = node73.getJSType();
        com.google.javascript.rhino.Node node83 = node73.getParent();
        com.google.javascript.rhino.Node node84 = node69.srcref(node73);
        java.lang.String str85 = node73.getString();
        boolean boolean86 = node73.isLabel();
        node2.addChildToBack(node73);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean94 = node93.isThis();
        node90.addChildToBack(node93);
        boolean boolean96 = node93.isCatch();
        boolean boolean97 = node93.isDefaultCase();
        boolean boolean98 = node93.isCatch();
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node93);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertTrue("'" + resolveMode40 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode40.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(functionType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 83 + "'", int70 == 83);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNull(jSType82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        jSDocInfoBuilder1.recordOriginalCommentString("{1604895782}");
        boolean boolean15 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean16 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList9.asList();
        boolean boolean11 = nodeIterableList9.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor12 = nodeIterableList9.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor12);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor20 = nodeIterableList19.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        boolean boolean27 = jSTypeRegistry22.canPropertyBeDefined(jSType25, "Unknown class name");
        jSTypeRegistry22.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        boolean boolean36 = jSTypeRegistry31.canPropertyBeDefined(jSType34, "Unknown class name");
        jSTypeRegistry31.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry31.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        jSTypeRegistry42.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot52 = objectType49.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType60 = objectType59.toMaybeEnumElementType();
        boolean boolean61 = jSTypeRegistry31.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType59);
        boolean boolean63 = jSTypeRegistry22.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType49, "OR hi! [directives: []]\n");
        int int64 = nodeIterableList19.indexOf((java.lang.Object) jSTypeRegistry22);
        boolean boolean65 = nodeIterableList19.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList19.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableItor20);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNull(jSTypeStaticSlot52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNull(enumElementType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray31 = nodeIterableList21.toArray(typePositionArray30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition35, typePosition36, typePosition37, typePosition38, typePosition39, typePosition40 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray42 = nodeIterableList32.toArray(typePositionArray41);
        boolean boolean43 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream44 = nodeIterableList21.stream();
        boolean boolean45 = nodeIterableList19.contains((java.lang.Object) nodeIterableList21);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isDebugger();
        com.google.javascript.rhino.InputId inputId52 = new com.google.javascript.rhino.InputId("");
        java.lang.String str53 = inputId52.getIdName();
        node49.setInputId(inputId52);
        boolean boolean55 = node49.isThrow();
        com.google.javascript.rhino.Node node56 = node49.getFirstChild();
        boolean boolean57 = node49.isHook();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node49.children();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = nodeIterableList21.set(0, nodeIterable58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(typePositionArray31);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertNotNull(typePositionArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean15 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("");
        boolean boolean5 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        boolean boolean17 = strSet11.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray19 = nodeIterableList18.toArray();
        boolean boolean20 = nodeIterableList18.isEmpty();
        boolean boolean21 = nodeIterableList18.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor22 = nodeIterableList18.iterator();
        boolean boolean23 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList18);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor24 = nodeIterableList18.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = nodeIterableList18.get(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (4) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor24);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("{821211000}");
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.lang.String str10 = jSDocInfo0.toString();
        java.lang.String str11 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isGetElem();
        jSDocInfoBuilder1.markTypeNode(node7, (int) '#', (int) (short) -1, (int) '4', 2, false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node7.children();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        int int53 = nodeIterableList2.size();
        int int54 = nodeIterableList2.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.recordInterface();
        boolean boolean59 = jSDocInfoBuilder56.recordDescription("hi!");
        boolean boolean60 = jSDocInfoBuilder56.recordHiddenness();
        boolean boolean61 = jSDocInfoBuilder56.recordExpose();
        boolean boolean62 = jSDocInfoBuilder56.recordNoCompile();
        boolean boolean63 = jSDocInfoBuilder56.recordConstructor();
        jSDocInfoBuilder56.recordOriginalCommentString("OR hi!");
        int int66 = nodeIterableList2.indexOf((java.lang.Object) jSDocInfoBuilder56);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor67 = nodeIterableList2.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor67);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        node5.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node5.setStaticSourceFile(staticSourceFile10);
        int int12 = node5.getLength();
        boolean boolean13 = node5.isLocalResultCall();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry15.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType28, "");
        boolean boolean31 = jSType30.isInstanceType();
        boolean boolean32 = jSType30.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType33 = jSType30.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSType30.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType35 = objectType34.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType36 = objectType34.dereference();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node42.isNot();
        int int46 = node42.getLineno();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node52.isNot();
        int int56 = node52.getLineno();
        com.google.javascript.rhino.Node node57 = node42.srcref(node52);
        boolean boolean58 = node57.isDelProp();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        int int61 = node57.getIntProp(16);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node64.isDebugger();
        boolean boolean71 = node64.isVoid();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isTypeOf();
        com.google.javascript.rhino.Node node76 = node64.srcrefTree(node74);
        com.google.javascript.rhino.Node node77 = node64.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node77.setStaticSourceFile(staticSourceFile78);
        node57.addChildrenToBack(node77);
        boolean boolean81 = node57.isIn();
        boolean boolean82 = objectType34.equals((java.lang.Object) node57);
        com.google.javascript.rhino.Node node83 = node5.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean84 = node57.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean3 = jSDocInfoBuilder1.recordExport();
        boolean boolean5 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet17);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        boolean boolean22 = strSet17.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.HashSet[] hashSetArray24 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray25 = (java.util.HashSet<java.lang.String>[]) hashSetArray24;
        strSetArray25[0] = strSet17;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList28 = com.google.common.collect.ImmutableList.copyOf(strSetArray25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        boolean boolean38 = node31.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        boolean boolean41 = jSDocInfo39.hasReturnType();
        boolean boolean42 = jSDocInfo39.isOverride();
        jSDocInfo39.setLicense("hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        boolean boolean63 = node60.isNot();
        int int64 = node60.getLineno();
        com.google.javascript.rhino.Node node65 = node50.srcref(node60);
        boolean boolean66 = node65.isDelProp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        node72.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = null;
        node72.setStaticSourceFile(staticSourceFile77);
        com.google.common.collect.ImmutableList<java.lang.Object> objList79 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray25, (java.lang.Object) node31, (java.lang.Object) "hi!", (java.lang.Object) boolean66, (java.lang.Object) node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = jSDocInfoBuilder1.build(node31);
        java.util.Set<java.lang.String> strSet81 = jSDocInfo80.getParameterNames();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo80.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hashSetArray24);
        org.junit.Assert.assertNotNull(strSetArray25);
        org.junit.Assert.assertNotNull(strSetList28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(jSDocInfo80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        int int14 = strSet11.size();
        strSet11.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry33.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType46, "");
        boolean boolean49 = jSType48.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = objectType31.testForEquality(jSType48);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType48.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry17.createNullableType(jSType48);
        boolean boolean53 = strSet11.equals((java.lang.Object) jSTypeRegistry17);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType60 = objectType59.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = objectType66.toObjectType();
        boolean boolean68 = objectType59.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType66);
        boolean boolean69 = strSet11.equals((java.lang.Object) objectType59);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        boolean boolean72 = nodeIterableList70.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor73 = nodeIterableList70.iterator();
        boolean boolean74 = strSet11.contains((java.lang.Object) nodeIterableItor73);
        strSet11.clear();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNull(enumElementType60);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        boolean boolean64 = nodeIterableList63.isEmpty();
        boolean boolean65 = nodeIterableList63.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList63.listIterator();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node69.siblings();
        node69.setSourceFileForTesting("[]");
        int int78 = nodeIterableList63.indexOf((java.lang.Object) node69);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator79 = nodeIterableList63.spliterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableSpliterator79);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        boolean boolean43 = jSType42.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = objectType25.testForEquality(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType42.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry11.createNullableType(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createOptionalType(jSType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry1.createAnonymousObjectType();
        jSTypeRegistry1.setLastGeneration(true);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry1.createNamedType("?", "None", 30, 100);
        jSTypeRegistry1.setLastGeneration(true);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable59 = jSTypeRegistry1.getEachReferenceTypeWithProperty("{1539423957}");
        com.google.javascript.rhino.ErrorReporter errorReporter60 = jSTypeRegistry1.getErrorReporter();
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = null;
        jSTypeRegistry1.setResolveMode(resolveMode61);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNotNull(objectTypeIterable59);
        org.junit.Assert.assertNull(errorReporter60);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        boolean boolean43 = jSType42.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = objectType25.testForEquality(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType42.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry11.createNullableType(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createOptionalType(jSType46);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        jSTypeRegistry49.forwardDeclareType("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        boolean boolean61 = jSTypeRegistry56.canPropertyBeDefined(jSType59, "Unknown class name");
        jSTypeRegistry56.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType69 = jSTypeRegistry65.createObjectType(objectType68);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry56.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType69, "");
        boolean boolean72 = jSType71.isInstanceType();
        boolean boolean73 = jSType71.isNumber();
        jSTypeRegistry49.unregisterPropertyOnType("{1078264502}", jSType71);
        boolean boolean75 = jSType71.isNullType();
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry1.createNullableType(jSType71);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType71.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = jSType77.isEmptyType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNull(jSType77);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        com.google.javascript.rhino.Node node16 = node2.getNext();
        boolean boolean17 = node2.isThis();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder19.recordConstancy();
        boolean boolean27 = jSDocInfoBuilder19.recordOverride();
        jSDocInfoBuilder19.markName("None", 5, 0);
        java.lang.String[] strArray34 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        boolean boolean37 = strSet35.isEmpty();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node54.siblings();
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray67 = nodeIterableList66.toArray();
        boolean boolean68 = strSet63.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList69 = com.google.common.collect.ImmutableList.of(strSet35, strSet49, strSet63);
        boolean boolean70 = jSDocInfoBuilder19.recordModifies((java.util.Set<java.lang.String>) strSet63);
        java.lang.Object obj71 = null;
        boolean boolean72 = strSet63.contains(obj71);
        int int73 = strSet63.size();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray76 = nodeIterableList75.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList77 = nodeIterableList75.reverse();
        boolean boolean78 = nodeIterableList75.isEmpty();
        int int79 = nodeIterableList75.size();
        boolean boolean80 = nodeIterableList75.isEmpty();
        boolean boolean81 = strSet63.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList75);
        int int82 = nodeIterableList75.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSetList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(nodeIterableList75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression10);
        jSDocInfoBuilder1.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        node18.putBooleanProp(0, false);
        node18.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean35 = node18.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node18.getStaticSourceFile();
        int int38 = staticSourceFile36.getLineOfOffset(53);
        jSDocInfoBuilder1.markName("TYPEOF hi!", staticSourceFile36, 52, 0);
        boolean boolean42 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition8.getStartLine();
        int int16 = namePosition8.getStartLine();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        boolean boolean33 = strSet28.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList31);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean35 = strSet28.remove((java.lang.Object) stringPosition34);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node47.setJSType(jSType48);
        com.google.javascript.rhino.InputId inputId51 = new com.google.javascript.rhino.InputId("");
        java.lang.String str52 = inputId51.getIdName();
        node47.setInputId(inputId51);
        boolean boolean54 = strSet28.equals((java.lang.Object) node47);
        boolean boolean55 = node47.isVoid();
        com.google.javascript.rhino.Node node56 = node47.removeFirstChild();
        namePosition8.setItem(node56);
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        int int36 = nodeIterableList20.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList20.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression10);
        jSDocInfoBuilder1.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        node18.putBooleanProp(0, false);
        node18.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean35 = node18.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node18.getStaticSourceFile();
        int int38 = staticSourceFile36.getLineOfOffset(53);
        jSDocInfoBuilder1.markName("TYPEOF hi!", staticSourceFile36, 52, 0);
        java.lang.String str42 = staticSourceFile36.getName();
        int int44 = staticSourceFile36.getLineOfOffset((int) (short) 10);
        int int46 = staticSourceFile36.getLineOfOffset((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str42, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isString();
        node2.setIsSyntheticBlock(true);
        boolean boolean12 = node2.isInc();
        java.lang.String str13 = node2.getQualifiedName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 100, node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        com.google.javascript.rhino.Node node42 = node27.srcref(node37);
        int int43 = node27.getCharno();
        com.google.javascript.rhino.Node node45 = node27.getAncestor((int) (short) 1);
        com.google.javascript.rhino.Node node46 = node19.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean47 = node46.isUnscopedQualifiedName();
        boolean boolean48 = node46.isObjectLit();
        node46.setLineno(3);
        boolean boolean51 = node46.isNew();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("{1256335049}", 1, 5);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenAfter(node46, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        jSTypeRegistry1.forwardDeclareType("function (this:me, {470022249}): me");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable12 = jSTypeRegistry1.getEachReferenceTypeWithProperty("function (this:me, {2030651202}): me");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType14 = jSTypeRegistry1.getNativeType(jSTypeNative13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable12);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isRegExp();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isNE();
        boolean boolean10 = node8.isInstanceOf();
        boolean boolean11 = node8.isThrow();
        node8.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable14 = node8.getAncestors();
        java.util.Set<java.lang.String> strSet15 = node8.getDirectives();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node18.isDebugger();
        boolean boolean25 = node18.isVoid();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isTypeOf();
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node28);
        boolean boolean31 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node35.isDebugger();
        node35.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node59.isNot();
        int int63 = node59.getLineno();
        com.google.javascript.rhino.Node node64 = node49.srcref(node59);
        int int65 = node49.getCharno();
        com.google.javascript.rhino.Node node66 = node35.copyInformationFrom(node49);
        java.lang.String str67 = node35.getQualifiedName();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(2, node3, node8, node30, node35, 36, 32);
        boolean boolean71 = node35.hasMoreThanOneChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = node35.getStaticSourceFile();
        boolean boolean73 = node35.isInstanceOf();
        node35.detachChildren();
        boolean boolean75 = node35.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ancestorIterable14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(staticSourceFile72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(true);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        boolean boolean14 = node11.isNot();
        int int15 = node11.getLineno();
        boolean boolean16 = node11.isAdd();
        node11.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean19 = node11.isDec();
        node11.setLineno(35);
        com.google.javascript.rhino.Node node22 = node11.getParent();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node32 = objectType28.getRootNode();
        com.google.javascript.rhino.Node node33 = objectType28.getRootNode();
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry2.createObjectType("{1722797836}", node22, objectType28);
        boolean boolean35 = objectType28.isConstructor();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray30 = nodeIterableList29.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = nodeIterableList29.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList35 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray36 = nodeIterableList35.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = nodeIterableList35.reverse();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Object[] objArray47 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList37, 52, node44 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        java.lang.Object[] objArray63 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList53, 52, node60 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList67 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray68 = nodeIterableList67.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList69 = nodeIterableList67.reverse();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList69, 52, node76 };
        java.lang.Object[][] objArray80 = new java.lang.Object[][] { objArray47, objArray63, objArray79 };
        java.lang.Object[][] objArray81 = nodeIterableList31.toArray(objArray80);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList82 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray83 = nodeIterableList82.toArray();
        int int85 = nodeIterableList82.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray86 = nodeIterableList82.toArray();
        boolean boolean87 = nodeIterableList31.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList82);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream88 = nodeIterableList82.parallelStream();
        java.lang.Object[] objArray89 = nodeIterableList82.toArray();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor90 = nodeIterableList82.iterator();
        com.google.common.collect.ImmutableList<java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableItorList91 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.util.RandomAccess> randomAccessList92 = com.google.common.collect.ImmutableList.of((java.util.RandomAccess) nodeIterableList0, (java.util.RandomAccess) nodeIterableList82, (java.util.RandomAccess) nodeIterableItorList91);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList93 = nodeIterableList0.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor94 = nodeIterableList93.iterator();
        java.lang.Object obj95 = null;
        int int96 = nodeIterableList93.lastIndexOf(obj95);
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList93.replaceAll(nodeIterableUnaryOperator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(nodeIterableList35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(nodeIterableList82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor90);
        org.junit.Assert.assertNotNull(nodeIterableItorList91);
        org.junit.Assert.assertNotNull(randomAccessList92);
        org.junit.Assert.assertNotNull(nodeIterableList93);
        org.junit.Assert.assertNotNull(nodeIterableItor94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("OR hi!\n    OR hi!\n");
        jSTypeRegistry1.identifyNonNullableName("{...}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable12 = jSTypeRegistry1.getTypesWithProperty("{353548028}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.isExterns();
        boolean boolean15 = jSDocInfo13.hasReturnType();
        jSDocInfo13.setLicense("hi!");
        int int18 = jSDocInfo13.getImplementedInterfaceCount();
        boolean boolean19 = jSDocInfo13.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo13.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry23.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType36, "");
        boolean boolean39 = objectType36.isEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = objectType45.toObjectType();
        boolean boolean47 = objectType36.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType46);
        boolean boolean48 = objectType46.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType46);
        boolean boolean50 = jSType49.matchesObjectContext();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setReturnsTainted();
        int int59 = nodeIterableList51.lastIndexOf((java.lang.Object) sideEffectFlags56);
        sideEffectFlags56.setAllFlags();
        boolean boolean61 = sideEffectFlags56.areAllFlagsSet();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node34 = objectType19.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isNE();
        boolean boolean43 = node41.isInstanceOf();
        boolean boolean44 = node41.isThrow();
        node41.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable47 = node41.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry49.createAnonymousObjectType();
        objectType57.clearResolved();
        node41.setJSType((com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        com.google.javascript.rhino.Node node69 = node62.getFirstChild();
        boolean boolean70 = node62.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry36.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType57, node62);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType71.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair74 = objectType19.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) functionType71);
        boolean boolean75 = objectType19.isObject();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(ancestorIterable47);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNotNull(typePair74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node17.siblings();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray30 = nodeIterableList29.toArray();
        boolean boolean31 = strSet26.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList29);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean33 = strSet26.remove((java.lang.Object) stringPosition32);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordInterface();
        boolean boolean52 = jSDocInfoBuilder49.recordDescription("hi!");
        boolean boolean53 = jSDocInfoBuilder49.recordHiddenness();
        boolean boolean54 = strSet45.remove((java.lang.Object) jSDocInfoBuilder49);
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList55 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet26, (java.util.HashSet<java.lang.String>) strSet45);
        java.lang.Object obj56 = null;
        boolean boolean57 = strSet45.contains(obj56);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet45);
        node2.setString("{2096563892}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSetList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        int int4 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node5 = typePosition0.getItem();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        com.google.javascript.rhino.Node node7 = typePosition0.getItem();
        int int8 = typePosition0.getStartLine();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.jstype.JSType jSType26 = objectType6.getTypeOfThis();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot28 = objectType6.getSlot("Not declared as a constructor");
        boolean boolean29 = objectType6.isObject();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = objectType35.toObjectType();
        boolean boolean37 = objectType36.matchesInt32Context();
        boolean boolean38 = objectType36.isStringValueType();
        boolean boolean39 = objectType36.canBeCalled();
        boolean boolean40 = objectType36.isAllType();
        boolean boolean41 = objectType36.isStringObjectType();
        com.google.javascript.rhino.jstype.JSType jSType43 = objectType36.getRestrictedTypeGivenToBooleanOutcome(false);
        java.lang.String str44 = objectType36.toString();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType36.unboxesTo();
        boolean boolean46 = objectType6.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        boolean boolean53 = jSTypeRegistry48.canPropertyBeDefined(jSType51, "Unknown class name");
        jSTypeRegistry48.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry48.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        boolean boolean63 = jSTypeRegistry58.canPropertyBeDefined(jSType61, "Unknown class name");
        jSTypeRegistry58.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry58.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67, false);
        jSTypeRegistry69.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType76 = jSTypeRegistry72.createObjectType(objectType75);
        com.google.javascript.rhino.jstype.ObjectType objectType77 = objectType76.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot79 = objectType76.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry69.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType76);
        com.google.javascript.rhino.ErrorReporter errorReporter81 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry82 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter81);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode83 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry82.setResolveMode(resolveMode83);
        com.google.javascript.rhino.jstype.ObjectType objectType85 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry82.createObjectType(objectType85);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType87 = objectType86.toMaybeEnumElementType();
        boolean boolean88 = jSTypeRegistry58.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType76, objectType86);
        com.google.javascript.rhino.jstype.JSType jSType89 = jSTypeRegistry48.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType76);
        boolean boolean90 = jSType89.isNominalConstructor();
        boolean boolean91 = jSType89.isRecordType();
        boolean boolean92 = objectType6.isSubtype(jSType89);
        boolean boolean93 = objectType6.isNullable();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNull(jSTypeStaticSlot28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{...}" + "'", str44, "{...}");
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertNull(jSTypeStaticSlot79);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + resolveMode83 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode83.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNull(enumElementType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        jSTypeRegistry1.incrementGeneration();
        boolean boolean45 = jSTypeRegistry1.hasNamespace("java.io.IOException: OR hi!\n    OR hi!\n");
        jSTypeRegistry1.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry49.createAnonymousObjectType();
        objectType57.clearResolved();
        boolean boolean59 = objectType57.isConstructor();
        boolean boolean60 = objectType57.isEnumType();
        boolean boolean61 = objectType57.isRegexpType();
        boolean boolean62 = jSTypeRegistry1.declareType("java.io.IOException: java.io.IOException: Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray63 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry1.createUnionType(jSTypeNativeArray63);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative65 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry1.getNativeType(jSTypeNative65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jSTypeNativeArray63);
        org.junit.Assert.assertNotNull(jSType64);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isVoid();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isTypeOf();
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node27);
        com.google.javascript.rhino.Node node30 = node17.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node30.setStaticSourceFile(staticSourceFile31);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean43 = node38.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node44 = node38.cloneNode();
        boolean boolean45 = node38.isEmpty();
        com.google.javascript.rhino.Node node46 = node30.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoIfMissingFrom(node46);
        boolean boolean48 = node5.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isNE();
        boolean boolean53 = node51.isInstanceOf();
        boolean boolean54 = node51.isThrow();
        boolean boolean55 = node51.isWhile();
        boolean boolean56 = node51.isIf();
        boolean boolean57 = node5.isEquivalentTo(node51);
        boolean boolean58 = node5.isWhile();
        int int59 = node5.getCharno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasType();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("java.io.IOException: OR hi! [directives: []]\n");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode10);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry9.createObjectType(objectType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = objectType13.toObjectType();
        boolean boolean15 = objectType14.matchesInt32Context();
        boolean boolean16 = objectType14.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        boolean boolean37 = jSTypeRegistry32.canPropertyBeDefined(jSType35, "Unknown class name");
        jSTypeRegistry32.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry32.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType45, "");
        boolean boolean48 = jSType47.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = objectType30.testForEquality(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType47.collapseUnion();
        boolean boolean51 = objectType23.differsFrom(jSType47);
        boolean boolean52 = jSType47.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType53 = objectType14.getGreatestSubtype(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType53.findPropertyType("OR hi! [directives: []]\n");
        java.lang.String str56 = jSType53.toAnnotationString();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair57 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, jSType53);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType53.autoboxesTo();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "?" + "'", str56, "?");
        org.junit.Assert.assertNull(jSType58);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder18.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder18.recordReturnType(jSTypeExpression26);
        boolean boolean29 = jSDocInfoBuilder18.recordDeprecationReason("Not declared as a constructor");
        boolean boolean30 = jSDocInfoBuilder18.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.addAuthor("");
        boolean boolean35 = jSDocInfoBuilder32.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder32.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        jSDocInfoBuilder40.markName("", staticSourceFile48, 29, 50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isSyntheticBlock();
        boolean boolean62 = node54.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node54, "Unknown class name");
        boolean boolean66 = jSDocInfoBuilder40.recordThrowDescription(jSTypeExpression64, "?");
        boolean boolean67 = jSDocInfoBuilder32.recordExtendedInterface(jSTypeExpression64);
        boolean boolean68 = jSDocInfoBuilder18.recordDefineType(jSTypeExpression64);
        boolean boolean69 = jSDocInfoBuilder18.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder71 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder71.recordInterface();
        boolean boolean74 = jSDocInfoBuilder71.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = null;
        boolean boolean76 = jSDocInfoBuilder71.recordTypedef(jSTypeExpression75);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node80, "");
        boolean boolean83 = jSTypeExpression82.isVarArgs();
        boolean boolean84 = jSDocInfoBuilder71.recordDefineType(jSTypeExpression82);
        boolean boolean85 = jSDocInfoBuilder18.recordTypedef(jSTypeExpression82);
        boolean boolean86 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression82);
        boolean boolean87 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor3 = nodeIterableList0.listIterator();
        int int4 = nodeIterableItor3.nextIndex();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor3.set(nodeIterable5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        boolean boolean34 = nodeIterableList0.equals((java.lang.Object) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList35 = nodeIterableList0.asList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = nodeIterableList0.subList(43, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (43) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableList35);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream53 = nodeIterableList2.parallelStream();
        boolean boolean54 = nodeIterableList2.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor55 = nodeIterableList2.listIterator();
        boolean boolean56 = nodeIterableItor55.hasNext();
        boolean boolean57 = nodeIterableItor55.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = nodeIterableItor55.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR hi! 0\n");
        boolean boolean2 = node1.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node1.getAncestor((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node5.setJSType(jSType11);
        boolean boolean13 = node5.isOptionalArg();
        boolean boolean14 = node5.isAdd();
        boolean boolean15 = node5.isCase();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node5.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry5.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = objectType9.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot12 = objectType9.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean14 = jSType13.hasDisplayName();
        boolean boolean15 = jSType13.isNumberValueType();
        boolean boolean16 = jSType13.isParameterizedType();
        boolean boolean17 = jSType13.isUnknownType();
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertNull(jSTypeStaticSlot12);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType10 = jSTypeRegistry1.getType("{1923315740}");
        boolean boolean11 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nSTRING INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: STRING INSTANCEOF\n");
        java.lang.String str3 = node2.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "BITXOR Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nSTRING INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: STRING INSTANCEOF\n" + "'", str3, "BITXOR Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nSTRING INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: STRING INSTANCEOF\n");
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        boolean boolean5 = strSet3.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList4);
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet3.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSpliterator6);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition18);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList21 = com.google.common.collect.ImmutableList.of(namePosition20);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition26);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition28 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList29 = com.google.common.collect.ImmutableList.of(namePosition15, namePosition16, namePosition17, namePosition18, namePosition20, namePosition22, namePosition23, namePosition24, namePosition25, namePosition26, namePosition28);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition32 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition33);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition35 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList36 = com.google.common.collect.ImmutableList.of(namePosition35);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition41 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList42 = com.google.common.collect.ImmutableList.of(namePosition41);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList44 = com.google.common.collect.ImmutableList.of(namePosition30, namePosition31, namePosition32, namePosition33, namePosition35, namePosition37, namePosition38, namePosition39, namePosition40, namePosition41, namePosition43);
        int int45 = namePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition49 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList50 = com.google.common.collect.ImmutableList.of(namePosition49);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition51 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList52 = com.google.common.collect.ImmutableList.of(namePosition51);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition54 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition55 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition56 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition57 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList58 = com.google.common.collect.ImmutableList.of(namePosition57);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition59 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList60 = com.google.common.collect.ImmutableList.of(namePosition46, namePosition47, namePosition48, namePosition49, namePosition51, namePosition53, namePosition54, namePosition55, namePosition56, namePosition57, namePosition59);
        int int61 = namePosition53.getPositionOnEndLine();
        com.google.javascript.rhino.Node node62 = namePosition53.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition65 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList67 = com.google.common.collect.ImmutableList.of(namePosition66);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition68);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition70 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition71 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition72 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition73 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition74 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList75 = com.google.common.collect.ImmutableList.of(namePosition74);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition76 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList77 = com.google.common.collect.ImmutableList.of(namePosition63, namePosition64, namePosition65, namePosition66, namePosition68, namePosition70, namePosition71, namePosition72, namePosition73, namePosition74, namePosition76);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList78 = com.google.common.collect.ImmutableList.of(namePosition7, namePosition18, namePosition33, namePosition53, namePosition74);
        // The following exception was thrown during execution in test generation
        try {
            namePosition7.setPositionInformation((int) '4', (int) ' ', 29, 8202);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 52?end-line: 29");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertNotNull(namePositionList21);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList29);
        org.junit.Assert.assertNotNull(namePositionList34);
        org.junit.Assert.assertNotNull(namePositionList36);
        org.junit.Assert.assertNotNull(namePositionList42);
        org.junit.Assert.assertNotNull(namePositionList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(namePositionList50);
        org.junit.Assert.assertNotNull(namePositionList52);
        org.junit.Assert.assertNotNull(namePositionList58);
        org.junit.Assert.assertNotNull(namePositionList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(namePositionList67);
        org.junit.Assert.assertNotNull(namePositionList69);
        org.junit.Assert.assertNotNull(namePositionList75);
        org.junit.Assert.assertNotNull(namePositionList77);
        org.junit.Assert.assertNotNull(namePositionList78);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        int int11 = node2.getIntProp((int) (short) 1);
        java.lang.String str12 = node2.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str12, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = node2.cloneNode();
        boolean boolean7 = node2.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        boolean boolean16 = node10.isDec();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        boolean boolean26 = node19.isVoid();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isTypeOf();
        com.google.javascript.rhino.Node node31 = node19.srcrefTree(node29);
        int int32 = node10.getIndexOfChild(node29);
        boolean boolean33 = node10.isAdd();
        node10.setType((int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node2.useSourceInfoIfMissingFrom(node10);
        boolean boolean37 = node10.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType13.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope15 = objectType13.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType16 = objectType5.resolve(errorReporter6, jSTypeStaticScope15);
        com.google.javascript.rhino.jstype.JSType jSType18 = jSType16.findPropertyType("{640911743}");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNull(jSType18);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        java.lang.String str6 = node2.toStringTree();
        boolean boolean7 = node2.isQualifiedName();
        boolean boolean8 = node2.isOnlyModifiesThisCall();
        node2.setCharno(31);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR hi!\n" + "'", str6, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isVoid();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isTypeOf();
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node27);
        com.google.javascript.rhino.Node node30 = node17.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node30.setStaticSourceFile(staticSourceFile31);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean43 = node38.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node44 = node38.cloneNode();
        boolean boolean45 = node38.isEmpty();
        com.google.javascript.rhino.Node node46 = node30.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoIfMissingFrom(node46);
        boolean boolean48 = node5.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isNE();
        boolean boolean53 = node51.isInstanceOf();
        boolean boolean54 = node51.isThrow();
        boolean boolean55 = node51.isWhile();
        boolean boolean56 = node51.isIf();
        boolean boolean57 = node5.isEquivalentTo(node51);
        boolean boolean58 = node5.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.UnionType unionType17 = objectType14.toMaybeUnionType();
        boolean boolean18 = objectType14.matchesObjectContext();
        boolean boolean19 = objectType14.hasAnyTemplate();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry21.createObjectType(objectType24);
        boolean boolean26 = objectType25.isNominalConstructor();
        boolean boolean27 = objectType25.isNullable();
        objectType14.matchConstraint(objectType25);
        com.google.javascript.rhino.Node node29 = objectType25.getRootNode();
        boolean boolean30 = objectType25.isOrdinaryFunction();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNull(unionType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("{764597585}", 29, 4095);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(54, node4, 8, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(50);
        node9.setSourceFileForTesting("{1559619413}");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node12 = node7.removeChildAfter(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        int int24 = strSet21.size();
        strSet21.clear();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        boolean boolean33 = jSTypeRegistry28.canPropertyBeDefined(jSType31, "Unknown class name");
        jSTypeRegistry28.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry28.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType41, "");
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType41.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean46 = objectType41.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType48 = objectType41.getRestrictedTypeGivenToBooleanOutcome(false);
        node2.setJSType((com.google.javascript.rhino.jstype.JSType) objectType41);
        node2.putBooleanProp((int) (short) 10, true);
        boolean boolean53 = node2.isTypeOf();
        boolean boolean54 = node2.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        boolean boolean60 = node58.isDelProp();
        boolean boolean61 = node58.isNoSideEffectsCall();
        java.lang.String str65 = node58.toString(true, false, true);
        boolean boolean66 = nodeIterableList0.contains((java.lang.Object) node58);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node72.isNot();
        int int76 = node72.getLineno();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean83 = node82.isThis();
        node79.addChildToBack(node82);
        boolean boolean85 = node82.isNot();
        int int86 = node82.getLineno();
        com.google.javascript.rhino.Node node87 = node72.srcref(node82);
        boolean boolean88 = node87.isDelProp();
        boolean boolean90 = node87.getBooleanProp(0);
        boolean boolean91 = node87.isDo();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = nodeIterableList0.remove((java.lang.Object) boolean91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR hi!" + "'", str65, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        boolean boolean5 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType19 = jSType16.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSType16.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType21 = objectType20.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType20.dereference();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = objectType20.getPossibleToBooleanOutcomes();
        boolean boolean24 = objectType20.isUnknownType();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        boolean boolean32 = objectType31.matchesInt32Context();
        boolean boolean33 = objectType31.isBooleanValueType();
        boolean boolean34 = objectType31.matchesObjectContext();
        boolean boolean35 = objectType20.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.jstype.JSType jSType37 = objectType20.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope38 = objectType20.getParentScope();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        boolean boolean46 = objectType44.isTemplateType();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        boolean boolean53 = jSTypeRegistry48.canPropertyBeDefined(jSType51, "Unknown class name");
        jSTypeRegistry48.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        com.google.javascript.rhino.jstype.JSType jSType63 = jSTypeRegistry48.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType61, "");
        boolean boolean64 = jSType63.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        boolean boolean71 = jSTypeRegistry66.canPropertyBeDefined(jSType69, "Unknown class name");
        jSTypeRegistry66.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry75.createObjectType(objectType78);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry66.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType79, "");
        boolean boolean82 = jSType81.isInstanceType();
        boolean boolean83 = jSType81.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType81.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSType81.dereference();
        boolean boolean86 = jSType81.isFunctionType();
        boolean boolean87 = jSType63.canTestForShallowEqualityWith(jSType81);
        boolean boolean88 = objectType44.isSubtype(jSType63);
        boolean boolean89 = objectType20.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType44);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertNull(jSTypeStaticScope38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder43.addReference("Not declared as a type name");
        jSDocInfoBuilder43.recordOriginalCommentString("Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        boolean boolean81 = jSDocInfoBuilder43.recordDescription("java.io.IOException: OR hi!\n    OR hi!\n");
        jSDocInfoBuilder43.markText("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nASSIGN_MOD INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: ASSIGN_MOD INSTANCEOF\n", 44, 31, 5, 0);
        boolean boolean88 = jSDocInfoBuilder43.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        jSTypeRegistry21.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType38.toMaybeEnumElementType();
        boolean boolean40 = jSTypeRegistry10.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType28, objectType38);
        boolean boolean42 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType28, "OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot44 = objectType28.getOwnSlot("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        boolean boolean51 = jSTypeRegistry46.canPropertyBeDefined(jSType49, "Unknown class name");
        jSTypeRegistry46.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry46.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType59, "");
        com.google.javascript.rhino.jstype.JSType jSType63 = objectType59.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean64 = objectType59.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType66 = objectType59.getRestrictedTypeGivenToBooleanOutcome(false);
        boolean boolean67 = objectType28.canTestForEqualityWith(jSType66);
        com.google.javascript.rhino.Node node68 = objectType28.getRootNode();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot44);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node4.isDebugger();
        boolean boolean11 = node4.isVoid();
        boolean boolean12 = node4.hasOneChild();
        boolean boolean13 = node4.isLabelName();
        java.lang.String str14 = node4.getQualifiedName();
        com.google.javascript.rhino.Node node15 = node1.useSourceInfoFromForTree(node4);
        int int16 = node4.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR hi! is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry23.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry33.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        jSTypeRegistry44.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = objectType51.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot54 = objectType51.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry44.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType62 = objectType61.toMaybeEnumElementType();
        boolean boolean63 = jSTypeRegistry33.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType51, objectType61);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry23.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType51);
        boolean boolean65 = nodeIterableList0.equals((java.lang.Object) jSTypeRegistry23);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node72.isDebugger();
        boolean boolean79 = node72.isVoid();
        boolean boolean80 = node72.isOptionalArg();
        int int81 = node68.getIndexOfChild(node72);
        boolean boolean82 = nodeIterableList0.contains((java.lang.Object) node72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = nodeIterableList0.remove((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNull(jSTypeStaticSlot54);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNull(enumElementType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.String str12 = node11.toStringTree();
        boolean boolean13 = node11.isNE();
        boolean boolean14 = node11.isLocalResultCall();
        int int16 = node11.getIntProp(46);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(31);
        com.google.javascript.rhino.Node node19 = node11.srcref(node18);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList24 = com.google.common.collect.ImmutableList.of(namePosition23);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList26 = com.google.common.collect.ImmutableList.of(namePosition25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition28 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition29 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList32 = com.google.common.collect.ImmutableList.of(namePosition31);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21, namePosition22, namePosition23, namePosition25, namePosition27, namePosition28, namePosition29, namePosition30, namePosition31, namePosition33);
        int int35 = namePosition23.getEndLine();
        int int36 = namePosition23.getStartLine();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node42.isNot();
        int int46 = node42.getLineno();
        boolean boolean47 = node42.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node42.setJSType(jSType48);
        namePosition23.setItem(node42);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean61 = node56.isEquivalentToTyped(node60);
        com.google.javascript.rhino.Node node62 = node56.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean73 = node68.isEquivalentToTyped(node72);
        com.google.javascript.rhino.Node node74 = node68.cloneNode();
        boolean boolean75 = node68.isEmpty();
        boolean boolean76 = node56.hasChild(node68);
        namePosition23.setItem(node56);
        com.google.javascript.rhino.Node node78 = node56.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node11.removeChild(node56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR hi!\n" + "'", str12, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(namePositionList24);
        org.junit.Assert.assertNotNull(namePositionList26);
        org.junit.Assert.assertNotNull(namePositionList32);
        org.junit.Assert.assertNotNull(namePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        boolean boolean16 = objectType15.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope17 = objectType15.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType18 = objectType15.toMaybeUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        boolean boolean26 = objectType25.matchesInt32Context();
        boolean boolean27 = objectType25.isStringValueType();
        boolean boolean28 = objectType25.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair35 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType25, (com.google.javascript.rhino.jstype.JSType) objectType34);
        boolean boolean36 = objectType25.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType43 = objectType42.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        boolean boolean51 = objectType42.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = objectType57.toObjectType();
        boolean boolean59 = objectType58.matchesInt32Context();
        boolean boolean60 = objectType58.isStringValueType();
        boolean boolean61 = objectType58.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair68 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType58, (com.google.javascript.rhino.jstype.JSType) objectType67);
        boolean boolean69 = objectType58.isAllType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList70 = com.google.common.collect.ImmutableList.of(objectType15, objectType25, objectType49, objectType58);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry1.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType15, "", "{}", 0, (int) ' ');
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node77 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope17);
        org.junit.Assert.assertNull(unionType18);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNull(enumElementType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectTypeList70);
        org.junit.Assert.assertNotNull(jSType75);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet15);
        node6.putBooleanProp(0, false);
        typePosition0.setItem(node6);
        boolean boolean22 = node6.isFromExterns();
        node6.removeProp(49);
        boolean boolean25 = node6.hasChildren();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(36, "{1604895782}");
        boolean boolean3 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        boolean boolean14 = node9.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node9.setJSType(jSType15);
        boolean boolean17 = node9.isOptionalArg();
        boolean boolean18 = node9.isNumber();
        boolean boolean19 = node9.isLabelName();
        com.google.javascript.rhino.Node node20 = node2.copyInformationFromForTree(node9);
        boolean boolean21 = node2.isTypeOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("{764597585}");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        boolean boolean23 = jSType16.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType22);
        boolean boolean24 = jSType16.isNoType();
        boolean boolean25 = jSType16.isBooleanObjectType();
        boolean boolean26 = jSType16.isBooleanValueType();
        java.lang.String str27 = jSType16.toDebugHashCodeString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "function (this:me, {1021599910}): me" + "'", str27, "function (this:me, {1021599910}): me");
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        jSDocInfoBuilder1.markText("OR []", 0, 54, (int) (short) 1, 42);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean15 = jSDocInfoBuilder1.recordBlockDescription("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable32 = jSTypeRegistry28.getTypesWithProperty("INSTANCEOF");
        java.util.List<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters(jSTypeList33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable32);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isDebugger();
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("");
        java.lang.String str6 = inputId5.getIdName();
        node2.setInputId(inputId5);
        boolean boolean8 = node2.isTypeOf();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        boolean boolean13 = node11.isDelProp();
        int int14 = node11.getChildCount();
        boolean boolean15 = node11.isComma();
        boolean boolean16 = node11.isNoSideEffectsCall();
        boolean boolean17 = node11.isSetterDef();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node25 = node11.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node26 = node2.useSourceInfoFrom(node23);
        int int27 = node2.getType();
        boolean boolean28 = node2.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        int int62 = nodeIterableItor61.previousIndex();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor61.set(nodeIterable63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        java.lang.Object[] objArray61 = nodeIterableList53.toArray();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor62 = nodeIterableList53.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor63 = nodeIterableList53.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor62);
        org.junit.Assert.assertNotNull(nodeIterableItor63);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isAssign();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node17, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node28 = node5.srcrefTree(node27);
        int int29 = node28.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node28.children();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isVoid();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isTypeOf();
        com.google.javascript.rhino.Node node45 = node33.srcrefTree(node43);
        boolean boolean46 = node45.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry48.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean57 = node52.isEquivalentToTyped(node56);
        com.google.javascript.rhino.Node node58 = node52.cloneNode();
        com.google.javascript.rhino.InputId inputId59 = node52.getInputId();
        boolean boolean60 = node45.hasChild(node52);
        boolean boolean61 = node52.isWhile();
        com.google.javascript.rhino.Node node62 = node28.clonePropsFrom(node52);
        boolean boolean63 = node52.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(inputId59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isDelProp();
        int int6 = node3.getChildCount();
        java.lang.String str7 = node3.toStringTree();
        boolean boolean8 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(50, node3, 12, 38);
        boolean boolean12 = node11.isDelProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node11, "Node tree inequality:\nTree1:\nOR hi! [directives: []]\n\n\nTree2:\nNUMBER 100.0 0\n    OR hi!\n\n\nSubtree1: OR hi! [directives: []]\n\n\nSubtree2: NUMBER 100.0 0\n    OR hi!\n");
        boolean boolean15 = jSTypeExpression14.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR hi!\n" + "'", str7, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isNE();
        boolean boolean29 = node27.isInstanceOf();
        boolean boolean30 = node27.isThrow();
        node27.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node27.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry35.createAnonymousObjectType();
        objectType43.clearResolved();
        node27.setJSType((com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node48.isDebugger();
        com.google.javascript.rhino.Node node55 = node48.getFirstChild();
        boolean boolean56 = node48.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType57 = jSTypeRegistry22.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType43, node48);
        boolean boolean58 = jSTypeRegistry11.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry1.createAnonymousObjectType();
        boolean boolean68 = objectType67.isFunctionType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(functionType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        node5.removeProp(1);
        boolean boolean10 = node5.isInc();
        java.lang.String str11 = node5.getString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordInterface();
        boolean boolean9 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean12 = jSDocInfoBuilder7.recordVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        java.lang.String str14 = jSDocInfo0.getBlockDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        com.google.javascript.rhino.Node node9 = node2.getFirstChild();
        boolean boolean10 = node2.isNot();
        boolean boolean11 = node2.isIn();
        boolean boolean12 = node2.isAssign();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node2.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node2.isDebugger();
        node2.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        com.google.javascript.rhino.Node node16 = node2.getNext();
        boolean boolean17 = node2.isThis();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder19.recordConstancy();
        boolean boolean27 = jSDocInfoBuilder19.recordOverride();
        jSDocInfoBuilder19.markName("None", 5, 0);
        java.lang.String[] strArray34 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        boolean boolean37 = strSet35.isEmpty();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node54.siblings();
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray67 = nodeIterableList66.toArray();
        boolean boolean68 = strSet63.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList69 = com.google.common.collect.ImmutableList.of(strSet35, strSet49, strSet63);
        boolean boolean70 = jSDocInfoBuilder19.recordModifies((java.util.Set<java.lang.String>) strSet63);
        java.lang.Object obj71 = null;
        boolean boolean72 = strSet63.contains(obj71);
        int int73 = strSet63.size();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo75.getType();
        boolean boolean78 = jSDocInfo75.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo75.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList80 = jSDocInfo75.getImplementedInterfaces();
        java.lang.String str81 = jSDocInfo75.getReturnDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList82 = jSDocInfo75.getImplementedInterfaces();
        boolean boolean83 = strSet63.contains((java.lang.Object) jSDocInfo75);
        java.lang.String str84 = jSDocInfo75.getBlockDescription();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSetList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(jSTypeExpressionList80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(jSTypeExpressionList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean9 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean16 = jSDocInfoBuilder11.recordVisibility(visibility15);
        boolean boolean18 = jSDocInfoBuilder11.recordLends("OR hi!\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder11.recordImplementedInterface(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder11.recordNoShadow();
        boolean boolean22 = jSDocInfoBuilder11.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        boolean boolean28 = jSDocInfoBuilder24.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder24.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder24.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder24.recordReturnType(jSTypeExpression32);
        boolean boolean35 = jSDocInfoBuilder24.recordDeprecationReason("Not declared as a constructor");
        boolean boolean36 = jSDocInfoBuilder24.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.addAuthor("");
        boolean boolean41 = jSDocInfoBuilder38.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder38.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder46.addAuthor("");
        boolean boolean49 = jSDocInfoBuilder46.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = null;
        boolean boolean51 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression50);
        boolean boolean52 = jSDocInfoBuilder46.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder46.markName("", staticSourceFile54, 29, 50);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node60.isDebugger();
        boolean boolean67 = node60.isSyntheticBlock();
        boolean boolean68 = node60.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node60, "Unknown class name");
        boolean boolean72 = jSDocInfoBuilder46.recordThrowDescription(jSTypeExpression70, "?");
        boolean boolean73 = jSDocInfoBuilder38.recordExtendedInterface(jSTypeExpression70);
        boolean boolean74 = jSDocInfoBuilder24.recordDefineType(jSTypeExpression70);
        boolean boolean75 = jSDocInfoBuilder24.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordTypedef(jSTypeExpression81);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = new com.google.javascript.rhino.JSTypeExpression(node86, "");
        boolean boolean89 = jSTypeExpression88.isVarArgs();
        boolean boolean90 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression88);
        boolean boolean91 = jSDocInfoBuilder24.recordTypedef(jSTypeExpression88);
        boolean boolean92 = jSDocInfoBuilder11.recordReturnType(jSTypeExpression88);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression88);
        boolean boolean95 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression88, "{40754700}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isExterns();
        int int7 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        boolean boolean9 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isAssign();
        boolean boolean10 = node2.isInstanceOf();
        boolean boolean11 = node2.isTry();
        boolean boolean12 = node2.isDelProp();
        boolean boolean13 = node2.isDo();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        node19.removeProp(1);
        java.lang.String str27 = node19.toString(true, false, true);
        boolean boolean28 = node19.isLocalResultCall();
        boolean boolean29 = node19.isVarArgs();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isVoid();
        boolean boolean40 = node32.hasOneChild();
        com.google.javascript.rhino.InputId inputId41 = node32.getInputId();
        boolean boolean42 = node32.hasChildren();
        node32.addSuppression("OR hi! 0\n");
        boolean boolean45 = node32.isVar();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildBefore(node19, node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi!" + "'", str27, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        jSDocInfo0.addSuppression("OR PARAM_LIST");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        java.io.IOException iOException1 = new java.io.IOException("Unknown class name");
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        boolean boolean12 = jSTypeRegistry7.canPropertyBeDefined(jSType10, "Unknown class name");
        jSTypeRegistry7.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry7.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry17.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isNE();
        boolean boolean35 = node33.isInstanceOf();
        boolean boolean36 = node33.isThrow();
        node33.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node33.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        boolean boolean46 = jSTypeRegistry41.canPropertyBeDefined(jSType44, "Unknown class name");
        jSTypeRegistry41.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry41.createAnonymousObjectType();
        objectType49.clearResolved();
        node33.setJSType((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        com.google.javascript.rhino.Node node61 = node54.getFirstChild();
        boolean boolean62 = node54.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType63 = jSTypeRegistry28.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType49, node54);
        boolean boolean64 = jSTypeRegistry17.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node72 = jSTypeRegistry7.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry75.createObjectType(objectType78);
        boolean boolean80 = objectType79.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter81 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry82 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter81);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode83 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry82.setResolveMode(resolveMode83);
        com.google.javascript.rhino.jstype.ObjectType objectType85 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry82.createObjectType(objectType85);
        com.google.javascript.rhino.jstype.ObjectType objectType87 = objectType86.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair88 = objectType79.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType86);
        com.google.javascript.rhino.jstype.JSType jSType89 = objectType79.collapseUnion();
        boolean boolean90 = objectType79.isNullType();
        boolean boolean91 = objectType79.isNumber();
        boolean boolean93 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType79, "GETELEM");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(functionType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + resolveMode83 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode83.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertNotNull(typePair88);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("OR hi!\n    OR hi!\n");
        boolean boolean12 = jSDocInfoBuilder1.addReference("InputId: ");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isDebugger();
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("");
        java.lang.String str19 = inputId18.getIdName();
        node15.setInputId(inputId18);
        boolean boolean21 = node15.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node15, "STRING INSTANCEOF 50");
        boolean boolean24 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        objectType18.clearResolved();
        node2.setJSType((com.google.javascript.rhino.jstype.JSType) objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = node2.getJSType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType22 = jSType21.toMaybeEnumElementType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType23 = enumElementType22.toObjectType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertNull(enumElementType22);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = nodeIterableList0.contains((java.lang.Object) boolean43);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream45 = nodeIterableList0.parallelStream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = nodeIterableList0.reverse();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableStream45);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("");
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("OR hi!\n    OR hi!\n");
        jSTypeRegistry1.identifyNonNullableName("{...}");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry12.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        boolean boolean23 = jSTypeRegistry18.canPropertyBeDefined(jSType21, "Unknown class name");
        jSTypeRegistry18.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry18.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        jSTypeRegistry29.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = objectType36.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot39 = objectType36.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType47 = objectType46.toMaybeEnumElementType();
        boolean boolean48 = jSTypeRegistry18.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType36, objectType46);
        com.google.javascript.rhino.jstype.JSType jSType50 = objectType36.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node51 = objectType36.getRootNode();
        boolean boolean52 = objectType36.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        boolean boolean59 = objectType58.isNominalConstructor();
        boolean boolean60 = jSTypeRegistry12.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType36, objectType58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node64.isDebugger();
        com.google.javascript.rhino.Node node71 = node64.getFirstChild();
        boolean boolean72 = node64.isNot();
        boolean boolean73 = node64.isIn();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node77.isDebugger();
        boolean boolean84 = node77.isAssign();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(51, node77, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable88 = node87.getAncestors();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(1, node64, node87, 54, 10);
        java.lang.String str92 = node64.toString();
        boolean boolean93 = node64.isDelProp();
        com.google.javascript.rhino.jstype.FunctionType functionType94 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node64);
        jSTypeRegistry1.setLastGeneration(false);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNull(jSTypeStaticSlot39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNull(enumElementType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(ancestorIterable88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "OR hi!" + "'", str92, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(functionType94);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        boolean boolean34 = nodeIterableList0.equals((java.lang.Object) nodeIterableList23);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor35 = nodeIterableList23.iterator();
        java.lang.String str36 = nodeIterableList23.toString();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        jSDocInfoBuilder1.markAnnotation("{1765065943}", (int) (short) 0, 83);
        boolean boolean66 = jSDocInfoBuilder1.recordDeprecationReason("{102630937}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(36, "hi!", 38, 48);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        boolean boolean12 = jSTypeRegistry7.canPropertyBeDefined(jSType10, "Unknown class name");
        jSTypeRegistry7.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = objectType20.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry23.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType36, "");
        boolean boolean39 = jSType38.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = objectType21.testForEquality(jSType38);
        com.google.javascript.rhino.jstype.JSType jSType41 = jSType38.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry7.createNullableType(jSType38);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = objectType48.toObjectType();
        boolean boolean50 = objectType49.matchesInt32Context();
        boolean boolean51 = objectType49.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        boolean boolean58 = jSTypeRegistry53.canPropertyBeDefined(jSType56, "Unknown class name");
        jSTypeRegistry53.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry53.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType66, "");
        com.google.javascript.rhino.jstype.UnionType unionType69 = objectType66.toMaybeUnionType();
        com.google.javascript.rhino.Node node70 = objectType66.getRootNode();
        boolean boolean71 = objectType66.isRegexpType();
        boolean boolean72 = jSTypeRegistry7.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType66);
        node4.putProp(39, (java.lang.Object) objectType49);
        objectType49.clearResolved();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(unionType69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType6 = objectType5.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType5.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType21 = objectType20.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = objectType27.toObjectType();
        boolean boolean29 = objectType20.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType5, (com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.JSType jSType31 = objectType5.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSType31.getJSDocInfo();
        boolean boolean33 = jSType31.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        jSTypeRegistry35.forwardDeclareType("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        boolean boolean47 = jSTypeRegistry42.canPropertyBeDefined(jSType45, "Unknown class name");
        jSTypeRegistry42.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry42.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType55, "");
        boolean boolean58 = jSType57.isInstanceType();
        boolean boolean59 = jSType57.isNumber();
        jSTypeRegistry35.unregisterPropertyOnType("{1078264502}", jSType57);
        boolean boolean61 = jSType57.isNullType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair62 = jSType31.getTypesUnderInequality(jSType57);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        boolean boolean69 = jSTypeRegistry64.canPropertyBeDefined(jSType67, "Unknown class name");
        jSTypeRegistry64.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode74 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry73.setResolveMode(resolveMode74);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry73.createObjectType(objectType76);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry64.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType77, "");
        com.google.javascript.rhino.jstype.UnionType unionType80 = objectType77.toMaybeUnionType();
        boolean boolean81 = objectType77.matchesObjectContext();
        boolean boolean82 = objectType77.hasAnyTemplate();
        boolean boolean83 = objectType77.isNullType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair84 = jSType57.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType77);
        com.google.javascript.rhino.jstype.JSType jSType85 = typePair84.typeA;
        boolean boolean86 = jSType85.isResolved();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNull(enumElementType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(enumElementType21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(typePair62);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + resolveMode74 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode74.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(unionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(typePair84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry24.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType37, "");
        boolean boolean40 = jSType39.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType39.collapseUnion();
        boolean boolean43 = objectType15.differsFrom(jSType39);
        boolean boolean44 = jSType39.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType6.getGreatestSubtype(jSType39);
        boolean boolean46 = objectType6.isConstructor();
        boolean boolean47 = objectType6.isNullable();
        boolean boolean48 = objectType6.isNoType();
        com.google.javascript.rhino.jstype.TemplateType templateType49 = objectType6.toMaybeTemplateType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.EnumType enumType50 = templateType49.toMaybeEnumType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(templateType49);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor5 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = nodeIterableList0.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream7 = nodeIterableList0.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = nodeIterableList0.remove(4098);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(nodeIterableItor5);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(nodeIterableStream7);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setThrows();
        int int5 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean16 = node11.isEquivalentToTyped(node15);
        com.google.javascript.rhino.Node node17 = node11.cloneNode();
        com.google.javascript.rhino.InputId inputId18 = node11.getInputId();
        boolean boolean19 = node11.isLabelName();
        com.google.javascript.rhino.Node node20 = node2.srcref(node11);
        boolean boolean21 = node2.isInc();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        boolean boolean27 = jSDocInfoBuilder23.recordHiddenness();
        boolean boolean28 = jSDocInfoBuilder23.recordExpose();
        boolean boolean29 = jSDocInfoBuilder23.recordIdGenerator();
        boolean boolean31 = jSDocInfoBuilder23.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression32);
        jSDocInfoBuilder23.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean36 = jSDocInfoBuilder23.recordImplicitCast();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        node40.putBooleanProp(0, false);
        node40.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean57 = node40.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node40.getStaticSourceFile();
        int int60 = staticSourceFile58.getLineOfOffset(53);
        jSDocInfoBuilder23.markName("TYPEOF hi!", staticSourceFile58, 52, 0);
        java.lang.String str64 = staticSourceFile58.getName();
        node2.setStaticSourceFile(staticSourceFile58);
        boolean boolean66 = staticSourceFile58.isExtern();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str64, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.isPopulated();
        boolean boolean9 = jSDocInfoBuilder1.hasParameter("{1604895782}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope8 = objectType6.getParentScope();
        boolean boolean9 = objectType6.isString();
        boolean boolean10 = objectType6.isNumber();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry21.createObjectType(objectType24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = objectType25.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        boolean boolean33 = jSTypeRegistry28.canPropertyBeDefined(jSType31, "Unknown class name");
        jSTypeRegistry28.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry28.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType41, "");
        boolean boolean44 = jSType43.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = objectType26.testForEquality(jSType43);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSType43.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry12.createNullableType(jSType43);
        boolean boolean48 = jSType43.isTemplateType();
        java.lang.String str49 = jSType43.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        boolean boolean56 = jSTypeRegistry51.canPropertyBeDefined(jSType54, "Unknown class name");
        jSTypeRegistry51.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = objectType64.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode68 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry67.setResolveMode(resolveMode68);
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        boolean boolean72 = jSTypeRegistry67.canPropertyBeDefined(jSType70, "Unknown class name");
        jSTypeRegistry67.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry76.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry67.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType80, "");
        boolean boolean83 = jSType82.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = objectType65.testForEquality(jSType82);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSType82.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType86 = jSTypeRegistry51.createNullableType(jSType82);
        boolean boolean87 = jSType82.isTemplateType();
        java.lang.String str88 = jSType82.toString();
        boolean boolean89 = jSType82.isNoType();
        boolean boolean90 = jSType82.isParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType82.autoboxesTo();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair92 = jSType43.getTypesUnderInequality(jSType82);
        boolean boolean93 = jSType43.isBooleanObjectType();
        com.google.javascript.rhino.jstype.JSType jSType94 = objectType6.getLeastSupertype(jSType43);
        boolean boolean95 = objectType6.isOrdinaryFunction();
        boolean boolean96 = objectType6.isEnumElementType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "None" + "'", str49, "None");
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + resolveMode68 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode68.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "None" + "'", str88, "None");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNotNull(typePair92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        node16.setOptionalArg(false);
        com.google.javascript.rhino.Node node21 = node2.srcref(node16);
        boolean boolean22 = node16.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet15);
        node6.putBooleanProp(0, false);
        typePosition0.setItem(node6);
        int int22 = typePosition0.getEndLine();
        int int23 = typePosition0.getStartLine();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "None", 2, 32);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node6.siblings();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node21.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = ancestorIterable22.spliterator();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean34 = nodeIterableList33.add(nodeIterable7);
        boolean boolean35 = nodeIterableList33.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable22);
        boolean boolean36 = nodeIterableList33.add(nodeIterable32);
        java.lang.Object[] objArray37 = nodeIterableList33.toArray();
        java.lang.Object[] objArray38 = nodeIterableList33.toArray();
        boolean boolean39 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList0.listIterator();
        boolean boolean41 = nodeIterableItor40.hasPrevious();
        int int42 = nodeIterableItor40.previousIndex();
        boolean boolean43 = nodeIterableItor40.hasPrevious();
        boolean boolean44 = nodeIterableItor40.hasNext();
        com.google.common.collect.ImmutableList<java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableItorList45 = com.google.common.collect.ImmutableList.of((java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableItor40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = nodeIterableItor40.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableItorList45);
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("INSTANCEOF");
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        node12.putBooleanProp(0, false);
        node12.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean29 = node12.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node12.getStaticSourceFile();
        boolean boolean31 = staticSourceFile30.isExtern();
        java.lang.String str32 = staticSourceFile30.getName();
        int int34 = staticSourceFile30.getLineOfOffset(8);
        jSDocInfoBuilder1.markName("OR hi! [source_file: ]\n    OR hi!\n", staticSourceFile30, 143360, 48);
        boolean boolean38 = staticSourceFile30.isExtern();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str32, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "{...}", "INSTANCEOF", "JSDocInfo", "", "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", "[]");
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList18);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        boolean boolean27 = jSTypeRegistry22.canPropertyBeDefined(jSType25, "Unknown class name");
        jSTypeRegistry22.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry22.getType("[]");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        boolean boolean39 = objectType38.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope40 = objectType38.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType41 = objectType38.toMaybeUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = objectType47.toObjectType();
        boolean boolean49 = objectType48.matchesInt32Context();
        boolean boolean50 = objectType48.isStringValueType();
        boolean boolean51 = objectType48.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair58 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType48, (com.google.javascript.rhino.jstype.JSType) objectType57);
        boolean boolean59 = objectType48.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType66 = objectType65.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = objectType72.toObjectType();
        boolean boolean74 = objectType65.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType72);
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry76.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.ObjectType objectType81 = objectType80.toObjectType();
        boolean boolean82 = objectType81.matchesInt32Context();
        boolean boolean83 = objectType81.isStringValueType();
        boolean boolean84 = objectType81.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode87 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry86.setResolveMode(resolveMode87);
        com.google.javascript.rhino.jstype.ObjectType objectType89 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType90 = jSTypeRegistry86.createObjectType(objectType89);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair91 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType81, (com.google.javascript.rhino.jstype.JSType) objectType90);
        boolean boolean92 = objectType81.isAllType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList93 = com.google.common.collect.ImmutableList.of(objectType38, objectType48, objectType72, objectType81);
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection94 = jSTypeRegistry22.getDirectImplementors(objectType48);
        jSTypeRegistry1.unregisterPropertyOnType("", (com.google.javascript.rhino.jstype.JSType) objectType48);
        jSTypeRegistry1.incrementGeneration();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope40);
        org.junit.Assert.assertNull(unionType41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(enumElementType66);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + resolveMode87 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode87.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectTypeList93);
        org.junit.Assert.assertNotNull(functionTypeCollection94);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        node42.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node56.isNot();
        int int60 = node56.getLineno();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        boolean boolean69 = node66.isNot();
        int int70 = node66.getLineno();
        com.google.javascript.rhino.Node node71 = node56.srcref(node66);
        int int72 = node56.getCharno();
        com.google.javascript.rhino.Node node73 = node42.copyInformationFrom(node56);
        boolean boolean74 = node42.isTrue();
        boolean boolean75 = node42.isCase();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(52, node42);
        com.google.javascript.rhino.Node node77 = node37.srcrefTree(node76);
        boolean boolean78 = node37.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INSTANCEOF" + "'", str38, "INSTANCEOF");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        node1.setIsSyntheticBlock(true);
        node1.setString("{1005943596}");
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING {1005943596} [synthetic: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        boolean boolean9 = jSTypeRegistry4.canPropertyBeDefined(jSType7, "Unknown class name");
        jSTypeRegistry4.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType17, "");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry21.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType34, "");
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        boolean boolean43 = jSTypeRegistry38.canPropertyBeDefined(jSType41, "Unknown class name");
        jSTypeRegistry38.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry38.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType51, "");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        boolean boolean60 = jSTypeRegistry55.canPropertyBeDefined(jSType58, "Unknown class name");
        jSTypeRegistry55.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType68 = jSTypeRegistry64.createObjectType(objectType67);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry55.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType68, "");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry72.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType85, "");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray88 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, objectType51, objectType68, objectType85 };
        com.google.javascript.rhino.jstype.FunctionType functionType89 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSType19, jSTypeArray88);
        boolean boolean90 = jSType19.isNullable();
        boolean boolean91 = jSType19.isOrdinaryFunction();
        jSType19.clearResolved();
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(jSTypeArray88);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        node16.putBooleanProp(0, false);
        node16.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean33 = node16.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node16.getStaticSourceFile();
        int int36 = staticSourceFile34.getLineOffset(40);
        java.lang.String str37 = staticSourceFile34.getName();
        java.lang.String str38 = staticSourceFile34.getName();
        java.lang.String str39 = staticSourceFile34.getName();
        jSDocInfoBuilder1.markName("java.io.IOException: Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n", staticSourceFile34, 16, 0);
        java.lang.String str43 = staticSourceFile34.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2147483648) + "'", int36 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str37, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str38, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str39, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str43, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor13 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("{247883875}", 0, 8202);
        boolean boolean19 = nodeIterableList0.contains((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor21 = nodeIterableList0.listIterator(8202);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (8202) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor13);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "{764597585}");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        boolean boolean11 = node8.isNot();
        int int12 = node8.getLineno();
        boolean boolean13 = node8.isAdd();
        com.google.javascript.rhino.Node node14 = node8.cloneTree();
        java.lang.Object obj16 = node14.getProp((int) (byte) 0);
        int int17 = node14.getChildCount();
        boolean boolean18 = node14.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node19 = node2.srcref(node14);
        java.lang.String str20 = node19.getSourceFileName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry12.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isNE();
        boolean boolean30 = node28.isInstanceOf();
        boolean boolean31 = node28.isThrow();
        node28.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node28.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        boolean boolean41 = jSTypeRegistry36.canPropertyBeDefined(jSType39, "Unknown class name");
        jSTypeRegistry36.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry36.createAnonymousObjectType();
        objectType44.clearResolved();
        node28.setJSType((com.google.javascript.rhino.jstype.JSType) objectType44);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node49.isDebugger();
        com.google.javascript.rhino.Node node56 = node49.getFirstChild();
        boolean boolean57 = node49.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry23.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType44, node49);
        boolean boolean59 = jSTypeRegistry12.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType44);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry61.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry12.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList71 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList71, jSTypeArray70);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry69.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean78 = node73.isEquivalentToTyped(node77);
        com.google.javascript.rhino.Node node79 = node73.cloneNode();
        java.lang.Object obj81 = node73.getProp((int) (short) 1);
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode84 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry83.setResolveMode(resolveMode84);
        com.google.javascript.rhino.jstype.JSType jSType86 = null;
        boolean boolean88 = jSTypeRegistry83.canPropertyBeDefined(jSType86, "Unknown class name");
        jSTypeRegistry83.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType91 = jSTypeRegistry83.createAnonymousObjectType();
        objectType91.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType94 = objectType91.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean95 = objectType91.isNullType();
        com.google.javascript.rhino.jstype.ObjectType objectType96 = jSTypeRegistry12.createObjectType("[]", node73, objectType91);
        boolean boolean97 = node73.isAssign();
        jSDocInfo0.setAssociatedNode(node73);
        boolean boolean99 = node73.isNumber();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + resolveMode84 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode84.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 51);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable3 = jSTypeRegistry1.getEachReferenceTypeWithProperty("{858171436}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry25.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType38, "");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        boolean boolean47 = jSTypeRegistry42.canPropertyBeDefined(jSType45, "Unknown class name");
        jSTypeRegistry42.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry42.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType55, "");
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        jSTypeRegistry59.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry59.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType72, "");
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        boolean boolean81 = jSTypeRegistry76.canPropertyBeDefined(jSType79, "Unknown class name");
        jSTypeRegistry76.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter84 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry85 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter84);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode86 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry85.setResolveMode(resolveMode86);
        com.google.javascript.rhino.jstype.ObjectType objectType88 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry85.createObjectType(objectType88);
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry76.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType89, "");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray92 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, objectType55, objectType72, objectType89 };
        com.google.javascript.rhino.jstype.FunctionType functionType93 = jSTypeRegistry6.createFunctionTypeWithVarArgs(jSType23, jSTypeArray92);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList94 = com.google.common.collect.ImmutableList.of((java.io.Serializable[]) jSTypeArray92);
        com.google.javascript.rhino.Node node95 = jSTypeRegistry1.createParameters(jSTypeArray92);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable96 = node95.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor97 = ancestorIterable96.iterator();
        org.junit.Assert.assertNotNull(objectTypeIterable3);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + resolveMode86 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode86.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNotNull(jSTypeArray92);
        org.junit.Assert.assertNotNull(functionType93);
        org.junit.Assert.assertNotNull(serializableList94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(ancestorIterable96);
        org.junit.Assert.assertNotNull(nodeItor97);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList20.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = nodeIterableList36.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList37.subList(45, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (45) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(nodeIterableList37);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean12 = jSDocInfoBuilder1.recordReturnDescription("{599635391}");
        boolean boolean14 = jSDocInfoBuilder1.recordLends("GETELEM");
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        boolean boolean4 = node3.isOr();
        boolean boolean5 = node3.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markText("[]", 1, 10, (int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordParameter("Unknown class name", jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("{764597585}", 12, 45);
        jSDocInfoBuilder1.markTypeNode(node17, 39, 5, 8202, 36, false);
        boolean boolean24 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo25.getType();
        boolean boolean28 = jSDocInfo25.isNoTypeCheck();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection30 = jSDocInfo25.getMarkers();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList32 = visibilityEnumBuilder31.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection33 = visibilityEnumBuilder31.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean37 = jSDocInfoBuilder35.recordVisibility(visibility36);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        jSDocInfo25.setVisibility(visibility36);
        boolean boolean40 = jSDocInfoBuilder1.recordVisibility(visibility36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(markerCollection30);
        org.junit.Assert.assertNotNull(visibilityEnumList32);
        org.junit.Assert.assertNotNull(visibilityEnumCollection33);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.hasParameter("OR hi!\n");
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        boolean boolean8 = jSDocInfo0.isOverride();
        jSDocInfo0.setDeprecated(true);
        boolean boolean11 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        boolean boolean7 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean8 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder10.recordThisType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder10.isPopulated();
        boolean boolean20 = jSDocInfoBuilder10.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean22 = jSDocInfoBuilder10.recordDescription("OR hi! [directives: []]\n");
        boolean boolean23 = jSDocInfoBuilder10.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean27 = jSDocInfoBuilder25.recordPreserveTry();
        boolean boolean28 = jSDocInfoBuilder25.isJavaDispatch();
        boolean boolean29 = jSDocInfoBuilder25.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        boolean boolean42 = jSDocInfoBuilder31.recordDeprecationReason("Not declared as a constructor");
        boolean boolean43 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.addAuthor("");
        boolean boolean48 = jSDocInfoBuilder45.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder45.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder53.addAuthor("");
        boolean boolean56 = jSDocInfoBuilder53.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression57);
        boolean boolean59 = jSDocInfoBuilder53.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder53.markName("", staticSourceFile61, 29, 50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        boolean boolean74 = node67.isSyntheticBlock();
        boolean boolean75 = node67.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node67, "Unknown class name");
        boolean boolean79 = jSDocInfoBuilder53.recordThrowDescription(jSTypeExpression77, "?");
        boolean boolean80 = jSDocInfoBuilder45.recordExtendedInterface(jSTypeExpression77);
        boolean boolean81 = jSDocInfoBuilder31.recordDefineType(jSTypeExpression77);
        boolean boolean83 = jSDocInfoBuilder25.recordThrowDescription(jSTypeExpression77, "?");
        boolean boolean84 = jSDocInfoBuilder10.recordExtendedInterface(jSTypeExpression77);
        boolean boolean85 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode10);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry9.createObjectType(objectType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = objectType13.toObjectType();
        boolean boolean15 = objectType14.matchesInt32Context();
        boolean boolean16 = objectType14.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        boolean boolean37 = jSTypeRegistry32.canPropertyBeDefined(jSType35, "Unknown class name");
        jSTypeRegistry32.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry32.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType45, "");
        boolean boolean48 = jSType47.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = objectType30.testForEquality(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType47.collapseUnion();
        boolean boolean51 = objectType23.differsFrom(jSType47);
        boolean boolean52 = jSType47.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType53 = objectType14.getGreatestSubtype(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType53.findPropertyType("OR hi! [directives: []]\n");
        java.lang.String str56 = jSType53.toAnnotationString();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair57 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, jSType53);
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        jSTypeRegistry59.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry59.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        jSTypeRegistry70.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode74 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry73.setResolveMode(resolveMode74);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry73.createObjectType(objectType76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = objectType77.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot80 = objectType77.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry70.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType77);
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode84 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry83.setResolveMode(resolveMode84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry83.createObjectType(objectType86);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType88 = objectType87.toMaybeEnumElementType();
        boolean boolean89 = jSTypeRegistry59.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType77, objectType87);
        boolean boolean90 = com.google.javascript.rhino.jstype.JSType.isEquivalent(jSType53, (com.google.javascript.rhino.jstype.JSType) objectType77);
        java.lang.String str91 = jSType53.getDisplayName();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "?" + "'", str56, "?");
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + resolveMode74 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode74.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNull(jSTypeStaticSlot80);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertTrue("'" + resolveMode84 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode84.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertNull(enumElementType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node3 = node2.getLastChild();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDebugger();
        com.google.javascript.rhino.Node node13 = node6.getFirstChild();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFrom(node13);
        node14.setType(8202);
        boolean boolean17 = node14.isAdd();
        boolean boolean18 = node14.isFalse();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(2, node14);
        boolean boolean20 = node14.isTypeOf();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray28 = nodeIterableList27.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = nodeIterableList27.reverse();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList29, 52, node36 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray44 = nodeIterableList43.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList43.reverse();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList45, 52, node52 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray60 = nodeIterableList59.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList61 = nodeIterableList59.reverse();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList61, 52, node68 };
        java.lang.Object[][] objArray72 = new java.lang.Object[][] { objArray39, objArray55, objArray71 };
        java.lang.Object[][] objArray73 = nodeIterableList23.toArray(objArray72);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray75 = nodeIterableList74.toArray();
        int int77 = nodeIterableList74.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray78 = nodeIterableList74.toArray();
        boolean boolean79 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList74);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream80 = nodeIterableList74.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo81.getSuppressions();
        boolean boolean83 = jSDocInfo81.isNoSideEffects();
        boolean boolean84 = jSDocInfo81.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo81.getReturnType();
        boolean boolean86 = jSDocInfo81.isNoAlias();
        boolean boolean87 = nodeIterableList74.contains((java.lang.Object) jSDocInfo81);
        boolean boolean88 = jSDocInfo81.shouldPreserveTry();
        boolean boolean89 = jSDocInfo81.hasFileOverview();
        node14.setJSDocInfo(jSDocInfo81);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(nodeIterableList74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream80);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        boolean boolean5 = jSTypeRegistry1.isForwardDeclaredType("");
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        boolean boolean12 = jSTypeRegistry7.canPropertyBeDefined(jSType10, "Unknown class name");
        jSTypeRegistry7.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry7.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType20, "");
        jSTypeRegistry7.identifyNonNullableName("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        boolean boolean25 = jSTypeRegistry7.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry27.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        jSTypeRegistry38.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = objectType45.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot48 = objectType45.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType45);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType56 = objectType55.toMaybeEnumElementType();
        boolean boolean57 = jSTypeRegistry27.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType45, objectType55);
        com.google.javascript.rhino.jstype.JSType jSType59 = objectType45.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean60 = jSType59.isBooleanValueType();
        boolean boolean61 = jSType59.isNoObjectType();
        boolean boolean62 = jSType59.hasDisplayName();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node68.isNot();
        int int72 = node68.getLineno();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        boolean boolean81 = node78.isNot();
        int int82 = node78.getLineno();
        com.google.javascript.rhino.Node node83 = node68.srcref(node78);
        int int84 = node68.getCharno();
        com.google.javascript.rhino.Node node86 = node68.getAncestor((int) (short) 1);
        com.google.javascript.rhino.jstype.FunctionType functionType87 = jSTypeRegistry7.createFunctionType(jSType59, node86);
        boolean boolean88 = jSType59.matchesInt32Context();
        boolean boolean89 = jSType59.isArrayType();
        com.google.javascript.rhino.jstype.JSType jSType90 = jSTypeRegistry1.createDefaultObjectUnion(jSType59);
        boolean boolean91 = jSType59.hasAnyTemplate();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNull(jSTypeStaticSlot48);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNull(enumElementType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(functionType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jSType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "None", "{1078264502}", "OR hi! [directives: []]\n", "{1078264502}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        boolean boolean23 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean24 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.addAuthor("");
        boolean boolean29 = jSDocInfoBuilder26.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder26.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder26.markName("", staticSourceFile34, 29, 50);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean56 = jSDocInfoBuilder53.recordDescription("hi!");
        boolean boolean57 = jSDocInfoBuilder53.recordHiddenness();
        boolean boolean58 = strSet49.remove((java.lang.Object) jSDocInfoBuilder53);
        boolean boolean59 = jSDocInfoBuilder53.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder61.addAuthor("");
        boolean boolean64 = jSDocInfoBuilder61.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = null;
        boolean boolean66 = jSDocInfoBuilder61.recordThrowType(jSTypeExpression65);
        boolean boolean67 = jSDocInfoBuilder61.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        jSDocInfoBuilder61.markName("", staticSourceFile69, 29, 50);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        boolean boolean81 = node75.isDebugger();
        boolean boolean82 = node75.isSyntheticBlock();
        boolean boolean83 = node75.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node75, "Unknown class name");
        boolean boolean87 = jSDocInfoBuilder61.recordThrowDescription(jSTypeExpression85, "?");
        boolean boolean88 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression85);
        boolean boolean89 = jSDocInfoBuilder26.recordEnumParameterType(jSTypeExpression85);
        boolean boolean90 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression85);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = null;
        boolean boolean93 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression91, "java.io.IOException: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean22 = node17.isEquivalentToTyped(node21);
        com.google.javascript.rhino.Node node23 = node17.cloneNode();
        boolean boolean24 = node17.isEmpty();
        boolean boolean25 = node5.hasChild(node17);
        boolean boolean26 = node17.isDelProp();
        java.lang.String str27 = node17.getSourceFileName();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordInterface();
        boolean boolean11 = jSDocInfoBuilder8.recordDescription("hi!");
        boolean boolean12 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder8.recordExpose();
        boolean boolean14 = jSDocInfoBuilder8.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder8.recordParameter("OR hi! [directives: []]\n", jSTypeExpression16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = visibilityEnumBuilder19.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility20);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility20);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility23);
        boolean boolean25 = jSDocInfoBuilder8.recordVisibility(visibility23);
        jSDocInfo0.setVisibility(visibility23);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder18);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        boolean boolean40 = node39.isAssignAdd();
        int int41 = node2.getIndexOfChild(node39);
        node39.setLength((int) (byte) 100);
        boolean boolean44 = node39.isIn();
        boolean boolean45 = node39.isSetterDef();
        boolean boolean46 = node39.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        java.lang.Object[] objArray2 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = nodeIterableList0.contains((java.lang.Object) jSTypeExpression5);
        boolean boolean7 = nodeIterableList0.isEmpty();
        java.lang.Object[] objArray8 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList9.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream12 = nodeIterableList9.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor13 = nodeIterableList9.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.isExport();
        boolean boolean19 = jSDocInfo14.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection21 = jSDocInfo14.getMarkers();
        java.lang.String str22 = jSDocInfo14.getSourceName();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo14.getReferences();
        boolean boolean24 = nodeIterableList9.contains((java.lang.Object) jSDocInfo14);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor26 = nodeIterableList9.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = nodeIterableList0.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(nodeIterableStream12);
        org.junit.Assert.assertNotNull(nodeIterableItor13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNotNull(markerCollection21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor26);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setReturnsTainted();
        int int59 = nodeIterableList51.lastIndexOf((java.lang.Object) sideEffectFlags56);
        sideEffectFlags56.setAllFlags();
        sideEffectFlags56.setMutatesThis();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.clearAllFlags();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        boolean boolean68 = jSDocInfoBuilder1.hasParameter("OR hi! 0\n");
        boolean boolean69 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean70 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean72 = jSDocInfoBuilder1.recordDeprecationReason("{264702338}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType13.matchesInt32Context();
        boolean boolean15 = objectType13.isStringValueType();
        boolean boolean16 = objectType13.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair23 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType13, (com.google.javascript.rhino.jstype.JSType) objectType22);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType13);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        boolean boolean32 = objectType31.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope33 = objectType31.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType34 = objectType13.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType31);
        boolean boolean35 = jSType34.isEmptyType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope33);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        jSTypeRegistry1.resetForTypeCheck();
        jSTypeRegistry1.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] { objectType28 };
        com.google.javascript.rhino.Node node31 = jSTypeRegistry15.createParametersWithVarArgs(jSTypeArray30);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry1.createUnionType(jSTypeArray30);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry1.getType("{}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable36 = jSTypeRegistry1.getTypesWithProperty("{1458992068}");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(jSTypeIterable36);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator7 = nodeIterableList0.spliterator();
        boolean boolean8 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor9 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean20 = nodeIterableList19.add(nodeIterable18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList35 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray36 = nodeIterableList35.toArray();
        boolean boolean37 = strSet32.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList35);
        java.lang.Object[] objArray38 = nodeIterableList35.toArray();
        boolean boolean39 = nodeIterableList35.isEmpty();
        boolean boolean40 = nodeIterableList19.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList35);
        boolean boolean41 = nodeIterableList35.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = nodeIterableList0.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeIterableList35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry17.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType30, "");
        boolean boolean33 = jSType32.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = objectType15.testForEquality(jSType32);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSType32.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry1.createNullableType(jSType32);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        boolean boolean44 = objectType43.matchesInt32Context();
        boolean boolean45 = objectType43.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        com.google.javascript.rhino.jstype.UnionType unionType63 = objectType60.toMaybeUnionType();
        com.google.javascript.rhino.Node node64 = objectType60.getRootNode();
        boolean boolean65 = objectType60.isRegexpType();
        boolean boolean66 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType43, objectType60);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry1.createNamedType("OR hi!", "Not declared as a type name", 40, 3);
        boolean boolean72 = jSType71.isNoObjectType();
        boolean boolean73 = jSType71.isNominalConstructor();
        boolean boolean74 = jSType71.isRegexpType();
        boolean boolean75 = jSType71.matchesUint32Context();
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode78 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry77.setResolveMode(resolveMode78);
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        boolean boolean82 = jSTypeRegistry77.canPropertyBeDefined(jSType80, "Unknown class name");
        jSTypeRegistry77.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode87 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry86.setResolveMode(resolveMode87);
        com.google.javascript.rhino.jstype.ObjectType objectType89 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType90 = jSTypeRegistry86.createObjectType(objectType89);
        com.google.javascript.rhino.jstype.JSType jSType92 = jSTypeRegistry77.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType90, "");
        com.google.javascript.rhino.jstype.JSType jSType94 = objectType90.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType94.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType96 = jSType71.getLeastSupertype(jSType94);
        boolean boolean97 = jSType94.isNumberValueType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(unionType63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + resolveMode78 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode78.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + resolveMode87 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode87.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertNotNull(jSType92);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR hi! [source_file: ]\n    OR hi!\n", (int) ' ', 3);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("java.io.IOException: OR hi!\n    OR hi!\n");
        java.lang.String str2 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: OR hi!\n    OR hi!\n" + "'", str2, "java.io.IOException: OR hi!\n    OR hi!\n");
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        boolean boolean25 = jSType23.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType26 = jSType23.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSType23.dereference();
        boolean boolean28 = jSType23.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, jSType23);
        boolean boolean30 = jSType23.matchesUint32Context();
        boolean boolean31 = jSType23.isCheckedUnknownType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("{1078264502}");
        boolean boolean17 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!\n    OR hi!\n");
        boolean boolean18 = jSDocInfoBuilder1.recordInterface();
        boolean boolean19 = jSDocInfoBuilder1.isPopulated();
        boolean boolean20 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 47);
        jSDocInfoBuilder1.markTypeNode(node22, (-1), 47, 0, 5, false);
        boolean boolean30 = jSDocInfoBuilder1.recordMeaning("OR hi! [input_id: InputId: ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(46, "{1597675613}");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression22);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isAdd();
        boolean boolean33 = node29.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = jSDocInfoBuilder15.build(node29);
        int int35 = node29.getSourcePosition();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSType23.collapseUnion();
        boolean boolean27 = jSType26.isUnionType();
        boolean boolean28 = jSType26.isOrdinaryFunction();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isNE();
        boolean boolean37 = node35.isInstanceOf();
        boolean boolean38 = node35.isThrow();
        node35.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node35.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        boolean boolean48 = jSTypeRegistry43.canPropertyBeDefined(jSType46, "Unknown class name");
        jSTypeRegistry43.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry43.createAnonymousObjectType();
        objectType51.clearResolved();
        node35.setJSType((com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node56.isDebugger();
        com.google.javascript.rhino.Node node63 = node56.getFirstChild();
        boolean boolean64 = node56.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType65 = jSTypeRegistry30.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType51, node56);
        boolean boolean66 = objectType51.isArrayType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot68 = objectType51.getSlot("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType.TypePair typePair69 = jSType26.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.Node node70 = objectType51.getRootNode();
        boolean boolean71 = objectType51.isEnumType();
        boolean boolean72 = objectType51.isNominalType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(ancestorIterable41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(functionType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot68);
        org.junit.Assert.assertNotNull(typePair69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        boolean boolean11 = node5.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isIf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node17.useSourceInfoFromForTree(node41);
        boolean boolean48 = node5.hasChild(node41);
        node41.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node51 = node41.cloneTree();
        boolean boolean52 = node41.wasEmptyNode();
        boolean boolean53 = node41.isNE();
        com.google.javascript.rhino.Node node54 = node41.getFirstChild();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        boolean boolean64 = nodeIterableList63.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList63.asList();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList65.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableList65);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator4 = nodeIterableList3.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream6 = nodeIterableList3.parallelStream();
        boolean boolean7 = nodeIterableList3.isEmpty();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.siblings();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        boolean boolean24 = strSet19.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList22);
        java.lang.Object[] objArray25 = nodeIterableList22.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream26 = nodeIterableList22.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = nodeIterableList22.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean31 = jSDocInfoBuilder29.isInterfaceRecorded();
        boolean boolean32 = jSDocInfoBuilder29.recordIdGenerator();
        boolean boolean33 = nodeIterableList27.contains((java.lang.Object) boolean32);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        jSTypeRegistry36.clearNamedTypes();
        boolean boolean38 = nodeIterableList27.contains((java.lang.Object) jSTypeRegistry36);
        jSTypeRegistry36.clearTemplateTypeNames();
        jSTypeRegistry36.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        boolean boolean44 = jSTypeRegistry36.declareType("java.io.IOException: OR hi!\n    OR hi!\n", jSType43);
        boolean boolean46 = jSTypeRegistry36.isForwardDeclaredType("OR hi! [var_args_name: 1]\n");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = nodeIterableList47.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream50 = nodeIterableList47.stream();
        java.lang.String[] strArray52 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray53 = nodeIterableList47.toArray(strArray52);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator54 = nodeIterableList47.spliterator();
        boolean boolean55 = nodeIterableList47.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        boolean boolean62 = objectType61.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        boolean boolean69 = jSTypeRegistry64.canPropertyBeDefined(jSType67, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode72 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry71.setResolveMode(resolveMode72);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry71.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = objectType75.toObjectType();
        boolean boolean77 = objectType76.matchesInt32Context();
        boolean boolean78 = objectType76.isStringValueType();
        boolean boolean79 = objectType76.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair86 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType76, (com.google.javascript.rhino.jstype.JSType) objectType85);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry64.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType76);
        com.google.javascript.rhino.jstype.FunctionType functionType88 = jSType87.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair89 = objectType61.getTypesUnderInequality(jSType87);
        boolean boolean90 = objectType61.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType jSType91 = objectType61.getTypeOfThis();
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray92 = new com.google.javascript.rhino.jstype.ObjectType[] { objectType61 };
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray93 = nodeIterableList47.toArray(objectTypeArray92);
        com.google.javascript.rhino.Node node94 = jSTypeRegistry36.createParameters((com.google.javascript.rhino.jstype.JSType[]) objectTypeArray93);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>[] jSTypeStaticScopeArray95 = nodeIterableList3.toArray((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>[]) objectTypeArray93);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor96 = nodeIterableList3.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator4);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream26);
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(nodeIterableStream50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + resolveMode72 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode72.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNull(functionType88);
        org.junit.Assert.assertNotNull(typePair89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNotNull(objectTypeArray92);
        org.junit.Assert.assertNotNull(objectTypeArray93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(jSTypeStaticScopeArray95);
        org.junit.Assert.assertNotNull(nodeIterableItor96);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream5 = nodeIterableList0.stream();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor6 = nodeIterableList0.iterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(nodeIterableStream5);
        org.junit.Assert.assertNotNull(nodeIterableItor6);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        boolean boolean34 = nodeIterableList0.equals((java.lang.Object) nodeIterableList23);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor35 = nodeIterableList23.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream36 = nodeIterableList23.parallelStream();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList23.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor38 = nodeIterableList23.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        boolean boolean41 = jSDocInfo39.isOverride();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo39.getModifies();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[][] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[][] { jSTypeArray43, jSTypeArray44, jSTypeArray45, jSTypeArray46, jSTypeArray47, jSTypeArray48 };
        com.google.javascript.rhino.jstype.JSType[][] jSTypeArray50 = strSet42.toArray(jSTypeArray49);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray60 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition54, typePosition55, typePosition56, typePosition57, typePosition58, typePosition59 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray61 = nodeIterableList51.toArray(typePositionArray60);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor62 = nodeIterableList51.iterator();
        java.lang.Object[] objArray63 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node67.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean75 = nodeIterableList74.add(nodeIterable73);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean82 = node81.isThis();
        node78.addChildToBack(node81);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node78.siblings();
        java.lang.String[] strArray86 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        node78.setDirectives((java.util.Set<java.lang.String>) strSet87);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList90 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray91 = nodeIterableList90.toArray();
        boolean boolean92 = strSet87.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList90);
        java.lang.Object[] objArray93 = nodeIterableList90.toArray();
        boolean boolean94 = nodeIterableList90.isEmpty();
        boolean boolean95 = nodeIterableList74.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList90);
        boolean boolean96 = nodeIterableList64.equals((java.lang.Object) nodeIterableList74);
        boolean boolean97 = nodeIterableList51.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList74);
        boolean boolean98 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        boolean boolean99 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor35);
        org.junit.Assert.assertNotNull(nodeIterableStream36);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(nodeIterableItor38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(typePositionArray60);
        org.junit.Assert.assertNotNull(typePositionArray61);
        org.junit.Assert.assertNotNull(nodeIterableItor62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(nodeIterableList90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        boolean boolean63 = jSType62.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = objectType45.testForEquality(jSType62);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType62.collapseUnion();
        boolean boolean66 = objectType38.differsFrom(jSType62);
        boolean boolean67 = jSType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry1.createOptionalType(jSType62);
        boolean boolean70 = jSTypeRegistry1.isForwardDeclaredType("Not declared as a constructor");
        jSTypeRegistry1.identifyNonNullableName("{2116767362}");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative73 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry1.getNativeObjectType(jSTypeNative73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Unknown class name");
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        jSTypeRegistry1.forwardDeclareType("Unknown class name");
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry8.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        jSTypeRegistry19.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry22.createObjectType(objectType25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = objectType26.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot29 = objectType26.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType26);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType37 = objectType36.toMaybeEnumElementType();
        boolean boolean38 = jSTypeRegistry8.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType26, objectType36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = objectType36.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType36, "");
        jSTypeRegistry1.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isNE();
        boolean boolean52 = node50.isInstanceOf();
        boolean boolean53 = node50.isThrow();
        node50.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable56 = node50.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        boolean boolean63 = jSTypeRegistry58.canPropertyBeDefined(jSType61, "Unknown class name");
        jSTypeRegistry58.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry58.createAnonymousObjectType();
        objectType66.clearResolved();
        node50.setJSType((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node71.isDebugger();
        com.google.javascript.rhino.Node node78 = node71.getFirstChild();
        boolean boolean79 = node71.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry45.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType66, node71);
        boolean boolean81 = objectType66.isArrayType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot83 = objectType66.getSlot("Not declared as a type name");
        jSTypeRegistry1.unregisterPropertyOnType("{1005943596}", (com.google.javascript.rhino.jstype.JSType) objectType66);
        jSTypeRegistry1.clearNamedTypes();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNull(jSTypeStaticSlot29);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNull(enumElementType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot83);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isNE();
        boolean boolean66 = node64.isInstanceOf();
        boolean boolean67 = node64.isThrow();
        node64.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable70 = node64.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable70);
        boolean boolean72 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node75.siblings();
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        node75.setDirectives((java.util.Set<java.lang.String>) strSet84);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList87 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray88 = nodeIterableList87.toArray();
        boolean boolean89 = strSet84.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList87);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList90 = com.google.common.collect.ImmutableList.of();
        boolean boolean91 = strSet84.contains((java.lang.Object) nodeIterableList90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = nodeIterableList71.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList90);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(ancestorIterable70);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(nodeIterableList87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(nodeIterableList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node64.siblings();
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet73);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList76 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray77 = nodeIterableList76.toArray();
        boolean boolean78 = strSet73.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList76);
        java.lang.Object[] objArray79 = nodeIterableList76.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream80 = nodeIterableList76.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList81 = nodeIterableList76.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder83 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean84 = jSDocInfoBuilder83.recordInterface();
        boolean boolean85 = jSDocInfoBuilder83.isInterfaceRecorded();
        boolean boolean86 = jSDocInfoBuilder83.recordIdGenerator();
        boolean boolean87 = nodeIterableList81.contains((java.lang.Object) boolean86);
        boolean boolean88 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList81);
        java.io.IOException iOException89 = new java.io.IOException();
        java.io.IOException iOException90 = new java.io.IOException((java.lang.Throwable) iOException89);
        java.lang.Throwable[] throwableArray91 = iOException89.getSuppressed();
        java.lang.Throwable[] throwableArray92 = nodeIterableList2.toArray(throwableArray91);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList93 = nodeIterableList2.reverse();
        java.lang.Object[] objArray94 = nodeIterableList2.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(nodeIterableList76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream80);
        org.junit.Assert.assertNotNull(nodeIterableList81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(nodeIterableList93);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        int int9 = node2.getLength();
        boolean boolean10 = node2.isDefaultCase();
        java.lang.String str11 = node2.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasType();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean2 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry1.getTypesWithProperty("");
        jSTypeRegistry1.clearNamedTypes();
        boolean boolean6 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType8 = jSTypeRegistry1.getNativeObjectType(jSTypeNative7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 100, 10);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        boolean boolean15 = node10.isAdd();
        node10.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean18 = node10.isDec();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isAssign();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(51, node22, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node33 = node10.srcrefTree(node32);
        int int34 = node33.getLength();
        com.google.javascript.rhino.Node node35 = node4.useSourceInfoFromForTree(node33);
        node33.setType(54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(11, node33, 32, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isNot();
        int int10 = node6.getLineno();
        boolean boolean11 = node6.isAdd();
        com.google.javascript.rhino.Node node12 = node6.cloneTree();
        java.lang.String str13 = node12.toStringTree();
        boolean boolean14 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node17.siblings();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(10, node12, node17, 54, (int) (short) 10);
        boolean boolean32 = node31.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR hi!\n" + "'", str13, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList14.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor21 = nodeIterableList14.iterator();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean32 = nodeIterableList31.add(nodeIterable30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.siblings();
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet44);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        boolean boolean49 = strSet44.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        java.lang.Object[] objArray50 = nodeIterableList47.toArray();
        boolean boolean51 = nodeIterableList47.isEmpty();
        boolean boolean52 = nodeIterableList31.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node55.siblings();
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet64);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList67 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray68 = nodeIterableList67.toArray();
        boolean boolean69 = strSet64.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList67);
        java.lang.Object[] objArray70 = nodeIterableList67.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor71 = nodeIterableList67.listIterator();
        boolean boolean72 = nodeIterableList67.isEmpty();
        boolean boolean73 = nodeIterableList31.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList67);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator74 = nodeIterableList31.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = nodeIterableList14.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(nodeIterableItor21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableList67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator74);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnEndLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getEndLine();
        int int5 = stringPosition0.getEndLine();
        stringPosition0.setItem("function (?, ?, ?, ...[?]): ?");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        boolean boolean6 = jSDocInfo0.isExterns();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream53 = nodeIterableList2.parallelStream();
        boolean boolean54 = nodeIterableList2.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor55 = nodeIterableList2.listIterator();
        int int56 = nodeIterableList2.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor57 = nodeIterableList2.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor58 = nodeIterableList2.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList2.iterator();
        int int60 = nodeIterableList2.size();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor57);
        org.junit.Assert.assertNotNull(nodeIterableItor58);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        boolean boolean12 = jSTypeRegistry7.canPropertyBeDefined(jSType10, "Unknown class name");
        jSTypeRegistry7.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = objectType20.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry23.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType36, "");
        boolean boolean39 = jSType38.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = objectType21.testForEquality(jSType38);
        com.google.javascript.rhino.jstype.JSType jSType41 = jSType38.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry7.createNullableType(jSType38);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = objectType48.toObjectType();
        boolean boolean50 = objectType49.matchesInt32Context();
        boolean boolean51 = objectType49.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        boolean boolean58 = jSTypeRegistry53.canPropertyBeDefined(jSType56, "Unknown class name");
        jSTypeRegistry53.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry53.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType66, "");
        com.google.javascript.rhino.jstype.UnionType unionType69 = objectType66.toMaybeUnionType();
        com.google.javascript.rhino.Node node70 = objectType66.getRootNode();
        boolean boolean71 = objectType66.isRegexpType();
        boolean boolean72 = jSTypeRegistry7.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType66);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry1.createOptionalType((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate74 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = objectType66.setValidator(jSTypePredicate74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(unionType69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(jSType73);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "{764597585}");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        boolean boolean11 = node8.isNot();
        int int12 = node8.getLineno();
        boolean boolean13 = node8.isAdd();
        com.google.javascript.rhino.Node node14 = node8.cloneTree();
        java.lang.Object obj16 = node14.getProp((int) (byte) 0);
        int int17 = node14.getChildCount();
        boolean boolean18 = node14.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node19 = node2.srcref(node14);
        java.util.Set<java.lang.String> strSet20 = node2.getDirectives();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isAdd();
        boolean boolean30 = node26.isAnd();
        boolean boolean31 = node26.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node26.getAncestors();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = node38.isVarArgs();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.Node node56 = node50.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node56.setJSType(jSType57);
        node38.addChildrenToBack(node56);
        com.google.javascript.rhino.Node node60 = node56.getLastSibling();
        boolean boolean61 = node26.isEquivalentTo(node60);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToBack(node60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        objectType9.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType12 = objectType9.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean13 = objectType9.isNoResolvedType();
        boolean boolean14 = objectType9.isArrayType();
        boolean boolean15 = objectType9.isAllType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean6 = jSDocInfoBuilder1.recordLends("None");
        jSDocInfoBuilder1.markName("Unknown class name", 48, 50);
        boolean boolean12 = jSDocInfoBuilder1.recordLends("function (this:me, {10199420}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isSyntheticBlock();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(46);
        boolean boolean21 = node20.isCall();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        node24.detachChildren();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(45, node3, node11, node20, node24, (int) (short) 10, 8);
        boolean boolean40 = node3.isParamList();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node43.siblings();
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet52);
        node43.putBooleanProp(0, false);
        node43.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean60 = node43.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node43.getStaticSourceFile();
        java.lang.String str62 = staticSourceFile61.getName();
        node3.setStaticSourceFile(staticSourceFile61);
        int int65 = staticSourceFile61.getColumnOfOffset(40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(staticSourceFile61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str62, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeRegistry1.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        jSTypeRegistry1.forwardDeclareType("{1592333498}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable12 = jSTypeRegistry1.getEachReferenceTypeWithProperty("OR hi! [directives: []]\n");
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        jSTypeRegistry15.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot25 = objectType22.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = objectType32.toObjectType();
        boolean boolean34 = objectType33.matchesInt32Context();
        boolean boolean35 = objectType33.isStringValueType();
        boolean boolean36 = objectType33.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair43 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType33, (com.google.javascript.rhino.jstype.JSType) objectType42);
        boolean boolean44 = objectType42.isNullable();
        boolean boolean45 = objectType42.isString();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        boolean boolean49 = nodeIterableList47.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder50.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder53.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo56.getVisibility();
        boolean boolean60 = jSDocInfo56.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo56.setVisibility(visibility61);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray63 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility61 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo68.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = jSDocInfo68.getVisibility();
        boolean boolean72 = jSDocInfo68.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo68.setVisibility(visibility73);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray75 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility73 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder77 = visibilityEnumBuilder64.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder78 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray79 = nodeIterableList47.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry81.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        int int86 = nodeIterableList47.lastIndexOf((java.lang.Object) jSTypeList83);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry15.createFunctionType(objectType42, jSType46, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.Node node88 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        int int89 = node88.getCharno();
        com.google.javascript.rhino.Node node90 = node88.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = node90.isFor();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSType8);
        org.junit.Assert.assertNotNull(objectTypeIterable12);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNull(jSTypeStaticSlot25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNull(visibility59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray63);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(visibility71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray75);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder77);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder78);
        org.junit.Assert.assertNotNull(visibilityEnumArray79);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markText("function (this:me, {346588212}): me", (int) (byte) 1, (int) '#', 52, 51);
        boolean boolean18 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean20 = jSDocInfoBuilder1.recordLends("{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList45.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList60 = nodeIterableList45.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = nodeIterableList45.get(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (16) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertNotNull(nodeIterableList60);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression72);
        com.google.javascript.rhino.Node node79 = jSTypeExpression72.getRoot();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean87 = node86.isThis();
        node83.addChildToBack(node86);
        boolean boolean89 = node83.isDebugger();
        boolean boolean90 = node83.isAssign();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node83, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node94 = node93.getLastChild();
        com.google.javascript.rhino.Node node95 = node79.clonePropsFrom(node94);
        boolean boolean96 = node94.hasMoreThanOneChild();
        boolean boolean97 = node94.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList14.listIterator();
        boolean boolean19 = nodeIterableList14.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        boolean boolean23 = nodeIterableList20.isEmpty();
        int int24 = nodeIterableList20.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression27);
        jSDocInfoBuilder26.markAnnotation("None", 48, 51);
        boolean boolean33 = jSDocInfoBuilder26.recordNoShadow();
        boolean boolean35 = jSDocInfoBuilder26.addReference("OR hi!");
        boolean boolean36 = jSDocInfoBuilder26.isJavaDispatch();
        int int37 = nodeIterableList20.indexOf((java.lang.Object) jSDocInfoBuilder26);
        boolean boolean38 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor39 = nodeIterableList14.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor39);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        node1.setLength((int) ' ');
        com.google.javascript.rhino.Node node4 = node1.cloneTree();
        boolean boolean5 = node4.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition2.getEndLine();
        int int16 = namePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node17 = namePosition2.getItem();
        com.google.javascript.rhino.Node node18 = namePosition2.getItem();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        jSTypeRegistry28.clearTemplateTypeNames();
        jSTypeRegistry28.setLastGeneration(false);
        jSTypeRegistry28.identifyNonNullableName("OR hi!\n");
        jSTypeRegistry28.resetForTypeCheck();
        jSTypeRegistry28.incrementGeneration();
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean40 = jSTypeRegistry28.isForwardDeclaredType("{...}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor29 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo30.getType();
        boolean boolean33 = jSDocInfo30.isImplicitCast();
        boolean boolean34 = jSDocInfo30.isOverride();
        boolean boolean35 = jSDocInfo30.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo30.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo30.getType();
        boolean boolean38 = jSDocInfo30.isNoCompile();
        boolean boolean39 = nodeIterableList0.equals((java.lang.Object) jSDocInfo30);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList0.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = nodeIterableList0.remove(36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility58);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility58);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        boolean boolean63 = nodeIterableList51.contains((java.lang.Object) visibility61);
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        boolean boolean70 = jSTypeRegistry65.canPropertyBeDefined(jSType68, "Unknown class name");
        jSTypeRegistry65.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode75 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry74.setResolveMode(resolveMode75);
        com.google.javascript.rhino.jstype.ObjectType objectType77 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry74.createObjectType(objectType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry65.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType78, "");
        com.google.javascript.rhino.jstype.JSType jSType82 = objectType78.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean83 = jSType82.isUnionType();
        boolean boolean84 = nodeIterableList51.equals((java.lang.Object) jSType82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isExterns();
        int int87 = jSDocInfo85.getParameterCount();
        boolean boolean88 = jSDocInfo85.isIdGenerator();
        boolean boolean89 = jSDocInfo85.isInterface();
        boolean boolean90 = jSDocInfo85.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList91 = jSDocInfo85.getThrownTypes();
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = jSDocInfo85.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = nodeIterableList51.remove((java.lang.Object) strList92);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + resolveMode75 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode75.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList91);
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("{1078264502}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        boolean boolean10 = jSTypeRegistry5.canPropertyBeDefined(jSType8, "Unknown class name");
        jSTypeRegistry5.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry5.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        jSTypeRegistry16.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot26 = objectType23.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType33.toMaybeEnumElementType();
        boolean boolean35 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType23, objectType33);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType23, "JSDocInfo");
        jSTypeRegistry1.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry1.getType("OR hi!\n");
        boolean boolean42 = jSTypeRegistry1.isForwardDeclaredType("function (None, {...}, {...}, ...[{...}]): None");
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        boolean boolean50 = jSTypeRegistry45.canPropertyBeDefined(jSType48, "Unknown class name");
        jSTypeRegistry45.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry45.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType58, "");
        boolean boolean61 = jSType60.canBeCalled();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType62 = jSType60.toMaybeEnumElementType();
        boolean boolean63 = jSType60.isNumberValueType();
        jSTypeRegistry1.unregisterPropertyOnType("{2009584092}", jSType60);
        boolean boolean65 = jSType60.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNull(jSTypeStaticSlot26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(enumElementType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("OR hi!\n    OR hi!\n");
        jSTypeRegistry1.identifyNonNullableName("{...}");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry12.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        boolean boolean23 = jSTypeRegistry18.canPropertyBeDefined(jSType21, "Unknown class name");
        jSTypeRegistry18.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry18.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        jSTypeRegistry29.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = objectType36.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot39 = objectType36.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType47 = objectType46.toMaybeEnumElementType();
        boolean boolean48 = jSTypeRegistry18.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType36, objectType46);
        com.google.javascript.rhino.jstype.JSType jSType50 = objectType36.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node51 = objectType36.getRootNode();
        boolean boolean52 = objectType36.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        boolean boolean59 = objectType58.isNominalConstructor();
        boolean boolean60 = jSTypeRegistry12.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType36, objectType58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node64.isDebugger();
        com.google.javascript.rhino.Node node71 = node64.getFirstChild();
        boolean boolean72 = node64.isNot();
        boolean boolean73 = node64.isIn();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node77.isDebugger();
        boolean boolean84 = node77.isAssign();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(51, node77, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable88 = node87.getAncestors();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(1, node64, node87, 54, 10);
        java.lang.String str92 = node64.toString();
        boolean boolean93 = node64.isDelProp();
        com.google.javascript.rhino.jstype.FunctionType functionType94 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = functionType94.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNull(jSTypeStaticSlot39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNull(enumElementType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(ancestorIterable88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "OR hi!" + "'", str92, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(functionType94);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.lang.String str10 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node11 = jSDocInfo0.getAssociatedNode();
        boolean boolean12 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isUnscopedQualifiedName();
        boolean boolean24 = node22.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        boolean boolean27 = jSDocInfo25.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getImplementedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        node22.setJSDocInfo(jSDocInfo25);
        boolean boolean31 = node22.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int2 = stringPosition1.getPositionOnEndLine();
        int int3 = stringPosition1.getEndLine();
        int int4 = stringPosition1.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getStartLine();
        int int7 = stringPosition5.getPositionOnStartLine();
        int int8 = stringPosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int10 = stringPosition9.getStartLine();
        int int11 = stringPosition9.getPositionOnStartLine();
        int int12 = stringPosition9.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int14 = stringPosition13.getStartLine();
        int int15 = stringPosition13.getPositionOnStartLine();
        java.lang.String str16 = stringPosition13.getItem();
        stringPosition13.setPositionInformation(16, 53, 48, 5);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int23 = stringPosition22.getStartLine();
        int int24 = stringPosition22.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int26 = stringPosition25.getPositionOnEndLine();
        int int27 = stringPosition25.getPositionOnEndLine();
        int int28 = stringPosition25.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int30 = stringPosition29.getStartLine();
        int int31 = stringPosition29.getPositionOnStartLine();
        int int32 = stringPosition29.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList33 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition1, stringPosition5, stringPosition9, stringPosition13, stringPosition22, stringPosition25, stringPosition29);
        int int34 = stringPosition9.getStartLine();
        int int35 = stringPosition9.getEndLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(stringPositionList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean62 = jSDocInfoBuilder1.recordVersion("java.io.IOException: None");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType6 = objectType5.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType5.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType21 = objectType20.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = objectType27.toObjectType();
        boolean boolean29 = objectType20.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType5, (com.google.javascript.rhino.jstype.JSType) objectType20);
        boolean boolean31 = objectType5.isFunctionPrototypeType();
        boolean boolean32 = objectType5.hasDisplayName();
        boolean boolean33 = objectType5.matchesUint32Context();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = objectType5.getJSDocInfo();
        boolean boolean35 = objectType5.isRegexpType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = objectType5.getPossibleToBooleanOutcomes();
        boolean boolean37 = objectType5.isArrayType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNull(enumElementType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(enumElementType21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node25 = node10.srcref(node20);
        boolean boolean26 = node25.isDelProp();
        com.google.javascript.rhino.Node node27 = node25.getLastSibling();
        java.lang.String str28 = node27.toStringTree();
        boolean boolean29 = node27.isGetElem();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node39.isNot();
        int int43 = node39.getLineno();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        com.google.javascript.rhino.Node node54 = node39.srcref(node49);
        int int55 = node39.getCharno();
        boolean boolean56 = node39.isQuotedString();
        boolean boolean57 = node39.isIf();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node63.isNot();
        int int67 = node63.getLineno();
        boolean boolean68 = node63.isAdd();
        com.google.javascript.rhino.Node node69 = node39.useSourceInfoFromForTree(node63);
        int int70 = node33.getIndexOfChild(node69);
        com.google.javascript.rhino.Node node71 = node27.useSourceInfoIfMissingFromForTree(node69);
        node27.detachChildren();
        com.google.javascript.rhino.Node node73 = node27.cloneTree();
        com.google.javascript.rhino.Node node74 = node3.srcrefTree(node73);
        boolean boolean75 = node74.isDo();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR hi!\n" + "'", str28, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry5.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = objectType9.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot12 = objectType9.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        boolean boolean21 = objectType20.matchesInt32Context();
        boolean boolean22 = objectType20.isStringValueType();
        boolean boolean23 = objectType20.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType20, (com.google.javascript.rhino.jstype.JSType) objectType29);
        boolean boolean31 = objectType29.isNullable();
        boolean boolean32 = objectType29.isString();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray35 = nodeIterableList34.toArray();
        boolean boolean36 = nodeIterableList34.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder39 = visibilityEnumBuilder37.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility38);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = jSDocInfo43.getVisibility();
        boolean boolean47 = jSDocInfo43.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo43.setVisibility(visibility48);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray50 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility48 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder42.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray50);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo55.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = jSDocInfo55.getVisibility();
        boolean boolean59 = jSDocInfo55.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo55.setVisibility(visibility60);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray62 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility60 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder39.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray62);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray66 = nodeIterableList34.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray62);
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList70 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList70, jSTypeArray69);
        com.google.javascript.rhino.Node node72 = jSTypeRegistry68.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList70);
        int int73 = nodeIterableList34.lastIndexOf((java.lang.Object) jSTypeList70);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry2.createFunctionType(objectType29, jSType33, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList70);
        boolean boolean75 = objectType29.matchesInt32Context();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot77 = objectType29.getSlot("OR hi! [var_args_name: 1] : {...}");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType78 = objectType29.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertNull(jSTypeStaticSlot12);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder39);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNull(visibility46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray50);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNull(visibility58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray62);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertNotNull(visibilityEnumArray66);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot77);
        org.junit.Assert.assertNull(enumElementType78);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isVoid();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isTypeOf();
        com.google.javascript.rhino.Node node45 = node33.srcrefTree(node43);
        com.google.javascript.rhino.Node node46 = node33.getLastSibling();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node49.isDebugger();
        com.google.javascript.rhino.Node node56 = node49.getFirstChild();
        boolean boolean57 = node33.hasChild(node56);
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        int int60 = nodeIterableList25.lastIndexOf((java.lang.Object) jSType58);
        java.lang.String str61 = nodeIterableList25.toString();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node67.isNot();
        int int71 = node67.getLineno();
        boolean boolean72 = node67.isAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable73 = node67.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = nodeIterableList25.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(ancestorIterable73);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isNE();
        boolean boolean22 = node20.isGetterDef();
        boolean boolean23 = node20.isGetProp();
        node20.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isAdd();
        boolean boolean35 = node31.isExprResult();
        boolean boolean36 = node31.isThrow();
        boolean boolean37 = node31.isVarArgs();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray47 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition41, typePosition42, typePosition43, typePosition44, typePosition45, typePosition46 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray48 = nodeIterableList38.toArray(typePositionArray47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray50 = nodeIterableList49.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = nodeIterableList49.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray58 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition52, typePosition53, typePosition54, typePosition55, typePosition56, typePosition57 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray59 = nodeIterableList49.toArray(typePositionArray58);
        boolean boolean60 = nodeIterableList38.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList49);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream61 = nodeIterableList38.stream();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str65 = node64.getString();
        int int66 = nodeIterableList38.indexOf((java.lang.Object) node64);
        com.google.javascript.rhino.Node node67 = node31.useSourceInfoFromForTree(node64);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node31.getJSDocInfo();
        com.google.javascript.rhino.Node node69 = node20.srcrefTree(node31);
        node69.setQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(typePositionArray47);
        org.junit.Assert.assertNotNull(typePositionArray48);
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(typePositionArray58);
        org.junit.Assert.assertNotNull(typePositionArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR hi! [directives: []]\n" + "'", str65, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean18 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder16.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean21 = jSDocInfoBuilder16.recordVisibility(visibility20);
        boolean boolean22 = jSDocInfoBuilder16.recordExpose();
        boolean boolean24 = jSDocInfoBuilder16.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.siblings();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet37);
        node28.putBooleanProp(0, false);
        node28.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean45 = node28.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node28.getStaticSourceFile();
        boolean boolean47 = staticSourceFile46.isExtern();
        int int49 = staticSourceFile46.getLineOffset(16);
        jSDocInfoBuilder16.markName("OR hi! [directives: []]\n", staticSourceFile46, 8, 41);
        boolean boolean53 = staticSourceFile46.isExtern();
        int int55 = staticSourceFile46.getColumnOfOffset(4095);
        jSDocInfoBuilder1.markName("{1517329911}", staticSourceFile46, 36, (int) (short) 1);
        boolean boolean59 = staticSourceFile46.isExtern();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2147483648) + "'", int49 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        node5.detachChildren();
        boolean boolean12 = node5.isFunction();
        java.lang.Object obj14 = node5.getProp((int) (short) 100);
        boolean boolean15 = node5.isAdd();
        com.google.javascript.rhino.Node node16 = node5.cloneTree();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 38, 37);
        boolean boolean21 = node20.isGetElem();
        int int23 = node20.getIntProp((int) ' ');
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        boolean boolean28 = node27.isOr();
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChildAfter(node20, node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        boolean boolean11 = node5.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isIf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node17.useSourceInfoFromForTree(node41);
        boolean boolean48 = node5.hasChild(node41);
        node41.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node51 = node41.cloneTree();
        boolean boolean52 = node41.wasEmptyNode();
        boolean boolean53 = node41.isNE();
        boolean boolean54 = node41.isComma();
        com.google.javascript.rhino.Node node55 = node41.removeChildren();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean13 = jSDocInfo0.hasParameterType("(null|undefined|{})");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnEndLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getEndLine();
        stringPosition0.setItem("InputId: ");
        int int6 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        boolean boolean6 = node2.isComma();
        boolean boolean7 = node2.isNoSideEffectsCall();
        boolean boolean8 = node2.isSetterDef();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node16 = node2.copyInformationFromForTree(node14);
        boolean boolean17 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        com.google.javascript.rhino.Node node38 = node23.srcref(node33);
        boolean boolean39 = node33.isComma();
        node33.setVarArgs(true);
        java.lang.String str42 = node33.toString();
        boolean boolean43 = node33.isNot();
        com.google.javascript.rhino.Node node44 = node14.useSourceInfoIfMissingFromForTree(node33);
        java.lang.Object obj46 = node44.getProp(3);
        boolean boolean47 = node44.isGetProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi! [var_args_name: 1]" + "'", str42, "OR hi! [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        boolean boolean16 = node2.isNew();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean23 = jSDocInfoBuilder18.recordExpose();
        boolean boolean24 = jSDocInfoBuilder18.recordNoCompile();
        boolean boolean25 = jSDocInfoBuilder18.isPopulatedWithFileOverview();
        boolean boolean26 = jSDocInfoBuilder18.isPopulated();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        node30.putBooleanProp(0, false);
        node30.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean47 = node30.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node30.getStaticSourceFile();
        boolean boolean49 = staticSourceFile48.isExtern();
        int int51 = staticSourceFile48.getLineOffset(16);
        jSDocInfoBuilder18.markName("None", staticSourceFile48, (int) (byte) 1, 43);
        int int56 = staticSourceFile48.getColumnOfOffset(4);
        int int58 = staticSourceFile48.getColumnOfOffset(2);
        node2.setStaticSourceFile(staticSourceFile48);
        int int61 = staticSourceFile48.getLineOfOffset(43);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-2147483648) + "'", int51 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean5 = jSDocInfo0.hasParameterType("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isAssign();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(51, node14, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node25 = node24.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node24.children();
        com.google.javascript.rhino.Node node27 = node2.useSourceInfoIfMissingFrom(node24);
        boolean boolean28 = node2.isName();
        boolean boolean29 = node2.isStringKey();
        com.google.javascript.rhino.Node node30 = node2.cloneNode();
        boolean boolean31 = node2.isFunction();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        boolean boolean50 = strSet43.remove((java.lang.Object) boolean49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo51.getSuppressions();
        boolean boolean53 = jSDocInfo51.isNoSideEffects();
        boolean boolean54 = jSDocInfo51.isConsistentIdGenerator();
        boolean boolean55 = strSet43.contains((java.lang.Object) jSDocInfo51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node58.siblings();
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        boolean boolean72 = strSet67.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList70);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList73 = com.google.common.collect.ImmutableList.of();
        boolean boolean74 = strSet67.contains((java.lang.Object) nodeIterableList73);
        boolean boolean75 = strSet67.isEmpty();
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList76 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet43, (java.util.AbstractCollection<java.lang.String>) strSet67);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet67);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterableList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strCollectionList76);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordInterface();
        boolean boolean15 = jSDocInfoBuilder12.recordDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        boolean boolean36 = strSet27.remove((java.lang.Object) jSDocInfoBuilder31);
        boolean boolean37 = jSDocInfoBuilder31.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder39.addAuthor("");
        boolean boolean42 = jSDocInfoBuilder39.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = null;
        boolean boolean44 = jSDocInfoBuilder39.recordThrowType(jSTypeExpression43);
        boolean boolean45 = jSDocInfoBuilder39.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        jSDocInfoBuilder39.markName("", staticSourceFile47, 29, 50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node53.isDebugger();
        boolean boolean60 = node53.isSyntheticBlock();
        boolean boolean61 = node53.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node53, "Unknown class name");
        boolean boolean65 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression63, "?");
        boolean boolean66 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression63);
        boolean boolean67 = jSDocInfoBuilder12.recordEnumParameterType(jSTypeExpression63);
        boolean boolean68 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression63);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression63);
        boolean boolean70 = jSTypeExpression69.isVarArgs();
        com.google.javascript.rhino.Node node71 = jSTypeExpression69.getRoot();
        boolean boolean72 = node71.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition18 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker20.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker20.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList24 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker7, marker11, marker15, marker16, marker20);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition25 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker16.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = marker16.getAnnotation();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(nodeSourcePosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNotNull(markerList24);
        org.junit.Assert.assertNull(nodeSourcePosition25);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNull(stringPosition29);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        jSTypeRegistry1.forwardDeclareType("Unknown class name");
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry24.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType37, "");
        boolean boolean40 = jSType39.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType39.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry8.createNullableType(jSType39);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        boolean boolean51 = objectType50.matchesInt32Context();
        boolean boolean52 = objectType50.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        boolean boolean59 = jSTypeRegistry54.canPropertyBeDefined(jSType57, "Unknown class name");
        jSTypeRegistry54.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry54.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType67, "");
        com.google.javascript.rhino.jstype.UnionType unionType70 = objectType67.toMaybeUnionType();
        com.google.javascript.rhino.Node node71 = objectType67.getRootNode();
        boolean boolean72 = objectType67.isRegexpType();
        boolean boolean73 = jSTypeRegistry8.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType50, objectType67);
        boolean boolean74 = objectType50.isRecordType();
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType50);
        boolean boolean76 = objectType50.isNumber();
        boolean boolean77 = objectType50.canBeCalled();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(unionType70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("{247883875}", 51, 32);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        jSDocInfoBuilder15.markName("JSDocInfo", staticSourceFile23, 54, (int) (byte) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        jSDocInfoBuilder15.markName("INSTANCEOF", staticSourceFile28, 2, 54);
        jSDocInfoBuilder15.markAnnotation("{690905048}", 43, 15);
        boolean boolean37 = jSDocInfoBuilder15.addAuthor("function (this:me, {1773764281}): me");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.isHidden();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.addSuppression("OR []");
        java.lang.String str8 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode10);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry9.createObjectType(objectType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = objectType13.toObjectType();
        boolean boolean15 = objectType14.matchesInt32Context();
        boolean boolean16 = objectType14.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        boolean boolean37 = jSTypeRegistry32.canPropertyBeDefined(jSType35, "Unknown class name");
        jSTypeRegistry32.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry32.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType45, "");
        boolean boolean48 = jSType47.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = objectType30.testForEquality(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType47.collapseUnion();
        boolean boolean51 = objectType23.differsFrom(jSType47);
        boolean boolean52 = jSType47.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType53 = objectType14.getGreatestSubtype(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType53.findPropertyType("OR hi! [directives: []]\n");
        java.lang.String str56 = jSType53.toAnnotationString();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair57 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, jSType53);
        com.google.javascript.rhino.jstype.JSType jSType58 = typePair57.typeA;
        com.google.javascript.rhino.jstype.JSType jSType59 = typePair57.typeB;
        com.google.javascript.rhino.jstype.JSType jSType60 = typePair57.typeB;
        java.lang.String str61 = jSType60.toAnnotationString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "?" + "'", str56, "?");
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "?" + "'", str61, "?");
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isString();
        node2.setIsSyntheticBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR hi! [synthetic: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        boolean boolean63 = jSType62.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = objectType45.testForEquality(jSType62);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType62.collapseUnion();
        boolean boolean66 = objectType38.differsFrom(jSType62);
        boolean boolean67 = jSType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry1.createOptionalType(jSType62);
        boolean boolean70 = jSTypeRegistry1.isForwardDeclaredType("Not declared as a constructor");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = objectType85.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray87 = new com.google.javascript.rhino.jstype.JSType[] { objectType85 };
        com.google.javascript.rhino.Node node88 = jSTypeRegistry72.createParametersWithVarArgs(jSTypeArray87);
        com.google.javascript.rhino.Node node89 = jSTypeRegistry1.createOptionalParameters(jSTypeArray87);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node89.siblings();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNotNull(jSTypeArray87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(nodeIterable90);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        boolean boolean16 = node10.isDec();
        boolean boolean17 = node10.isBlock();
        boolean boolean18 = node10.isTrue();
        com.google.javascript.rhino.Node node19 = node10.cloneNode();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = node25.srcref(node35);
        int int41 = node25.getCharno();
        boolean boolean42 = node25.isQuotedString();
        boolean boolean43 = node25.isIf();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        boolean boolean54 = node49.isAdd();
        com.google.javascript.rhino.Node node55 = node25.useSourceInfoFromForTree(node49);
        com.google.javascript.rhino.Node node56 = node10.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder1.build(node10);
        boolean boolean58 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean59 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getEndLine();
        typePosition0.setPositionInformation(47, (int) '#', (int) 'a', (int) (short) 100);
        boolean boolean9 = typePosition0.hasBrackets();
        int int10 = typePosition0.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(200716, 53, 40, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 200716?end-line: 40");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        boolean boolean15 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean16 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList11 = com.google.common.collect.ImmutableList.of(namePosition10);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList17 = com.google.common.collect.ImmutableList.of(namePosition16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6, namePosition7, namePosition8, namePosition10, namePosition12, namePosition13, namePosition14, namePosition15, namePosition16, namePosition18);
        int int20 = namePosition10.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node30.isWhile();
        namePosition10.setItem(node30);
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean35 = jSDocInfo0.isNoTypeCheck();
        int int36 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(namePositionList11);
        org.junit.Assert.assertNotNull(namePositionList17);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node14 = node13.getLastChild();
        boolean boolean15 = node14.isSwitch();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = node25.srcref(node35);
        int int41 = node25.getCharno();
        boolean boolean42 = node25.isQuotedString();
        boolean boolean43 = node25.isIf();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        boolean boolean54 = node49.isAdd();
        com.google.javascript.rhino.Node node55 = node25.useSourceInfoFromForTree(node49);
        int int56 = node19.getIndexOfChild(node55);
        boolean boolean57 = node19.hasOneChild();
        com.google.javascript.rhino.Node node58 = node14.srcrefTree(node19);
        boolean boolean59 = node14.isTry();
        boolean boolean60 = node14.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isGetElem();
        jSDocInfoBuilder1.markTypeNode(node7, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isSyntheticBlock();
        boolean boolean25 = node17.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node17, "Unknown class name");
        boolean boolean28 = jSTypeExpression27.isOptionalArg();
        boolean boolean29 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression27);
        boolean boolean30 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean32 = jSDocInfoBuilder1.addReference("{1559619413}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("{650497}");
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node41 = node26.srcref(node36);
        int int42 = node26.getCharno();
        boolean boolean43 = node26.isQuotedString();
        boolean boolean44 = node26.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.Node node56 = node26.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node62.cloneTree();
        java.lang.Object obj70 = node68.getProp((int) (byte) 0);
        int int71 = node68.getChildCount();
        node56.addChildrenToFront(node68);
        boolean boolean73 = strSet11.contains((java.lang.Object) node56);
        boolean boolean74 = node56.isQuotedString();
        boolean boolean75 = node56.isVoid();
        com.google.javascript.rhino.Node node76 = node56.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder78 = node56.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder78);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode4 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry3.setResolveMode(resolveMode4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry3.createObjectType(objectType6);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = objectType7.toObjectType();
        boolean boolean9 = objectType8.matchesInt32Context();
        boolean boolean10 = objectType8.isStringValueType();
        boolean boolean11 = objectType8.canBeCalled();
        boolean boolean12 = objectType8.isAllType();
        boolean boolean13 = objectType8.isStringObjectType();
        com.google.javascript.rhino.jstype.JSType jSType15 = objectType8.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot17 = objectType8.getSlot("OR hi! [var_args_name: 1]");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = objectType8.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        boolean boolean25 = jSTypeRegistry20.canPropertyBeDefined(jSType23, "Unknown class name");
        jSTypeRegistry20.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry20.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isNE();
        boolean boolean38 = node36.isInstanceOf();
        boolean boolean39 = node36.isThrow();
        node36.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node36.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        boolean boolean49 = jSTypeRegistry44.canPropertyBeDefined(jSType47, "Unknown class name");
        jSTypeRegistry44.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry44.createAnonymousObjectType();
        objectType52.clearResolved();
        node36.setJSType((com.google.javascript.rhino.jstype.JSType) objectType52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        boolean boolean63 = node57.isDebugger();
        com.google.javascript.rhino.Node node64 = node57.getFirstChild();
        boolean boolean65 = node57.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry31.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType52, node57);
        boolean boolean67 = jSTypeRegistry20.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType52);
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList71 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList71, jSTypeArray70);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry69.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType18, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        boolean boolean76 = objectType18.isUnknownType();
        org.junit.Assert.assertTrue("'" + resolveMode4 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode4.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSType15);
        org.junit.Assert.assertNull(jSTypeStaticSlot17);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ancestorIterable42);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isNot();
        int int10 = node6.getLineno();
        boolean boolean11 = node6.isAdd();
        com.google.javascript.rhino.Node node12 = node6.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node18.isNot();
        int int22 = node18.getLineno();
        boolean boolean23 = node18.isAdd();
        boolean boolean24 = node12.hasChild(node18);
        boolean boolean25 = node18.isDefaultCase();
        int int26 = node18.getSourcePosition();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isTypeOf();
        boolean boolean31 = node29.isRegExp();
        com.google.javascript.rhino.Node node32 = node18.copyInformationFromForTree(node29);
        java.lang.Object obj34 = null;
        node18.putProp(3, obj34);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDec();
        boolean boolean45 = node38.isBlock();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node48.siblings();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet57);
        int int60 = strSet57.size();
        strSet57.clear();
        node38.setDirectives((java.util.Set<java.lang.String>) strSet57);
        boolean boolean63 = node38.isCase();
        com.google.javascript.rhino.Node node64 = node18.clonePropsFrom(node38);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4093, node64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36 + "'", int4 == 36);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isNot();
        int int10 = node6.getLineno();
        boolean boolean11 = node6.isAdd();
        com.google.javascript.rhino.Node node12 = node6.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node12.setJSType(jSType13);
        boolean boolean15 = node12.isString();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        boolean boolean26 = node21.isAdd();
        com.google.javascript.rhino.Node node27 = node21.cloneTree();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        boolean boolean38 = node33.isAdd();
        boolean boolean39 = node27.hasChild(node33);
        boolean boolean40 = node33.isDefaultCase();
        int int41 = node33.getSourcePosition();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isTypeOf();
        boolean boolean46 = node44.isRegExp();
        com.google.javascript.rhino.Node node47 = node33.copyInformationFromForTree(node44);
        boolean boolean48 = node12.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node49 = node44.removeFirstChild();
        boolean boolean50 = node44.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo51.getType();
        boolean boolean54 = jSDocInfo51.isImplicitCast();
        boolean boolean55 = jSDocInfo51.isExport();
        boolean boolean56 = jSDocInfo51.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo51.getReturnType();
        boolean boolean58 = jSDocInfo51.hasTypedefType();
        boolean boolean59 = jSDocInfo51.hasTypedefType();
        java.lang.String str60 = jSDocInfo51.getDescription();
        node44.setJSDocInfo(jSDocInfo51);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((-2147483648), node44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(46, "java.io.IOException: java.io.IOException: java.io.IOException");
        jSDocInfo0.setAssociatedNode(node10);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isTypeOf();
        node14.setLineno(51);
        node14.setVarArgs(false);
        int int20 = node14.getChildCount();
        boolean boolean21 = node14.isAnd();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFrom(node14);
        java.lang.Object obj24 = node22.getProp(37);
        boolean boolean25 = node22.isCatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        boolean boolean7 = jSTypeRegistry2.canPropertyBeDefined(jSType5, "Unknown class name");
        jSTypeRegistry2.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType10 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isNE();
        boolean boolean20 = node18.isInstanceOf();
        boolean boolean21 = node18.isThrow();
        node18.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node18.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        boolean boolean31 = jSTypeRegistry26.canPropertyBeDefined(jSType29, "Unknown class name");
        jSTypeRegistry26.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry26.createAnonymousObjectType();
        objectType34.clearResolved();
        node18.setJSType((com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        com.google.javascript.rhino.Node node46 = node39.getFirstChild();
        boolean boolean47 = node39.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType48 = jSTypeRegistry13.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType34, node39);
        boolean boolean49 = jSTypeRegistry2.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        boolean boolean63 = node58.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node58.setJSType(jSType64);
        boolean boolean66 = node58.isOptionalArg();
        boolean boolean67 = node58.isOr();
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry2.createFunctionType(jSType52, node58);
        boolean boolean69 = node58.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(37, node58, 41, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(functionType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        boolean boolean15 = node9.isDebugger();
        boolean boolean17 = node9.getBooleanProp((int) (short) 100);
        boolean boolean18 = node9.isTypeOf();
        boolean boolean19 = node9.isNull();
        jSDocInfo0.setAssociatedNode(node9);
        jSDocInfo0.setLicense("{2079886337}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordParameterDescription("TYPEOF OR hi!\n", "{1078264502}");
        boolean boolean16 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        int int44 = jSDocInfo14.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str9 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList.Builder[] builderArray12 = new com.google.common.collect.ImmutableList.Builder[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>[] visibilityEnumBuilderArray13 = (com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>[]) builderArray12;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>[] visibilityEnumBuilderArray14 = strSet10.toArray(visibilityEnumBuilderArray13);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray16 = nodeIterableList15.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = nodeIterableList15.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList23, 52, node30 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray38 = nodeIterableList37.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = nodeIterableList37.reverse();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList39, 52, node46 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList55 = nodeIterableList53.reverse();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        java.lang.Object[] objArray65 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList55, 52, node62 };
        java.lang.Object[][] objArray66 = new java.lang.Object[][] { objArray33, objArray49, objArray65 };
        java.lang.Object[][] objArray67 = nodeIterableList17.toArray(objArray66);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray69 = nodeIterableList68.toArray();
        int int71 = nodeIterableList68.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray72 = nodeIterableList68.toArray();
        boolean boolean73 = nodeIterableList17.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream74 = nodeIterableList68.parallelStream();
        java.lang.Object[] objArray75 = nodeIterableList68.toArray();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor76 = nodeIterableList68.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.isExterns();
        int int79 = jSDocInfo77.getParameterCount();
        jSDocInfo77.setLicense("None");
        boolean boolean82 = jSDocInfo77.hasFileOverview();
        boolean boolean83 = jSDocInfo77.isExport();
        java.lang.String str84 = jSDocInfo77.getDeprecationReason();
        boolean boolean85 = nodeIterableList68.equals((java.lang.Object) jSDocInfo77);
        boolean boolean86 = strSet10.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builderArray12);
        org.junit.Assert.assertNotNull(visibilityEnumBuilderArray13);
        org.junit.Assert.assertNotNull(visibilityEnumBuilderArray14);
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        int int24 = strSet21.size();
        strSet21.clear();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet21);
        boolean boolean27 = node2.isCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node2.siblings();
        int int29 = node2.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isVoid();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isTypeOf();
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node42);
        boolean boolean45 = node44.isObjectLit();
        boolean boolean46 = node44.isCall();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node49.isDebugger();
        boolean boolean56 = node49.isVoid();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isTypeOf();
        com.google.javascript.rhino.Node node61 = node49.srcrefTree(node59);
        boolean boolean62 = node61.isObjectLit();
        boolean boolean63 = node61.isExprResult();
        boolean boolean64 = node44.hasChild(node61);
        com.google.javascript.rhino.Node node65 = node2.useSourceInfoFromForTree(node44);
        node65.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("{}");
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo37.getVisibility();
        boolean boolean45 = jSDocInfo37.hasEnumParameterType();
        java.lang.String str46 = jSDocInfo37.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JSDocInfo" + "'", str46, "JSDocInfo");
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder11.addAuthor("");
        boolean boolean14 = jSDocInfoBuilder11.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder11.recordThrowType(jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder11.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder11.markName("", staticSourceFile19, 29, 50);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isSyntheticBlock();
        boolean boolean33 = node25.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = new com.google.javascript.rhino.JSTypeExpression(node25, "Unknown class name");
        boolean boolean37 = jSDocInfoBuilder11.recordThrowDescription(jSTypeExpression35, "?");
        com.google.javascript.rhino.Node node38 = jSTypeExpression35.getRoot();
        boolean boolean39 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isSyntheticBlock();
        boolean boolean50 = node42.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node42, "Unknown class name");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node55.isDebugger();
        boolean boolean62 = node55.isVoid();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isTypeOf();
        com.google.javascript.rhino.Node node67 = node55.srcrefTree(node65);
        boolean boolean68 = node67.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry70.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean79 = node74.isEquivalentToTyped(node78);
        com.google.javascript.rhino.Node node80 = node74.cloneNode();
        com.google.javascript.rhino.InputId inputId81 = node74.getInputId();
        boolean boolean82 = node67.hasChild(node74);
        boolean boolean83 = jSTypeExpression52.equals((java.lang.Object) node67);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression52);
        boolean boolean85 = jSTypeExpression52.isOptionalArg();
        boolean boolean86 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(inputId81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope8 = objectType6.getParentScope();
        com.google.javascript.rhino.Node node9 = objectType6.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable20 = jSTypeRegistry11.getTypesWithProperty("hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node24.isDebugger();
        boolean boolean31 = node24.isVoid();
        boolean boolean32 = node24.hasOneChild();
        com.google.javascript.rhino.InputId inputId33 = node24.getInputId();
        java.lang.String str34 = node24.toStringTree();
        com.google.javascript.rhino.Node node35 = node24.removeFirstChild();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = objectType41.toObjectType();
        boolean boolean43 = objectType42.matchesInt32Context();
        boolean boolean44 = objectType42.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry46.createObjectType(objectType49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = objectType50.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = objectType57.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        boolean boolean65 = jSTypeRegistry60.canPropertyBeDefined(jSType63, "Unknown class name");
        jSTypeRegistry60.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode70 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry69.setResolveMode(resolveMode70);
        com.google.javascript.rhino.jstype.ObjectType objectType72 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType73 = jSTypeRegistry69.createObjectType(objectType72);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry60.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType73, "");
        boolean boolean76 = jSType75.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = objectType58.testForEquality(jSType75);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSType75.collapseUnion();
        boolean boolean79 = objectType51.differsFrom(jSType75);
        boolean boolean80 = jSType75.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = objectType42.getGreatestSubtype(jSType75);
        com.google.javascript.rhino.jstype.ObjectType objectType82 = jSTypeRegistry11.createObjectType("hi!", node35, objectType42);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType83 = objectType42.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair84 = objectType6.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) objectType42);
        com.google.javascript.rhino.jstype.JSType jSType85 = typePair84.typeA;
        com.google.javascript.rhino.jstype.JSType jSType86 = typePair84.typeB;
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str34, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + resolveMode70 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode70.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNull(enumElementType83);
        org.junit.Assert.assertNotNull(typePair84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNotNull(jSType86);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        boolean boolean13 = node2.isReturn();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = nodeIterableList14.reverse();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        boolean boolean33 = strSet28.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList31);
        java.util.HashSet[] hashSetArray35 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray36 = (java.util.HashSet<java.lang.String>[]) hashSetArray35;
        strSetArray36[0] = strSet28;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList39 = com.google.common.collect.ImmutableList.copyOf(strSetArray36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.isExterns();
        boolean boolean52 = jSDocInfo50.hasReturnType();
        boolean boolean53 = jSDocInfo50.isOverride();
        jSDocInfo50.setLicense("hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node61.isNot();
        int int65 = node61.getLineno();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        boolean boolean74 = node71.isNot();
        int int75 = node71.getLineno();
        com.google.javascript.rhino.Node node76 = node61.srcref(node71);
        boolean boolean77 = node76.isDelProp();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean84 = node83.isThis();
        node80.addChildToBack(node83);
        node83.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = null;
        node83.setStaticSourceFile(staticSourceFile88);
        com.google.common.collect.ImmutableList<java.lang.Object> objList90 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray36, (java.lang.Object) node42, (java.lang.Object) "hi!", (java.lang.Object) boolean77, (java.lang.Object) node83);
        boolean boolean91 = node83.isInstanceOf();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(35, 37, 39);
        com.google.javascript.rhino.Node node96 = node83.srcrefTree(node95);
        int int97 = nodeIterableList16.lastIndexOf((java.lang.Object) node95);
        boolean boolean98 = node95.isTypeOf();
        com.google.javascript.rhino.Node node99 = node2.useSourceInfoFromForTree(node95);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(hashSetArray35);
        org.junit.Assert.assertNotNull(strSetArray36);
        org.junit.Assert.assertNotNull(strSetList39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = nodeIterableList0.contains((java.lang.Object) boolean43);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream45 = nodeIterableList0.parallelStream();
        java.lang.Object[] objArray46 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream47 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isNE();
        boolean boolean53 = node51.isInstanceOf();
        boolean boolean54 = node51.isThrow();
        node51.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node51.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList58 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable57);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList58.listIterator();
        int int60 = nodeIterableItor59.nextIndex();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = nodeIterableItor59.next();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator62 = nodeIterable61.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = nodeIterableList0.set((int) (short) 100, nodeIterable61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableStream45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(nodeIterableList58);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertNotNull(nodeSpliterator62);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node19.isNot();
        int int23 = node19.getLineno();
        com.google.javascript.rhino.Node node24 = node9.srcref(node19);
        boolean boolean25 = node24.isNE();
        typePosition0.setItem(node24);
        int int27 = typePosition0.getPositionOnStartLine();
        int int28 = typePosition0.getStartLine();
        boolean boolean29 = typePosition0.hasBrackets();
        int int30 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDebugger();
        boolean boolean41 = node34.isAssign();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(51, node34, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node55.isNot();
        int int59 = node55.getLineno();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node65.isNot();
        int int69 = node65.getLineno();
        com.google.javascript.rhino.Node node70 = node55.srcref(node65);
        boolean boolean71 = node70.isDelProp();
        com.google.javascript.rhino.Node node72 = node70.getLastSibling();
        int int74 = node70.getIntProp(16);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node77.isDebugger();
        boolean boolean84 = node77.isVoid();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean88 = node87.isTypeOf();
        com.google.javascript.rhino.Node node89 = node77.srcrefTree(node87);
        com.google.javascript.rhino.Node node90 = node77.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile91 = null;
        node90.setStaticSourceFile(staticSourceFile91);
        node70.addChildrenToBack(node90);
        com.google.javascript.rhino.Node node94 = node49.copyInformationFromForTree(node90);
        typePosition0.setItem(node94);
        boolean boolean96 = typePosition0.hasBrackets();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        java.lang.String str19 = jSType16.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = objectType34.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        boolean boolean42 = jSTypeRegistry37.canPropertyBeDefined(jSType40, "Unknown class name");
        jSTypeRegistry37.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry46.createObjectType(objectType49);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry37.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType50, "");
        boolean boolean53 = jSType52.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = objectType35.testForEquality(jSType52);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType52.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry21.createNullableType(jSType52);
        boolean boolean57 = jSType52.isTemplateType();
        boolean boolean58 = jSType52.isBooleanObjectType();
        boolean boolean59 = jSType16.canTestForEqualityWith(jSType52);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = objectType66.toObjectType();
        boolean boolean68 = objectType67.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope69 = objectType67.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType70 = objectType67.toMaybeUnionType();
        com.google.javascript.rhino.jstype.JSType jSType71 = jSType52.resolve(errorReporter60, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType67);
        boolean boolean72 = jSType52.hasAnyTemplate();
        java.lang.String str73 = jSType52.toAnnotationString();
        boolean boolean74 = jSType52.matchesInt32Context();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "None" + "'", str19, "None");
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope69);
        org.junit.Assert.assertNull(unionType70);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "?" + "'", str73, "?");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        jSDocInfo0.setLicense("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("OR hi!");
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        java.lang.String str9 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        boolean boolean13 = jSDocInfo0.hasParameter("{353548028}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean28 = jSDocInfoBuilder25.recordDescription("hi!");
        boolean boolean29 = jSDocInfoBuilder25.recordHiddenness();
        boolean boolean30 = strSet21.remove((java.lang.Object) jSDocInfoBuilder25);
        boolean boolean31 = jSDocInfoBuilder25.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.addAuthor("");
        boolean boolean36 = jSDocInfoBuilder33.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression37);
        boolean boolean39 = jSDocInfoBuilder33.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder33.markName("", staticSourceFile41, 29, 50);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isSyntheticBlock();
        boolean boolean55 = node47.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node47, "Unknown class name");
        boolean boolean59 = jSDocInfoBuilder33.recordThrowDescription(jSTypeExpression57, "?");
        boolean boolean60 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression57);
        boolean boolean61 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression57);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor29 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo30.getType();
        boolean boolean33 = jSDocInfo30.isImplicitCast();
        boolean boolean34 = jSDocInfo30.isOverride();
        boolean boolean35 = jSDocInfo30.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo30.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo30.getType();
        boolean boolean38 = jSDocInfo30.isNoCompile();
        boolean boolean39 = nodeIterableList0.equals((java.lang.Object) jSDocInfo30);
        jSDocInfo30.setLicense("{40754700}");
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = nodeIterableList63.reverse();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node70.isNot();
        int int74 = node70.getLineno();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node80.isNot();
        int int84 = node80.getLineno();
        com.google.javascript.rhino.Node node85 = node70.srcref(node80);
        int int86 = node70.getCharno();
        boolean boolean87 = node70.isQuotedString();
        boolean boolean88 = node70.isBreak();
        boolean boolean89 = node70.wasEmptyNode();
        boolean boolean90 = node70.isVarArgs();
        boolean boolean91 = nodeIterableList63.equals((java.lang.Object) node70);
        node70.setQuotedString();
        java.lang.Object obj94 = node70.getProp(5);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        com.google.javascript.rhino.jstype.JSType jSType44 = objectType40.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair45 = objectType6.getTypesUnderInequality(jSType44);
        boolean boolean46 = jSType44.matchesNumberContext();
        boolean boolean47 = jSType44.hasDisplayName();
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSType44.toObjectType();
        boolean boolean49 = jSType44.isNullable();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNotNull(typePair45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder12 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray22 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility20 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo32.getVisibility();
        boolean boolean36 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo32.setVisibility(visibility37);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray39 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = jSDocInfo44.getVisibility();
        boolean boolean48 = jSDocInfo44.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo44.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility49 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray22);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray39);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(visibility47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder53);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean4 = node3.isOptionalArg();
        int int5 = node3.getSourceOffset();
        boolean boolean6 = node3.isCatch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        boolean boolean15 = node12.isNot();
        int int16 = node12.getLineno();
        boolean boolean17 = node12.isAdd();
        com.google.javascript.rhino.Node node18 = node12.cloneTree();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isNot();
        int int28 = node24.getLineno();
        boolean boolean29 = node24.isAdd();
        boolean boolean30 = node18.hasChild(node24);
        boolean boolean31 = node24.isDefaultCase();
        int int32 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isTypeOf();
        boolean boolean37 = node35.isRegExp();
        com.google.javascript.rhino.Node node38 = node24.copyInformationFromForTree(node35);
        boolean boolean39 = node38.isBlock();
        boolean boolean40 = node38.isLabel();
        com.google.javascript.rhino.Node node41 = node3.srcrefTree(node38);
        node41.setWasEmptyNode(false);
        boolean boolean44 = node41.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = node41.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition18 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker20.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker20.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList24 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker7, marker11, marker15, marker16, marker20);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker15.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker15.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition27 = marker15.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(nodeSourcePosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNotNull(markerList24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(nodeSourcePosition27);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry5.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = objectType9.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot12 = objectType9.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean14 = objectType9.isEnumElementType();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable23);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor25 = nodeIterableList24.listIterator();
        boolean boolean26 = nodeIterableItor25.hasPrevious();
        boolean boolean27 = nodeIterableItor25.hasPrevious();
        int int28 = nodeIterableItor25.previousIndex();
        boolean boolean29 = objectType9.equals((java.lang.Object) int28);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertNull(jSTypeStaticSlot12);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(nodeIterableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor3 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        boolean boolean5 = nodeIterableList4.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor6 = nodeIterableList4.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = nodeIterableList4.asList();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode10);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry9.createObjectType(objectType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = objectType13.toObjectType();
        boolean boolean15 = objectType14.matchesInt32Context();
        boolean boolean16 = objectType14.isStringValueType();
        boolean boolean17 = objectType14.canBeCalled();
        boolean boolean18 = objectType14.isAllType();
        boolean boolean19 = nodeIterableList4.equals((java.lang.Object) objectType14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition23, typePosition24, typePosition25, typePosition26, typePosition27, typePosition28 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = nodeIterableList20.toArray(typePositionArray29);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor31 = nodeIterableList20.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray55 = nodeIterableList54.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = nodeIterableList54.reverse();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList56, 52, node63 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = nodeIterableList70.reverse();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean80 = node79.isThis();
        node76.addChildToBack(node79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList72, 52, node79 };
        java.lang.Object[][] objArray83 = new java.lang.Object[][] { objArray50, objArray66, objArray82 };
        java.lang.Object[][] objArray84 = nodeIterableList34.toArray(objArray83);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList85 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray86 = nodeIterableList85.toArray();
        int int88 = nodeIterableList85.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray89 = nodeIterableList85.toArray();
        boolean boolean90 = nodeIterableList34.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList85);
        java.lang.Object[] objArray91 = nodeIterableList34.toArray();
        boolean boolean92 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        java.lang.Object[] objArray93 = nodeIterableList20.toArray();
        boolean boolean94 = nodeIterableList4.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList95 = nodeIterableList4.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList96 = nodeIterableList4.reverse();
        java.lang.String str97 = nodeIterableList4.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = nodeIterableList0.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableItor3);
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(nodeIterableItor31);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(nodeIterableList85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(nodeIterableList95);
        org.junit.Assert.assertNotNull(nodeIterableList96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[]" + "'", str97, "[]");
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        boolean boolean29 = node26.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node26.new FileLevelJsDocBuilder();
        boolean boolean31 = node26.isParamList();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDebugger();
        boolean boolean41 = node34.isVoid();
        int int43 = node34.getIntProp((int) (short) 1);
        node26.addChildToFront(node34);
        java.lang.String str45 = node26.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        node5.removeProp(1);
        int int10 = node5.getSourceOffset();
        boolean boolean11 = node5.hasMoreThanOneChild();
        boolean boolean12 = node5.isFromExterns();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDec();
        boolean boolean22 = node15.isString();
        boolean boolean23 = node15.isSwitch();
        node15.setIsSyntheticBlock(false);
        boolean boolean26 = node15.isContinue();
        boolean boolean27 = node15.isFalse();
        node5.addChildToBack(node15);
        node15.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        boolean boolean44 = jSDocInfo22.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = objectType64.toObjectType();
        boolean boolean66 = objectType65.matchesInt32Context();
        boolean boolean67 = objectType65.isStringValueType();
        boolean boolean68 = objectType65.canBeCalled();
        boolean boolean69 = objectType65.isAllType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType70 = objectType65.toMaybeEnumElementType();
        int int71 = nodeIterableList45.lastIndexOf((java.lang.Object) objectType65);
        boolean boolean72 = objectType65.canBeCalled();
        boolean boolean73 = objectType65.isConstructor();
        boolean boolean74 = objectType65.isNumberValueType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(enumElementType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream53 = nodeIterableList2.parallelStream();
        boolean boolean54 = nodeIterableList2.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor55 = nodeIterableList2.listIterator();
        boolean boolean56 = nodeIterableItor55.hasNext();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(40);
        boolean boolean59 = node58.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node58.siblings();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor55.set(nodeIterable60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        boolean boolean6 = objectType5.isNominalConstructor();
        boolean boolean7 = objectType5.isNullable();
        boolean boolean8 = objectType5.isFunctionPrototypeType();
        java.lang.String str9 = objectType5.getDisplayName();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node54.siblings();
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray67 = nodeIterableList66.toArray();
        boolean boolean68 = strSet63.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        java.lang.Object[] objArray69 = nodeIterableList66.toArray();
        java.lang.Object[] objArray70 = nodeIterableList66.toArray();
        boolean boolean71 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        boolean boolean72 = nodeIterableList66.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList73 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray74 = nodeIterableList73.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = nodeIterableList73.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor76 = nodeIterableList73.iterator();
        boolean boolean77 = nodeIterableList66.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList73);
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode80 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry79.setResolveMode(resolveMode80);
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        boolean boolean84 = jSTypeRegistry79.canPropertyBeDefined(jSType82, "Unknown class name");
        jSTypeRegistry79.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry79.createAnonymousObjectType();
        objectType87.clearResolved();
        java.lang.String str89 = objectType87.toAnnotationString();
        boolean boolean90 = objectType87.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType91 = objectType87.autobox();
        boolean boolean92 = jSType91.isBooleanObjectType();
        com.google.javascript.rhino.jstype.JSType jSType93 = jSType91.autoboxesTo();
        int int94 = nodeIterableList66.indexOf((java.lang.Object) jSType93);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList66.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(nodeIterableList73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList75);
        org.junit.Assert.assertNotNull(nodeIterableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + resolveMode80 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode80.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "{}" + "'", str89, "{}");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        java.io.IOException iOException2 = new java.io.IOException("None");
        java.io.IOException iOException4 = new java.io.IOException();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        iOException2.addSuppressed((java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("None");
        java.io.IOException iOException12 = new java.io.IOException();
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        iOException10.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException18 = new java.io.IOException();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException19);
        java.io.IOException iOException22 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException22);
        java.io.IOException iOException24 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException23);
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException();
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.lang.Throwable[] throwableArray31 = iOException29.getSuppressed();
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        iOException29.addSuppressed((java.lang.Throwable) iOException32);
        java.io.IOException iOException36 = new java.io.IOException();
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException37);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList39 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException2, (java.lang.Throwable) iOException10, (java.lang.Throwable) iOException19, (java.lang.Throwable) iOException24, (java.lang.Throwable) iOException28, (java.lang.Throwable) iOException32, (java.lang.Throwable) iOException37);
        java.io.IOException iOException41 = new java.io.IOException("None");
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException44);
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        iOException41.addSuppressed((java.lang.Throwable) iOException46);
        java.io.IOException iOException49 = new java.io.IOException("None");
        java.io.IOException iOException51 = new java.io.IOException();
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException52);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) iOException53);
        iOException49.addSuppressed((java.lang.Throwable) iOException54);
        java.io.IOException iOException57 = new java.io.IOException();
        java.io.IOException iOException58 = new java.io.IOException((java.lang.Throwable) iOException57);
        java.io.IOException iOException59 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException58);
        java.io.IOException iOException61 = new java.io.IOException();
        java.io.IOException iOException62 = new java.io.IOException((java.lang.Throwable) iOException61);
        java.io.IOException iOException63 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException62);
        java.io.IOException iOException65 = new java.io.IOException();
        java.io.IOException iOException66 = new java.io.IOException((java.lang.Throwable) iOException65);
        java.io.IOException iOException67 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException66);
        java.io.IOException iOException68 = new java.io.IOException();
        java.io.IOException iOException69 = new java.io.IOException((java.lang.Throwable) iOException68);
        java.lang.Throwable[] throwableArray70 = iOException68.getSuppressed();
        java.io.IOException iOException71 = new java.io.IOException();
        java.io.IOException iOException72 = new java.io.IOException((java.lang.Throwable) iOException71);
        iOException68.addSuppressed((java.lang.Throwable) iOException71);
        java.io.IOException iOException75 = new java.io.IOException();
        java.io.IOException iOException76 = new java.io.IOException((java.lang.Throwable) iOException75);
        java.io.IOException iOException77 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException76);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList78 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException41, (java.lang.Throwable) iOException49, (java.lang.Throwable) iOException58, (java.lang.Throwable) iOException63, (java.lang.Throwable) iOException67, (java.lang.Throwable) iOException71, (java.lang.Throwable) iOException76);
        iOException37.addSuppressed((java.lang.Throwable) iOException49);
        java.io.IOException iOException80 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.io.IOException iOException81 = new java.io.IOException("{1078264502}", (java.lang.Throwable) iOException80);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableList39);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableList78);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean15 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isVoid();
        boolean boolean40 = node32.hasOneChild();
        com.google.javascript.rhino.InputId inputId41 = node32.getInputId();
        java.lang.String str42 = node32.toStringTree();
        com.google.javascript.rhino.Node node43 = node32.removeFirstChild();
        boolean boolean44 = node32.isVarArgs();
        node17.addChildToBack(node32);
        boolean boolean46 = node17.isSetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node17, "{proxy:{1019185563}}");
        boolean boolean49 = jSDocInfoBuilder1.recordType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str42, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        java.lang.String str23 = node22.toStringTree();
        boolean boolean24 = node22.isGetElem();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node34.isNot();
        int int38 = node34.getLineno();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node49 = node34.srcref(node44);
        int int50 = node34.getCharno();
        boolean boolean51 = node34.isQuotedString();
        boolean boolean52 = node34.isIf();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        boolean boolean63 = node58.isAdd();
        com.google.javascript.rhino.Node node64 = node34.useSourceInfoFromForTree(node58);
        int int65 = node28.getIndexOfChild(node64);
        com.google.javascript.rhino.Node node66 = node22.useSourceInfoIfMissingFromForTree(node64);
        java.lang.String str67 = node22.getQualifiedName();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        boolean boolean76 = node70.isDec();
        boolean boolean77 = node70.isBlock();
        boolean boolean78 = node70.isTrue();
        boolean boolean79 = node70.isSetterDef();
        node70.removeProp(30);
        com.google.javascript.rhino.Node node82 = node70.getLastChild();
        boolean boolean83 = node70.isString();
        int int84 = node22.getIndexOfChild(node70);
        boolean boolean85 = node70.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR hi!\n" + "'", str23, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDebugger();
        com.google.javascript.rhino.Node node14 = node7.getFirstChild();
        boolean boolean15 = node7.isNot();
        boolean boolean16 = node7.isIn();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node20.isDebugger();
        boolean boolean27 = node20.isAssign();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(51, node20, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable31 = node30.getAncestors();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(1, node7, node30, 54, 10);
        java.lang.String str35 = node7.toString();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        node39.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node63.isNot();
        int int67 = node63.getLineno();
        com.google.javascript.rhino.Node node68 = node53.srcref(node63);
        int int69 = node53.getCharno();
        com.google.javascript.rhino.Node node70 = node39.copyInformationFrom(node53);
        boolean boolean71 = node39.isTrue();
        boolean boolean72 = node39.isCase();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(52, node39);
        boolean boolean74 = node39.isDefaultCase();
        com.google.javascript.rhino.Node node75 = node7.useSourceInfoIfMissingFrom(node39);
        boolean boolean76 = nodeIterableList0.contains((java.lang.Object) node75);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList77 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray78 = nodeIterableList77.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = nodeIterableList77.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream80 = nodeIterableList77.stream();
        java.lang.String[] strArray82 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray83 = nodeIterableList77.toArray(strArray82);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator84 = nodeIterableList77.spliterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor85 = nodeIterableList77.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor86 = nodeIterableList77.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = nodeIterableList0.addAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR hi!" + "'", str35, "OR hi!");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeIterableList77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(nodeIterableStream80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator84);
        org.junit.Assert.assertNotNull(nodeIterableItor85);
        org.junit.Assert.assertNotNull(nodeIterableItor86);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        node1.setLength((int) ' ');
        boolean boolean4 = node1.isTrue();
        java.util.Set<java.lang.String> strSet5 = null;
        node1.setDirectives(strSet5);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node18.isDebugger();
        boolean boolean25 = node18.isSyntheticBlock();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(46);
        boolean boolean28 = node27.isCall();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.siblings();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet40);
        node31.detachChildren();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(45, node10, node18, node27, node31, (int) (short) 10, 8);
        com.google.javascript.rhino.jstype.JSType jSType47 = node27.getJSType();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable48 = node27.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildToFront(node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertNotNull(ancestorIterable48);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        boolean boolean5 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnEndLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getEndLine();
        stringPosition0.setItem("InputId: ");
        stringPosition0.setItem("{1078264502}");
        stringPosition0.setPositionInformation((int) ' ', (int) '#', 43, 2);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        node3.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node12 = node3.getLastChild();
        boolean boolean13 = node3.isCall();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        node16.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node25 = node16.getLastChild();
        boolean boolean26 = node16.isCall();
        com.google.javascript.rhino.Node node27 = node3.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node30.isDebugger();
        boolean boolean37 = node30.isVoid();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isTypeOf();
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node40);
        node27.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("{599635391}");
        boolean boolean46 = node45.isRegExp();
        boolean boolean47 = node27.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node48 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(51, node27, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator86 = nodeIterableList79.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList79.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor89 = nodeIterableList79.listIterator(0);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator86);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertNotNull(nodeIterableItor89);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isNE();
        boolean boolean29 = node27.isInstanceOf();
        boolean boolean30 = node27.isThrow();
        node27.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node27.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry35.createAnonymousObjectType();
        objectType43.clearResolved();
        node27.setJSType((com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node48.isDebugger();
        com.google.javascript.rhino.Node node55 = node48.getFirstChild();
        boolean boolean56 = node48.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType57 = jSTypeRegistry22.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType43, node48);
        boolean boolean58 = jSTypeRegistry11.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry11.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        jSTypeRegistry1.forwardDeclareType("OR hi! [directives: []]");
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        boolean boolean75 = jSTypeRegistry70.canPropertyBeDefined(jSType73, "Unknown class name");
        jSTypeRegistry70.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry70.createAnonymousObjectType();
        objectType78.clearResolved();
        boolean boolean80 = objectType78.isConstructor();
        boolean boolean81 = objectType78.isEnumType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = objectType78.getParentScope();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot84 = jSTypeStaticScope82.getSlot("Node tree inequality:\nTree1:\nSTRING OR hi! [var_args_name: 1] 41\n\n\nTree2:\nOR hi!\n\n\nSubtree1: STRING OR hi! [var_args_name: 1] 41\n\n\nSubtree2: OR hi!\n");
        jSTypeRegistry1.resolveTypesInScope(jSTypeStaticScope82);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot87 = jSTypeStaticScope82.getSlot("STRING hi! [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(functionType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNull(jSTypeStaticSlot84);
        org.junit.Assert.assertNull(jSTypeStaticSlot87);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "{776423123}", 5, 4093);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = nodeIterableList3.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (0) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList4 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        boolean boolean22 = node15.isSyntheticBlock();
        boolean boolean23 = node15.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node15, "Unknown class name");
        boolean boolean27 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression25, "?");
        boolean boolean28 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean29 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean31 = jSDocInfoBuilder1.hasParameter("{511159613}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.lang.Object[] objArray18 = nodeIterableList14.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isAssign();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(51, node22, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node32.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator34 = ancestorIterable33.spliterator();
        int int35 = nodeIterableList14.lastIndexOf((java.lang.Object) ancestorIterable33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isNE();
        boolean boolean40 = node38.isInstanceOf();
        boolean boolean41 = node38.isThrow();
        node38.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node38.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable44);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator46 = ancestorIterable44.spliterator();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node49.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean57 = nodeIterableList56.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable33);
        boolean boolean58 = nodeIterableList56.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable44);
        boolean boolean59 = nodeIterableList56.add(nodeIterable55);
        java.lang.Object[] objArray60 = nodeIterableList56.toArray();
        java.lang.Object[] objArray61 = nodeIterableList56.toArray();
        java.lang.Object[] objArray62 = nodeIterableList56.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        boolean boolean66 = jSDocInfo63.isNoTypeCheck();
        boolean boolean67 = jSDocInfo63.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection68 = jSDocInfo63.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo63.getParameterType("OR hi! [var_args_name: 1] : {...}");
        int int71 = nodeIterableList56.indexOf((java.lang.Object) jSTypeExpression70);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList56.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(markerCollection68);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor72);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        boolean boolean80 = jSDocInfoBuilder9.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        java.lang.Object[] objArray14 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isImplicitCast();
        boolean boolean17 = jSDocInfo15.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo15.getBaseType();
        boolean boolean19 = nodeIterableList0.contains((java.lang.Object) jSDocInfo15);
        boolean boolean20 = jSDocInfo15.isIdGenerator();
        boolean boolean21 = jSDocInfo15.hasEnumParameterType();
        boolean boolean23 = jSDocInfo15.hasParameter("{1458992068}");
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isConstructor();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isExterns();
        boolean boolean17 = jSDocInfo15.hasReturnType();
        boolean boolean18 = jSDocInfo15.isOverride();
        jSDocInfo15.setLicense("hi!");
        boolean boolean21 = strSet11.contains((java.lang.Object) jSDocInfo15);
        java.lang.String str22 = jSDocInfo15.getVersion();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo15.getModifies();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDebugger();
        boolean boolean33 = node26.isVoid();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isTypeOf();
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node36);
        com.google.javascript.rhino.Node node39 = node26.getLastSibling();
        boolean boolean40 = node26.isNew();
        boolean boolean41 = strSet23.remove((java.lang.Object) node26);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node44 = node43.getLastChild();
        boolean boolean45 = node43.isNumber();
        boolean boolean46 = node43.isNull();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        boolean boolean52 = node50.isDelProp();
        int int53 = node50.getChildCount();
        java.lang.String str54 = node50.toStringTree();
        boolean boolean55 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(50, node50, 12, 38);
        java.lang.String str59 = node58.getQualifiedName();
        boolean boolean60 = node58.isReturn();
        boolean boolean61 = node58.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node62 = node43.srcref(node58);
        boolean boolean63 = strSet23.contains((java.lang.Object) node62);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        java.lang.Object[] objArray66 = nodeIterableList64.toArray();
        boolean boolean67 = strSet23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList64);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR hi!\n" + "'", str54, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node6 = node5.cloneNode();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, node5);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        boolean boolean16 = node13.isNot();
        int int17 = node13.getLineno();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node28 = node13.srcref(node23);
        int int29 = node13.getCharno();
        com.google.javascript.rhino.Node node31 = node13.getAncestor((int) (short) 1);
        com.google.javascript.rhino.Node node32 = node5.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean33 = node13.isObjectLit();
        boolean boolean34 = node13.isFunction();
        boolean boolean35 = node13.hasOneChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("{637073315}");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean18 = strSet11.remove((java.lang.Object) stringPosition17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node21.siblings();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordInterface();
        boolean boolean37 = jSDocInfoBuilder34.recordDescription("hi!");
        boolean boolean38 = jSDocInfoBuilder34.recordHiddenness();
        boolean boolean39 = strSet30.remove((java.lang.Object) jSDocInfoBuilder34);
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList40 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet11, (java.util.HashSet<java.lang.String>) strSet30);
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray41 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility[]> visibilityArrayList42 = com.google.common.collect.ImmutableList.copyOf(visibilityArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[][] visibilityEnumArray43 = strSet11.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[][]) visibilityArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSetList40);
        org.junit.Assert.assertNotNull(visibilityArray41);
        org.junit.Assert.assertNotNull(visibilityArrayList42);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        node2.addSuppression("OR hi! 0\n");
        boolean boolean15 = node2.isIn();
        java.lang.String str16 = node2.getString();
        boolean boolean17 = node2.isOnlyModifiesThisCall();
        boolean boolean18 = node2.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry25.createAnonymousObjectType();
        objectType33.clearResolved();
        node17.setJSType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        boolean boolean46 = node38.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType33, node38);
        boolean boolean48 = jSTypeRegistry1.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry50.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        int int56 = node55.getType();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node59.siblings();
        node59.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType68 = node59.getJSType();
        com.google.javascript.rhino.Node node69 = node59.getParent();
        com.google.javascript.rhino.Node node70 = node55.srcref(node59);
        java.lang.String str71 = node59.getString();
        boolean boolean72 = node59.isInc();
        boolean boolean73 = node59.isCall();
        com.google.javascript.rhino.Node node75 = node59.getAncestor(200716);
        boolean boolean76 = node59.isFunction();
        boolean boolean77 = node59.isSwitch();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(functionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 83 + "'", int56 == 83);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean62 = jSDocInfoBuilder1.recordDescription("OR hi! 0\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(53, "{1592333498}", (int) (byte) 0, 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = jSDocInfoBuilder1.build(node67);
        boolean boolean69 = jSDocInfo68.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        node12.setLength((int) ' ');
        jSDocInfo0.setAssociatedNode(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getSuppressions();
        boolean boolean18 = jSDocInfo16.isNoSideEffects();
        java.lang.String str19 = jSDocInfo16.getReturnDescription();
        boolean boolean21 = jSDocInfo16.hasDescriptionForParameter("{...}");
        java.lang.String str22 = jSDocInfo16.getSourceName();
        boolean boolean23 = jSDocInfo16.hasBaseType();
        node12.setJSDocInfo(jSDocInfo16);
        boolean boolean25 = jSDocInfo16.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        boolean boolean19 = jSTypeRegistry14.canPropertyBeDefined(jSType17, "Unknown class name");
        jSTypeRegistry14.identifyNonNullableName("Unknown class name");
        jSTypeRegistry14.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry24.createAnonymousObjectType();
        objectType32.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType35 = objectType32.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry14.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType32);
        boolean boolean37 = objectType32.isNullable();
        boolean boolean38 = objectType32.isEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        boolean boolean45 = jSTypeRegistry40.canPropertyBeDefined(jSType43, "Unknown class name");
        jSTypeRegistry40.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable49 = jSTypeRegistry40.getTypesWithProperty("hi!");
        jSTypeRegistry40.resetForTypeCheck();
        jSTypeRegistry40.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        boolean boolean59 = jSTypeRegistry54.canPropertyBeDefined(jSType57, "Unknown class name");
        jSTypeRegistry54.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = objectType67.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { objectType67 };
        com.google.javascript.rhino.Node node70 = jSTypeRegistry54.createParametersWithVarArgs(jSTypeArray69);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry40.createUnionType(jSTypeArray69);
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry10.createConstructorTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType32, jSTypeArray69);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray69);
        com.google.javascript.rhino.ErrorReporter errorReporter74 = jSTypeRegistry1.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry76.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.ObjectType objectType81 = objectType80.toObjectType();
        boolean boolean82 = objectType81.matchesInt32Context();
        boolean boolean83 = objectType81.isStringValueType();
        boolean boolean84 = objectType81.canBeCalled();
        boolean boolean85 = objectType81.isVoidType();
        com.google.javascript.rhino.jstype.JSType jSType86 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType87 = jSTypeRegistry1.createParameterizedType(objectType81, jSType86);
        jSTypeRegistry1.clearNamedTypes();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable49);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(errorReporter74);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(parameterizedType87);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        boolean boolean9 = jSTypeRegistry4.canPropertyBeDefined(jSType7, "Unknown class name");
        jSTypeRegistry4.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType17, "");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry21.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType34, "");
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        boolean boolean43 = jSTypeRegistry38.canPropertyBeDefined(jSType41, "Unknown class name");
        jSTypeRegistry38.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry38.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType51, "");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        boolean boolean60 = jSTypeRegistry55.canPropertyBeDefined(jSType58, "Unknown class name");
        jSTypeRegistry55.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType68 = jSTypeRegistry64.createObjectType(objectType67);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry55.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType68, "");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry72.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType85, "");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray88 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, objectType51, objectType68, objectType85 };
        com.google.javascript.rhino.jstype.FunctionType functionType89 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSType19, jSTypeArray88);
        com.google.javascript.rhino.jstype.JSType jSType90 = functionType89.autobox();
        boolean boolean91 = functionType89.isFunctionPrototypeType();
        boolean boolean92 = functionType89.isNullable();
        java.lang.String str93 = functionType89.toAnnotationString();
        boolean boolean94 = functionType89.isTemplateType();
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(jSTypeArray88);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertNotNull(jSType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "function (?, ?, ?, ...[?]): ?" + "'", str93, "function (?, ?, ?, ...[?]): ?");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.JSType jSType18 = objectType14.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean19 = objectType14.isNoType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry21.createObjectType(objectType24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = objectType25.toObjectType();
        boolean boolean27 = objectType14.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType26);
        com.google.javascript.rhino.jstype.JSType jSType28 = objectType14.restrictByNotNullOrUndefined();
        boolean boolean29 = jSType28.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("{1923315740}");
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("Unknown class name", "Unknown class name");
        boolean boolean10 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean12 = jSDocInfoBuilder1.recordDescription("{1923315740}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean17 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder14.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder14.markName("", staticSourceFile22, 29, 50);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isSyntheticBlock();
        boolean boolean36 = node28.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node28, "Unknown class name");
        boolean boolean40 = jSDocInfoBuilder14.recordThrowDescription(jSTypeExpression38, "?");
        boolean boolean42 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression38, "InputId: Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(40);
        boolean boolean2 = node1.isReturn();
        boolean boolean3 = node1.isSetterDef();
        boolean boolean4 = node1.isContinue();
        boolean boolean5 = node1.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isAnd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.children();
        int int5 = node2.getSourcePosition();
        boolean boolean6 = node2.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("hi!");
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean6 = jSDocInfo0.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet8.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSpliterator9);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnStartLine();
        java.lang.String str3 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(16, 53, 48, 5);
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getPositionOnStartLine();
        int int11 = stringPosition0.getStartLine();
        int int12 = stringPosition0.getStartLine();
        int int13 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setDeprecated(false);
        boolean boolean10 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder63.recordDeprecationReason("TYPEOF OR hi!\n");
        boolean boolean80 = jSDocInfoBuilder63.recordParameterDescription("OR []", "hi!");
        boolean boolean81 = jSDocInfoBuilder63.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean16 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean18 = jSDocInfoBuilder1.hasParameter("{1131164336}");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        boolean boolean30 = node25.isAdd();
        com.google.javascript.rhino.Node node31 = node25.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node31.setJSType(jSType32);
        boolean boolean34 = node31.isString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.siblings();
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray50 = nodeIterableList49.toArray();
        boolean boolean51 = strSet46.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList49);
        boolean boolean52 = strSet46.isEmpty();
        node31.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean54 = node31.isObjectLit();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node31, "Named type with empty name component");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node59.siblings();
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet68);
        node59.putBooleanProp(0, false);
        node59.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean76 = node59.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node59.getStaticSourceFile();
        boolean boolean78 = staticSourceFile77.isExtern();
        int int80 = staticSourceFile77.getLineOffset(16);
        int int82 = staticSourceFile77.getLineOffset(42);
        node31.setStaticSourceFile(staticSourceFile77);
        jSDocInfoBuilder1.markName("{...}", staticSourceFile77, 35, (int) (short) -1);
        boolean boolean87 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-2147483648) + "'", int82 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.hasParameterType("{1078264502}");
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("[]");
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition8.getEndLine();
        int int16 = namePosition8.getEndLine();
        int int17 = namePosition8.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.addReference("None");
        boolean boolean16 = jSDocInfoBuilder1.recordReturnDescription("JSDocInfo");
        boolean boolean17 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = null;
        boolean boolean19 = jSDocInfoBuilder1.recordVisibility(visibility18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        int int51 = nodeIterableList47.size();
        int int52 = nodeIterableList47.size();
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator53 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList47.replaceAll(nodeIterableUnaryOperator53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        boolean boolean10 = objectType6.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType11 = objectType6.getTypeOfThis();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = objectType17.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        boolean boolean25 = jSTypeRegistry20.canPropertyBeDefined(jSType23, "Unknown class name");
        jSTypeRegistry20.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry20.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType33, "");
        boolean boolean36 = jSType35.isInstanceType();
        boolean boolean37 = jSType35.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType38 = jSType35.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSType35.dereference();
        boolean boolean40 = jSType35.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair41 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType18, jSType35);
        com.google.javascript.rhino.jstype.JSType jSType42 = typePair41.typeA;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = objectType6.testForEquality(jSType42);
        boolean boolean44 = jSType42.isAllType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node6.siblings();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node21.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = ancestorIterable22.spliterator();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean34 = nodeIterableList33.add(nodeIterable7);
        boolean boolean35 = nodeIterableList33.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable22);
        boolean boolean36 = nodeIterableList33.add(nodeIterable32);
        java.lang.Object[] objArray37 = nodeIterableList33.toArray();
        java.lang.Object[] objArray38 = nodeIterableList33.toArray();
        boolean boolean39 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList0.listIterator();
        int int41 = nodeIterableItor40.previousIndex();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType10 = jSTypeRegistry1.getType("[]");
        jSTypeRegistry1.forwardDeclareType("");
        boolean boolean14 = jSTypeRegistry1.isForwardDeclaredType("None");
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        boolean boolean21 = jSTypeRegistry16.canPropertyBeDefined(jSType19, "Unknown class name");
        jSTypeRegistry16.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry16.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType29, "");
        boolean boolean32 = objectType29.isEnumType();
        boolean boolean33 = objectType29.isNoObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry1.createObjectType(objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        boolean boolean41 = jSTypeRegistry36.canPropertyBeDefined(jSType39, "Unknown class name");
        jSTypeRegistry36.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry36.createAnonymousObjectType();
        objectType44.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType47 = objectType44.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType48 = objectType44.autobox();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType49 = jSType48.toMaybeEnumElementType();
        boolean boolean50 = objectType34.canTestForEqualityWith(jSType48);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType48.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = objectType57.toObjectType();
        boolean boolean59 = objectType58.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope60 = objectType58.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType61 = objectType58.toMaybeUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        boolean boolean68 = jSTypeRegistry63.canPropertyBeDefined(jSType66, "Unknown class name");
        jSTypeRegistry63.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType76 = jSTypeRegistry72.createObjectType(objectType75);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry63.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType76, "");
        boolean boolean79 = jSType78.isInstanceType();
        boolean boolean80 = jSType78.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType81 = jSType78.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType82 = jSType78.dereference();
        objectType58.matchConstraint(objectType82);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType51.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType58);
        boolean boolean85 = jSType84.isRegexpType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertNull(enumElementType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope60);
        org.junit.Assert.assertNull(unionType61);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExport();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        boolean boolean9 = jSDocInfo0.hasParameter("{115157303}");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordParameter("OR hi! [directives: []]\n", jSTypeExpression9);
        jSDocInfoBuilder1.markName("None", 39, 46);
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        boolean boolean16 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node5.siblings();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = new com.google.javascript.rhino.JSTypeExpression(node5, "{1685056169}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }
}

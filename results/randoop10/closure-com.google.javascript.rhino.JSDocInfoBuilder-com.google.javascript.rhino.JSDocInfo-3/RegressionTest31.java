import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest31 {

    public static boolean debug = false;

    @Test
    public void test15501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15501");
        java.io.IOException iOException1 = new java.io.IOException("OR hi!");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test15502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15502");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor52 = nodeIterableList0.listIterator((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (100) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test15503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15503");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(1);
        boolean boolean2 = node1.isOr();
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry4.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean13 = node8.isEquivalentToTyped(node12);
        boolean boolean14 = node12.isFunction();
        com.google.javascript.rhino.Node node16 = node12.getAncestor(13);
        int int17 = node1.getIndexOfChild(node12);
        boolean boolean18 = node1.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15504");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnStartLine();
        java.lang.String str3 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(16, 53, 48, 5);
        int int9 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
    }

    @Test
    public void test15505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15505");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node18.getAncestors();
        boolean boolean20 = node18.isCall();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder22.recordConstancy();
        boolean boolean30 = jSDocInfoBuilder22.recordOverride();
        jSDocInfoBuilder22.markName("None", 5, 0);
        java.lang.String[] strArray37 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node43.siblings();
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node57.siblings();
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet66);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList69 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray70 = nodeIterableList69.toArray();
        boolean boolean71 = strSet66.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList69);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of(strSet38, strSet52, strSet66);
        boolean boolean73 = jSDocInfoBuilder22.recordModifies((java.util.Set<java.lang.String>) strSet66);
        java.lang.Object obj74 = null;
        boolean boolean75 = strSet66.contains(obj74);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        boolean boolean81 = jSDocInfoBuilder77.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = null;
        boolean boolean83 = jSDocInfoBuilder77.recordThrowType(jSTypeExpression82);
        boolean boolean84 = jSDocInfoBuilder77.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = null;
        boolean boolean86 = jSDocInfoBuilder77.recordReturnType(jSTypeExpression85);
        boolean boolean88 = jSDocInfoBuilder77.recordDeprecationReason("Not declared as a constructor");
        boolean boolean89 = strSet66.contains((java.lang.Object) "Not declared as a constructor");
        node18.setDirectives((java.util.Set<java.lang.String>) strSet66);
        boolean boolean91 = node18.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(nodeIterableList69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15506");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test15507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15507");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator4 = nodeIterableList3.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream6 = nodeIterableList3.parallelStream();
        boolean boolean7 = nodeIterableList3.isEmpty();
        int int8 = nodeIterableList3.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isExterns();
        boolean boolean11 = jSDocInfo9.hasReturnType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isImplicitCast();
        boolean boolean17 = jSDocInfo13.isOverride();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        boolean boolean20 = jSDocInfo13.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet21 = jSDocInfo13.getModifies();
        java.lang.String str22 = jSDocInfo13.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isExterns();
        boolean boolean25 = jSDocInfo23.hasReturnType();
        boolean boolean26 = jSDocInfo23.isOverride();
        jSDocInfo23.setLicense("hi!");
        java.lang.String str29 = jSDocInfo23.getDeprecationReason();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo23.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getSuppressions();
        boolean boolean33 = jSDocInfo31.isNoSideEffects();
        java.lang.String str34 = jSDocInfo31.getReturnDescription();
        boolean boolean36 = jSDocInfo31.hasParameter("Not declared as a constructor");
        java.lang.String str37 = jSDocInfo31.getMeaning();
        boolean boolean38 = jSDocInfo31.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        boolean boolean41 = jSDocInfo39.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getSuppressions();
        boolean boolean44 = jSDocInfo42.isNoSideEffects();
        java.lang.String str45 = jSDocInfo42.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo46.getType();
        boolean boolean49 = jSDocInfo46.isNoTypeCheck();
        boolean boolean50 = jSDocInfo46.isHidden();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList52 = com.google.common.collect.ImmutableList.of(jSDocInfo9, jSDocInfo13, jSDocInfo23, jSDocInfo31, jSDocInfo39, jSDocInfo42, jSDocInfo46);
        java.lang.String str53 = jSDocInfo9.getSourceName();
        java.lang.String str55 = jSDocInfo9.getDescriptionForParameter("InputId: ");
        com.google.javascript.rhino.Node node56 = jSDocInfo9.getAssociatedNode();
        int int57 = nodeIterableList3.indexOf((java.lang.Object) node56);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator4);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test15508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15508");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        boolean boolean9 = jSDocInfo0.isConstructor();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15509");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setReturnsTainted();
        int int59 = nodeIterableList51.lastIndexOf((java.lang.Object) sideEffectFlags56);
        sideEffectFlags56.setAllFlags();
        sideEffectFlags56.setMutatesThis();
        sideEffectFlags56.setReturnsTainted();
        sideEffectFlags56.setMutatesThis();
        sideEffectFlags56.setMutatesGlobalState();
        sideEffectFlags56.setMutatesArguments();
        int int66 = sideEffectFlags56.valueOf();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test15510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15510");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        boolean boolean29 = node26.isFor();
        boolean boolean30 = node26.isComma();
        node26.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        boolean boolean36 = node26.hasChild(node35);
        boolean boolean37 = node26.isString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node41.isDebugger();
        com.google.javascript.rhino.Node node48 = node41.getFirstChild();
        boolean boolean49 = node41.isNot();
        boolean boolean50 = node41.isIn();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isAssign();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(51, node54, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable65 = node64.getAncestors();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(1, node41, node64, 54, 10);
        boolean boolean69 = node41.isInc();
        // The following exception was thrown during execution in test generation
        try {
            node26.addChildToFront(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(ancestorIterable65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15511");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.String str12 = node11.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node11.siblings();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean17 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordIdGenerator();
        boolean boolean20 = jSDocInfoBuilder15.recordLends("None");
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isExterns();
        int int23 = jSDocInfo21.getParameterCount();
        boolean boolean24 = jSDocInfo21.isIdGenerator();
        boolean boolean25 = jSDocInfo21.isInterface();
        boolean boolean26 = jSDocInfo21.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo21.getThrownTypes();
        java.lang.String str28 = jSDocInfo21.getLendsName();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo21.getParameterNames();
        boolean boolean30 = jSDocInfoBuilder15.recordSuppressions(strSet29);
        node11.setDirectives(strSet29);
        boolean boolean32 = strSet29.isEmpty();
        java.util.LinkedHashSet[] linkedHashSetArray33 = new java.util.LinkedHashSet[] {};
        java.util.LinkedHashSet[] linkedHashSetArray34 = new java.util.LinkedHashSet[] {};
        java.util.LinkedHashSet[][] linkedHashSetArray35 = new java.util.LinkedHashSet[][] { linkedHashSetArray33, linkedHashSetArray34 };
        java.util.LinkedHashSet[][] linkedHashSetArray36 = strSet29.toArray(linkedHashSetArray35);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray33);
        org.junit.Assert.assertNotNull(linkedHashSetArray34);
        org.junit.Assert.assertNotNull(linkedHashSetArray35);
        org.junit.Assert.assertNotNull(linkedHashSetArray36);
    }

    @Test
    public void test15512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15512");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node5.getJSDocInfo();
        boolean boolean13 = node5.isFromExterns();
        java.lang.String str17 = node5.toString(false, true, true);
        boolean boolean18 = node5.isVar();
        node5.setLineno((int) (byte) 1);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PARAM_LIST" + "'", str17, "PARAM_LIST");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15513");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        boolean boolean2 = node1.isAdd();
        boolean boolean3 = node1.isIf();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15514");
        java.lang.String[] strArray44 = new java.lang.String[] { "PARAM_LIST\n", "{764597585}", "{640911743}", "{1713400232}", "None", "{115157303}", "{511159613}", "{599635391}", "SHNE 49\n", "{637073315}", "Node tree inequality:\nTree1:\nOR hi! 37 [directives: []]\n    OR hi!\n\n\nTree2:\nOR hi! [source_file: OR hi!\n    OR hi!\n]\n\n\nSubtree1: OR hi! 37 [directives: []]\n    OR hi!\n\n\nSubtree2: OR hi! [source_file: OR hi!\n    OR hi!\n]\n", "{1765065943}", "{633142433}", "java.io.IOException: OR hi!\n    OR hi!\n", "OR hi! [directives: []]", "java.io.IOException", "{511159613}", "{1088811920}", "{2116767362}", "java.io.IOException: java.io.IOException", "{858171436}", "java.io.IOException: java.io.IOException: ", "{1088811920}", "OR hi!\n    OR hi!\n", "{1765065943}", "{1765065943}", "function (this:me, {1531031083}): me", "{690905048}", "{2122885848}", "{1861601012}", "{690905048}", "function (this:me, {307817640}): me", "InputId: InputId: ", "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n", "OR hi!\n    OR hi!\n", "PARAM_LIST\n", "{1559619413}", "{843131012}", "{46019314}", "InputId: ", "{858171436}", "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n", "{637073315}", "{1640987128}" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean48 = strSet45.add("{1396813159}");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 100, 4, 1);
        int int53 = node52.getLineno();
        boolean boolean54 = node52.isNew();
        boolean boolean55 = strSet45.equals((java.lang.Object) node52);
        boolean boolean56 = node52.hasMoreThanOneChild();
        boolean boolean57 = node52.isThrow();
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test15515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15515");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        jSTypeRegistry45.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry48.createObjectType(objectType51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = objectType52.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot55 = objectType52.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType52);
        boolean boolean57 = objectType52.isEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry1.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType52, "{1131164336}", "INSTANCEOF", 48, 29);
        jSTypeRegistry1.forwardDeclareType("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry66.createObjectType(objectType69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = objectType70.toObjectType();
        boolean boolean72 = objectType71.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope73 = objectType71.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType74 = objectType71.toMaybeUnionType();
        java.lang.String str75 = objectType71.toDebugHashCodeString();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection76 = jSTypeRegistry1.getDirectImplementors(objectType71);
        jSTypeRegistry1.resetForTypeCheck();
        jSTypeRegistry1.identifyNonNullableName("function (this:me, {1912085975}): me");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNull(jSTypeStaticSlot55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope73);
        org.junit.Assert.assertNull(unionType74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{1280426429}" + "'", str75, "{1280426429}");
        org.junit.Assert.assertNotNull(functionTypeCollection76);
    }

    @Test
    public void test15516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15516");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("Named type with empty name component");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable5 = jSTypeRegistry1.getEachReferenceTypeWithProperty("OR hi! [directives: []]");
        jSTypeRegistry1.identifyNonNullableName("{1411964084}");
        boolean boolean8 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15517");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        jSDocInfoBuilder1.markName("Unknown class name", staticSourceFile6, 48, 5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordInterface();
        boolean boolean15 = jSDocInfoBuilder12.recordDescription("hi!");
        boolean boolean16 = jSDocInfoBuilder12.recordHiddenness();
        boolean boolean17 = jSDocInfoBuilder12.recordExpose();
        boolean boolean18 = jSDocInfoBuilder12.recordNoCompile();
        boolean boolean19 = jSDocInfoBuilder12.isPopulatedWithFileOverview();
        boolean boolean20 = jSDocInfoBuilder12.isPopulated();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        node24.putBooleanProp(0, false);
        node24.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean41 = node24.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node24.getStaticSourceFile();
        boolean boolean43 = staticSourceFile42.isExtern();
        int int45 = staticSourceFile42.getLineOffset(16);
        jSDocInfoBuilder12.markName("None", staticSourceFile42, (int) (byte) 1, 43);
        int int50 = staticSourceFile42.getColumnOfOffset(4);
        java.lang.String str51 = staticSourceFile42.getName();
        jSDocInfoBuilder1.markName("function (this:me, {470022249}): me", staticSourceFile42, (int) (short) -1, 43);
        int int56 = staticSourceFile42.getLineOffset(29);
        boolean boolean57 = staticSourceFile42.isExtern();
        boolean boolean58 = staticSourceFile42.isExtern();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2147483648) + "'", int45 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str51, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2147483648) + "'", int56 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test15518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15518");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor5 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = nodeIterableList0.asList();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        boolean boolean15 = node9.isDebugger();
        boolean boolean16 = node9.isVoid();
        boolean boolean17 = node9.isOptionalArg();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isAssign();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(51, node21, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node32 = node31.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node31.children();
        com.google.javascript.rhino.Node node34 = node9.useSourceInfoIfMissingFrom(node31);
        boolean boolean35 = node31.isHook();
        boolean boolean36 = nodeIterableList0.equals((java.lang.Object) node31);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream37 = nodeIterableList0.parallelStream();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node41.isDebugger();
        node41.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node55.isNot();
        int int59 = node55.getLineno();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node65.isNot();
        int int69 = node65.getLineno();
        com.google.javascript.rhino.Node node70 = node55.srcref(node65);
        int int71 = node55.getCharno();
        com.google.javascript.rhino.Node node72 = node41.copyInformationFrom(node55);
        boolean boolean73 = node41.isTrue();
        boolean boolean74 = node41.isCase();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(52, node41);
        boolean boolean76 = node41.isDefaultCase();
        boolean boolean77 = node41.isSetterDef();
        java.lang.String str78 = node41.toString();
        int int79 = nodeIterableList0.indexOf((java.lang.Object) node41);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean86 = node85.isThis();
        node82.addChildToBack(node85);
        boolean boolean88 = node82.isDebugger();
        boolean boolean89 = node82.isAssign();
        boolean boolean90 = node82.isInstanceOf();
        boolean boolean91 = node82.isTry();
        boolean boolean92 = node82.isDelProp();
        boolean boolean93 = node82.isDo();
        int int94 = nodeIterableList0.indexOf((java.lang.Object) boolean93);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(nodeIterableItor5);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterableStream37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR hi! [source_file: ]" + "'", str78, "OR hi! [source_file: ]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test15519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15519");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder1.recordExport();
        boolean boolean53 = jSDocInfoBuilder1.recordExport();
        boolean boolean54 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean56 = jSDocInfoBuilder1.hasParameter("{1539423957}");
        jSDocInfoBuilder1.markText("{9208978}", 0, (int) (byte) 100, 31, 0);
        boolean boolean63 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test15520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15520");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("OR hi! [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        node21.setSourceEncodedPosition((int) ' ');
        int int24 = node21.getType();
        jSDocInfo0.setAssociatedNode(node21);
        node21.putBooleanProp((int) 'a', false);
        boolean boolean29 = node21.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15521");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder11.recordThrowType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder11.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder11.recordReturnType(jSTypeExpression19);
        boolean boolean22 = jSDocInfoBuilder11.recordDeprecationReason("Not declared as a constructor");
        boolean boolean23 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean27 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean30 = jSDocInfoBuilder25.recordVisibility(visibility29);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordInterface();
        boolean boolean49 = jSDocInfoBuilder46.recordDescription("hi!");
        boolean boolean50 = jSDocInfoBuilder46.recordHiddenness();
        boolean boolean51 = strSet42.remove((java.lang.Object) jSDocInfoBuilder46);
        boolean boolean52 = jSDocInfoBuilder46.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder54.addAuthor("");
        boolean boolean57 = jSDocInfoBuilder54.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordThrowType(jSTypeExpression58);
        boolean boolean60 = jSDocInfoBuilder54.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        jSDocInfoBuilder54.markName("", staticSourceFile62, 29, 50);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        boolean boolean74 = node68.isDebugger();
        boolean boolean75 = node68.isSyntheticBlock();
        boolean boolean76 = node68.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node68, "Unknown class name");
        boolean boolean80 = jSDocInfoBuilder54.recordThrowDescription(jSTypeExpression78, "?");
        boolean boolean81 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression78);
        boolean boolean82 = jSDocInfoBuilder25.recordThisType(jSTypeExpression78);
        boolean boolean83 = jSDocInfoBuilder11.recordTypedef(jSTypeExpression78);
        boolean boolean84 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression78);
        boolean boolean85 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markName("{1005943596}", 4, 83);
        jSDocInfoBuilder1.markAnnotation("{1139208195}", (int) (short) 10, 16);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test15522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15522");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean76 = jSDocInfoBuilder43.isDescriptionRecorded();
        boolean boolean78 = jSDocInfoBuilder43.recordFileOverview("Not declared as a type name");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node81.isDebugger();
        boolean boolean88 = node81.isSyntheticBlock();
        boolean boolean89 = node81.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node81, "Unknown class name");
        boolean boolean92 = jSTypeExpression91.isOptionalArg();
        boolean boolean93 = jSDocInfoBuilder43.recordReturnType(jSTypeExpression91);
        boolean boolean95 = jSDocInfoBuilder43.recordFileOverview("{1078264502}");
        boolean boolean97 = jSDocInfoBuilder43.recordDeprecationReason("Node tree inequality:\nTree1:\nOR hi! 37 [directives: []]\n    OR hi!\n\n\nTree2:\nOR hi! [source_file: OR hi!\n    OR hi!\n]\n\n\nSubtree1: OR hi! 37 [directives: []]\n    OR hi!\n\n\nSubtree2: OR hi! [source_file: OR hi!\n    OR hi!\n]\n");
        boolean boolean98 = jSDocInfoBuilder43.recordConstancy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test15523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15523");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry17.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType30, "");
        boolean boolean33 = jSType32.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = objectType15.testForEquality(jSType32);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSType32.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry1.createNullableType(jSType32);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        boolean boolean44 = objectType43.matchesInt32Context();
        boolean boolean45 = objectType43.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        com.google.javascript.rhino.jstype.UnionType unionType63 = objectType60.toMaybeUnionType();
        com.google.javascript.rhino.Node node64 = objectType60.getRootNode();
        boolean boolean65 = objectType60.isRegexpType();
        boolean boolean66 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType43, objectType60);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry1.createNamedType("OR hi!", "Not declared as a type name", 40, 3);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry1.getNativeType(jSTypeNative72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(unionType63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSType71);
    }

    @Test
    public void test15524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15524");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8202, 48, 41);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode7 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry6.setResolveMode(resolveMode7);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        boolean boolean11 = jSTypeRegistry6.canPropertyBeDefined(jSType9, "Unknown class name");
        jSTypeRegistry6.identifyNonNullableName("Unknown class name");
        jSTypeRegistry6.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = objectType20.toObjectType();
        boolean boolean22 = objectType21.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope23 = objectType21.getParentScope();
        boolean boolean25 = jSTypeRegistry6.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType21, "INSTANCEOF");
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        boolean boolean33 = jSTypeRegistry28.canPropertyBeDefined(jSType31, "Unknown class name");
        jSTypeRegistry28.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry28.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        jSTypeRegistry39.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = objectType46.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot49 = objectType46.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType46);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType57 = objectType56.toMaybeEnumElementType();
        boolean boolean58 = jSTypeRegistry28.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType46, objectType56);
        com.google.javascript.rhino.jstype.JSType jSType60 = objectType46.getRestrictedTypeGivenToBooleanOutcome(true);
        jSTypeRegistry6.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) objectType46);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = jSTypeRegistry6.getErrorReporter();
        boolean boolean63 = jSTypeRegistry6.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        boolean boolean70 = jSTypeRegistry65.canPropertyBeDefined(jSType68, "Unknown class name");
        jSTypeRegistry65.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode75 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry74.setResolveMode(resolveMode75);
        com.google.javascript.rhino.jstype.ObjectType objectType77 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry74.createObjectType(objectType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry65.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType78, "");
        boolean boolean81 = objectType78.isEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode84 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry83.setResolveMode(resolveMode84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType87 = jSTypeRegistry83.createObjectType(objectType86);
        com.google.javascript.rhino.jstype.ObjectType objectType88 = objectType87.toObjectType();
        boolean boolean89 = objectType78.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType88);
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection90 = jSTypeRegistry6.getDirectImplementors(objectType78);
        node3.putProp(54, (java.lang.Object) objectType78);
        boolean boolean92 = objectType78.isCheckedUnknownType();
        boolean boolean93 = objectType78.isNumberObjectType();
        boolean boolean94 = objectType78.isAllType();
        org.junit.Assert.assertTrue("'" + resolveMode7 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode7.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNull(jSTypeStaticSlot49);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNull(enumElementType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(errorReporter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + resolveMode75 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode75.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + resolveMode84 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode84.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test15525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15525");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.util.Set<java.lang.String> strSet81 = jSDocInfo0.getSuppressions();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo0.getModifies();
        java.lang.String str83 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test15526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15526");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        java.lang.String str11 = jSDocInfo0.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean13 = jSDocInfo0.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean15 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo0.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test15527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("{1131164336}");
        jSDocInfo0.setLicense("{1277487578}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test15528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15528");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry24.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType37, "");
        boolean boolean40 = jSType39.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType39.collapseUnion();
        boolean boolean43 = objectType15.differsFrom(jSType39);
        boolean boolean44 = jSType39.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType6.getGreatestSubtype(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSType45.findPropertyType("OR hi! [directives: []]\n");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry49.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType62, "");
        com.google.javascript.rhino.jstype.UnionType unionType65 = objectType62.toMaybeUnionType();
        com.google.javascript.rhino.Node node66 = objectType62.getRootNode();
        boolean boolean67 = objectType62.isRegexpType();
        boolean boolean68 = jSType45.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType62);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType45.findPropertyType("Unknown class name");
        boolean boolean71 = jSType70.isUnknownType();
        com.google.javascript.rhino.jstype.UnionType unionType72 = jSType70.toMaybeUnionType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = unionType72.isFunctionType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(unionType65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(unionType72);
    }

    @Test
    public void test15529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15529");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        java.lang.String str4 = jSDocInfo0.getDescription();
        jSDocInfo0.addSuppression("function (this:me, {470022249}): me");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15530");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        objectType18.clearResolved();
        node2.setJSType((com.google.javascript.rhino.jstype.JSType) objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = node2.getJSType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        boolean boolean30 = objectType29.matchesInt32Context();
        boolean boolean31 = objectType29.isStringValueType();
        boolean boolean32 = objectType29.canBeCalled();
        boolean boolean33 = objectType29.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType34 = objectType29.getTypeOfThis();
        boolean boolean35 = objectType29.isNoResolvedType();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSType21.forceResolve(errorReporter22, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType29);
        boolean boolean37 = jSType21.isCheckedUnknownType();
        java.lang.String str38 = jSType21.toAnnotationString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
    }

    @Test
    public void test15531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15531");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        com.google.javascript.rhino.Node node38 = node31.getFirstChild();
        boolean boolean39 = node31.isNot();
        typePosition0.setItem(node31);
        java.lang.String str41 = node31.getString();
        node31.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isDebugger();
        com.google.javascript.rhino.InputId inputId49 = new com.google.javascript.rhino.InputId("");
        java.lang.String str50 = inputId49.getIdName();
        node46.setInputId(inputId49);
        boolean boolean52 = node46.isThrow();
        com.google.javascript.rhino.Node node53 = node46.getFirstChild();
        boolean boolean54 = node46.isHook();
        node46.setLength((int) (short) 0);
        int int57 = node31.getIndexOfChild(node46);
        boolean boolean58 = node31.isExprResult();
        boolean boolean59 = node31.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test15532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15532");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        boolean boolean34 = node2.isTrue();
        boolean boolean35 = node2.isCase();
        boolean boolean36 = node2.isNumber();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(50);
        node38.setLength((int) ' ');
        com.google.javascript.rhino.Node node41 = node38.cloneTree();
        com.google.javascript.rhino.Node node42 = node2.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node43 = node2.cloneNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test15533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15533");
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) 'a', nodeArray9, 8202, (int) (short) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) 'a', nodeArray9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(43, nodeArray9);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(35, nodeArray9, 100, 36);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(31, nodeArray9);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(48, nodeArray9);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(7, nodeArray9, 0, 38);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(19, nodeArray9);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(53, nodeArray9, 37, (int) ' ');
        org.junit.Assert.assertNotNull(nodeArray9);
    }

    @Test
    public void test15534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15534");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry24.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType37, "");
        boolean boolean40 = jSType39.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType39.collapseUnion();
        boolean boolean43 = objectType15.differsFrom(jSType39);
        boolean boolean44 = jSType39.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType6.getGreatestSubtype(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSType45.findPropertyType("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.UnionType unionType48 = jSType47.toMaybeUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        jSTypeRegistry50.forwardDeclareType("Unknown class name");
        jSTypeRegistry50.incrementGeneration();
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry50.createNamedType("{1923315740}", "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", 15, (int) (short) 0);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        boolean boolean67 = jSTypeRegistry62.canPropertyBeDefined(jSType65, "Unknown class name");
        jSTypeRegistry62.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode72 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry71.setResolveMode(resolveMode72);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry71.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry62.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType75, "");
        boolean boolean78 = jSType77.isInstanceType();
        boolean boolean79 = jSType77.isUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry50.createOptionalType(jSType77);
        boolean boolean81 = jSType47.canTestForShallowEqualityWith(jSType77);
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode84 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry83.setResolveMode(resolveMode84);
        com.google.javascript.rhino.jstype.JSType jSType86 = null;
        boolean boolean88 = jSTypeRegistry83.canPropertyBeDefined(jSType86, "Unknown class name");
        jSTypeRegistry83.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType91 = jSTypeRegistry83.createAnonymousObjectType();
        objectType91.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType94 = objectType91.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType95 = objectType91.autobox();
        boolean boolean96 = jSType77.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType91);
        boolean boolean97 = jSType77.isNullable();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNull(unionType48);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + resolveMode72 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode72.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + resolveMode84 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode84.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test15535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15535");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot8 = objectType5.getSlot("OR hi! [directives: []]\n");
        boolean boolean9 = objectType5.isStringValueType();
        com.google.javascript.rhino.jstype.JSType jSType11 = objectType5.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSType11.toObjectType();
        com.google.javascript.rhino.jstype.JSType jSType13 = objectType12.autobox();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertNull(jSTypeStaticSlot8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(jSType13);
    }

    @Test
    public void test15536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15536");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        java.lang.Object[] objArray6 = strSet3.toArray();
        java.lang.Object[] objArray7 = strSet3.toArray();
        strSet3.clear();
        int int9 = strSet3.size();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[OR hi!\n, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[OR hi!\n, ]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[OR hi!\n, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[OR hi!\n, ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test15537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15537");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope8 = objectType6.getParentScope();
        com.google.javascript.rhino.jstype.UnionType unionType9 = objectType6.toMaybeUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = objectType15.toObjectType();
        boolean boolean17 = objectType16.matchesInt32Context();
        boolean boolean18 = objectType16.isStringValueType();
        boolean boolean19 = objectType16.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry21.createObjectType(objectType24);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair26 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType16, (com.google.javascript.rhino.jstype.JSType) objectType25);
        boolean boolean27 = objectType16.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType33.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = objectType40.toObjectType();
        boolean boolean42 = objectType33.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType40);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = objectType48.toObjectType();
        boolean boolean50 = objectType49.matchesInt32Context();
        boolean boolean51 = objectType49.isStringValueType();
        boolean boolean52 = objectType49.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair59 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType49, (com.google.javascript.rhino.jstype.JSType) objectType58);
        boolean boolean60 = objectType49.isAllType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList61 = com.google.common.collect.ImmutableList.of(objectType6, objectType16, objectType40, objectType49);
        com.google.javascript.rhino.jstype.JSType jSType62 = objectType16.getTypeOfThis();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = objectType16.canTestForShallowEqualityWith(jSType63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope8);
        org.junit.Assert.assertNull(unionType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeList61);
        org.junit.Assert.assertNull(jSType62);
    }

    @Test
    public void test15538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15538");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordParameter("OR hi!", jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        boolean boolean14 = jSDocInfoBuilder10.recordHiddenness();
        boolean boolean15 = jSDocInfoBuilder10.recordConsistentIdGenerator();
        boolean boolean16 = jSDocInfoBuilder10.recordNoTypeCheck();
        jSDocInfoBuilder10.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean24 = jSDocInfoBuilder10.recordLends("JSDocInfo");
        boolean boolean26 = jSDocInfoBuilder10.recordLends("OR hi!\n    OR hi!\n");
        boolean boolean28 = jSDocInfoBuilder10.recordVersion("hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.siblings();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet40);
        int int43 = strSet40.size();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isAdd();
        boolean boolean53 = node49.isAnd();
        boolean boolean54 = strSet40.remove((java.lang.Object) node49);
        boolean boolean55 = jSDocInfoBuilder10.recordModifies((java.util.Set<java.lang.String>) strSet40);
        boolean boolean56 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isTypeOf();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        boolean boolean69 = node66.isNot();
        int int70 = node66.getLineno();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node76.isNot();
        int int80 = node76.getLineno();
        com.google.javascript.rhino.Node node81 = node66.srcref(node76);
        boolean boolean82 = node66.isString();
        boolean boolean83 = node66.isTry();
        boolean boolean84 = node66.isHook();
        com.google.javascript.rhino.Node node85 = node59.copyInformationFrom(node66);
        jSDocInfoBuilder1.markTypeNode(node59, 1, 4079, 31, 0, true);
        node59.setLength(13);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test15539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15539");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("GETELEM 2 [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder15.recordConstancy();
        boolean boolean23 = jSDocInfoBuilder15.recordOverride();
        boolean boolean24 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean26 = jSDocInfoBuilder15.recordMeaning("{...}");
        boolean boolean27 = jSDocInfoBuilder15.isConstructorRecorded();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node31, "");
        boolean boolean34 = jSTypeExpression33.isVarArgs();
        boolean boolean35 = jSDocInfoBuilder15.recordThisType(jSTypeExpression33);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression33);
        boolean boolean37 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression33);
        boolean boolean38 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean39 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean40 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test15540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15540");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry5.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = objectType9.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot12 = objectType9.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean14 = jSType13.isEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType15 = jSType13.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = jSType13.getJSDocInfo();
        boolean boolean17 = jSType13.isObject();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        boolean boolean25 = jSTypeRegistry20.canPropertyBeDefined(jSType23, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry27.createObjectType(objectType30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = objectType31.toObjectType();
        boolean boolean33 = objectType32.matchesInt32Context();
        boolean boolean34 = objectType32.isStringValueType();
        boolean boolean35 = objectType32.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType32, (com.google.javascript.rhino.jstype.JSType) objectType41);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry20.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType32);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        boolean boolean51 = objectType50.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope52 = objectType50.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType53 = objectType32.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType50);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = objectType50.toObjectType();
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType13.resolve(errorReporter18, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType50);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertNull(jSTypeStaticSlot12);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSType15);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(jSType55);
    }

    @Test
    public void test15541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15541");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope8 = objectType6.getParentScope();
        boolean boolean9 = objectType6.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = objectType47.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = objectType54.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        boolean boolean62 = jSTypeRegistry57.canPropertyBeDefined(jSType60, "Unknown class name");
        jSTypeRegistry57.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry66.createObjectType(objectType69);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry57.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType70, "");
        boolean boolean73 = jSType72.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = objectType55.testForEquality(jSType72);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSType72.collapseUnion();
        boolean boolean76 = objectType48.differsFrom(jSType72);
        boolean boolean77 = jSType72.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry11.createOptionalType(jSType72);
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = objectType85.toObjectType();
        boolean boolean87 = objectType86.matchesInt32Context();
        boolean boolean88 = objectType86.isBooleanValueType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot90 = objectType86.getOwnSlot("{1078264502}");
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType78.forceResolve(errorReporter79, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType86);
        boolean boolean92 = jSType91.canBeCalled();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = jSType91.toObjectType();
        com.google.javascript.rhino.jstype.JSType jSType94 = objectType6.getLeastSupertype(jSType91);
        com.google.javascript.rhino.jstype.JSType jSType95 = jSType91.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.JSType jSType96 = jSType95.collapseUnion();
        boolean boolean97 = jSType95.isNoResolvedType();
        boolean boolean98 = jSType95.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(objectType93);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test15542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15542");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("OR hi! [directives: []]\n");
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean10 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15543");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node6 = node2.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isNE();
        boolean boolean11 = node9.isInstanceOf();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        boolean boolean13 = node2.isLabelName();
        boolean boolean14 = node2.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15544");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        boolean boolean24 = jSTypeRegistry19.canPropertyBeDefined(jSType22, "Unknown class name");
        jSTypeRegistry19.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry19.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType32, "");
        boolean boolean35 = jSType34.isInstanceType();
        boolean boolean36 = jSType34.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType37 = jSType34.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSType34.dereference();
        boolean boolean39 = jSType34.isFunctionType();
        boolean boolean40 = jSType16.canTestForShallowEqualityWith(jSType34);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType41 = jSType16.toMaybeEnumElementType();
        boolean boolean42 = jSType16.hasAnyTemplate();
        boolean boolean43 = jSType16.isNoObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(enumElementType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test15545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15545");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("OR hi!", 1, 2);
        com.google.javascript.rhino.Node node7 = node2.useSourceInfoIfMissingFrom(node6);
        int int8 = node7.getChildCount();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags(4095);
        sideEffectFlags10.setReturnsTainted();
        sideEffectFlags10.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node7.setSideEffectFlags(sideEffectFlags10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got THIS");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test15546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15546");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isTypeOf();
        node2.setLineno(51);
        node2.addSuppression("OR hi!\n");
        boolean boolean8 = node2.isName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node2.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15547");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15548");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(51, "OR hi! [source_file: ]\n    OR hi!\n", (int) (short) 100, 40);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15549");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test15550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15550");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        jSTypeRegistry1.resetForTypeCheck();
        boolean boolean13 = jSTypeRegistry1.hasNamespace("Not declared as a type name");
        boolean boolean15 = jSTypeRegistry1.isForwardDeclaredType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        boolean boolean23 = objectType22.matchesInt32Context();
        boolean boolean24 = objectType22.isStringValueType();
        boolean boolean25 = objectType22.canBeCalled();
        boolean boolean26 = objectType22.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType27 = objectType22.getTypeOfThis();
        boolean boolean28 = objectType22.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        jSTypeRegistry31.forwardDeclareType("Unknown class name");
        jSTypeRegistry31.incrementGeneration();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node43.isNot();
        int int47 = node43.getLineno();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        com.google.javascript.rhino.Node node58 = node43.srcref(node53);
        int int59 = node43.getCharno();
        boolean boolean60 = node43.isQuotedString();
        boolean boolean61 = node43.isIf();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node67.isNot();
        int int71 = node67.getLineno();
        boolean boolean72 = node67.isAdd();
        com.google.javascript.rhino.Node node73 = node43.useSourceInfoFromForTree(node67);
        boolean boolean74 = node67.isNot();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = com.google.common.collect.ImmutableList.of();
        boolean boolean76 = nodeIterableList75.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor77 = nodeIterableList75.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList78 = nodeIterableList75.asList();
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter79);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode81 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry80.setResolveMode(resolveMode81);
        com.google.javascript.rhino.jstype.ObjectType objectType83 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType84 = jSTypeRegistry80.createObjectType(objectType83);
        com.google.javascript.rhino.jstype.ObjectType objectType85 = objectType84.toObjectType();
        boolean boolean86 = objectType85.matchesInt32Context();
        boolean boolean87 = objectType85.isStringValueType();
        boolean boolean88 = objectType85.canBeCalled();
        boolean boolean89 = objectType85.isAllType();
        boolean boolean90 = nodeIterableList75.equals((java.lang.Object) objectType85);
        com.google.javascript.rhino.jstype.EnumType enumType91 = jSTypeRegistry31.createEnumType("OR hi! [directives: []]\n", node67, (com.google.javascript.rhino.jstype.JSType) objectType85);
        com.google.javascript.rhino.jstype.JSType jSType92 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType85);
        jSTypeRegistry1.clearNamedTypes();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative94 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType95 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterableList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor77);
        org.junit.Assert.assertNotNull(nodeIterableList78);
        org.junit.Assert.assertTrue("'" + resolveMode81 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode81.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(enumType91);
        org.junit.Assert.assertNotNull(jSType92);
    }

    @Test
    public void test15551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15551");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream53 = nodeIterableList2.parallelStream();
        boolean boolean54 = nodeIterableList2.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor55 = nodeIterableList2.listIterator();
        int int56 = nodeIterableList2.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor57 = nodeIterableList2.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor58 = nodeIterableList2.iterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList2.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor57);
        org.junit.Assert.assertNotNull(nodeIterableItor58);
    }

    @Test
    public void test15552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15552");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isString();
        boolean boolean10 = node2.isSwitch();
        node2.setIsSyntheticBlock(false);
        boolean boolean13 = node2.isContinue();
        boolean boolean14 = node2.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node2.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test15553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15553");
        com.google.common.collect.ImmutableList<java.util.stream.BaseStream<java.lang.Iterable<com.google.javascript.rhino.Node>, java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>>> nodeIterableBaseStreamList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(nodeIterableBaseStreamList0);
    }

    @Test
    public void test15554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15554");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.lang.String str4 = nodeIterableList0.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExterns();
        boolean boolean22 = jSDocInfo20.hasReturnType();
        boolean boolean23 = jSDocInfo20.isOverride();
        jSDocInfo20.setLicense("hi!");
        boolean boolean26 = strSet16.contains((java.lang.Object) jSDocInfo20);
        boolean boolean27 = strSet16.isEmpty();
        boolean boolean28 = nodeIterableList0.equals((java.lang.Object) strSet16);
        java.lang.Object obj29 = null;
        int int30 = nodeIterableList0.lastIndexOf(obj29);
        java.lang.Object[] objArray31 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isNE();
        boolean boolean36 = node34.isInstanceOf();
        boolean boolean37 = node34.isThrow();
        node34.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = nodeIterableList0.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(nodeIterableList41);
    }

    @Test
    public void test15555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15555");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        boolean boolean5 = jSDocInfo0.isExterns();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isExterns();
        int int10 = jSDocInfo8.getParameterCount();
        boolean boolean11 = jSDocInfo8.isIdGenerator();
        boolean boolean12 = jSDocInfo8.isInterface();
        boolean boolean13 = jSDocInfo8.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.isExport();
        java.lang.String str19 = jSDocInfo14.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getType();
        java.lang.String str21 = jSDocInfo14.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo14.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        boolean boolean25 = jSDocInfo23.hasModifies();
        boolean boolean26 = jSDocInfo23.isIdGenerator();
        boolean boolean27 = jSDocInfo23.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getType();
        boolean boolean29 = jSDocInfo23.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.containsDeclaration();
        java.lang.String str33 = jSDocInfo30.getSourceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo34.getType();
        boolean boolean37 = jSDocInfo34.isImplicitCast();
        boolean boolean38 = jSDocInfo34.isExport();
        boolean boolean39 = jSDocInfo34.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo34.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection41 = jSDocInfo34.getMarkers();
        boolean boolean42 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo43.getSuppressions();
        boolean boolean45 = jSDocInfo43.isNoSideEffects();
        boolean boolean46 = jSDocInfo43.isConsistentIdGenerator();
        boolean boolean48 = jSDocInfo43.hasParameter("OR hi!\n");
        boolean boolean49 = jSDocInfo43.hasType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = jSDocInfo50.isNoSideEffects();
        boolean boolean54 = jSDocInfo50.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str55 = jSDocInfo50.getVersion();
        jSDocInfo50.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo50.getTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo59.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList63 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo8, jSDocInfo14, jSDocInfo23, jSDocInfo30, jSDocInfo34, jSDocInfo43, jSDocInfo50, jSDocInfo59);
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = jSDocInfo34.getTemplateTypeNames();
        int int65 = jSDocInfo34.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo34.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo34.getEnumParameterType();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo34.getParameterNames();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(markerCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(jSDocInfoList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNotNull(strSet68);
    }

    @Test
    public void test15556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15556");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("{1078264502}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        boolean boolean10 = jSTypeRegistry5.canPropertyBeDefined(jSType8, "Unknown class name");
        jSTypeRegistry5.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry5.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        jSTypeRegistry16.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot26 = objectType23.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType33.toMaybeEnumElementType();
        boolean boolean35 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType23, objectType33);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType23, "JSDocInfo");
        jSTypeRegistry1.clearTemplateTypeNames();
        jSTypeRegistry1.identifyNonNullableName("");
        jSTypeRegistry1.forwardDeclareType("{}");
        jSTypeRegistry1.resetForTypeCheck();
        jSTypeRegistry1.clearTemplateTypeNames();
        jSTypeRegistry1.incrementGeneration();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNull(jSTypeStaticSlot26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15557");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair16 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, (com.google.javascript.rhino.jstype.JSType) objectType15);
        java.lang.String str17 = objectType15.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        jSTypeRegistry19.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry19.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        boolean boolean27 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) objectType15, jSType26);
        boolean boolean28 = jSType26.isUnionType();
        boolean boolean29 = jSType26.isVoidType();
        com.google.javascript.rhino.jstype.JSType jSType30 = jSType26.collapseUnion();
        boolean boolean31 = jSType30.canBeCalled();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{...}" + "'", str17, "{...}");
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test15558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15558");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isFunction();
        boolean boolean24 = node22.isComma();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable25 = node22.getAncestors();
        boolean boolean26 = node22.isLocalResultCall();
        boolean boolean27 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        boolean boolean38 = node33.isAdd();
        node33.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean41 = node33.isDec();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node44.siblings();
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet53);
        node44.putBooleanProp(0, false);
        node44.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean61 = node44.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node44.getStaticSourceFile();
        int int64 = staticSourceFile62.getLineOffset(40);
        java.lang.String str65 = staticSourceFile62.getName();
        int int67 = staticSourceFile62.getColumnOfOffset((int) '#');
        node33.setStaticSourceFile(staticSourceFile62);
        node22.setStaticSourceFile(staticSourceFile62);
        int int71 = staticSourceFile62.getLineOfOffset(10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ancestorIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-2147483648) + "'", int64 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str65, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test15559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15559");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSType jSType10 = objectType9.autobox();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        boolean boolean32 = node26.isComma();
        node26.setVarArgs(true);
        boolean boolean35 = node26.isThrow();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = objectType41.toObjectType();
        boolean boolean43 = objectType42.matchesInt32Context();
        boolean boolean44 = objectType42.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType42.collapseUnion();
        node26.setJSType((com.google.javascript.rhino.jstype.JSType) objectType42);
        boolean boolean47 = objectType42.canBeCalled();
        boolean boolean48 = objectType9.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType42);
        com.google.javascript.rhino.jstype.JSType jSType49 = objectType9.restrictByNotNullOrUndefined();
        boolean boolean50 = objectType9.isString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(jSType10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
    }

    @Test
    public void test15561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15561");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType6 = objectType5.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType5.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry17.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = objectType35.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot38 = objectType35.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = objectType45.toMaybeEnumElementType();
        boolean boolean47 = jSTypeRegistry17.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType35, objectType45);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = objectType53.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = objectType60.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        boolean boolean68 = jSTypeRegistry63.canPropertyBeDefined(jSType66, "Unknown class name");
        jSTypeRegistry63.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType76 = jSTypeRegistry72.createObjectType(objectType75);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry63.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType76, "");
        boolean boolean79 = jSType78.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = objectType61.testForEquality(jSType78);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSType78.collapseUnion();
        boolean boolean82 = objectType54.differsFrom(jSType78);
        boolean boolean83 = jSType78.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry17.createOptionalType(jSType78);
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSType78.dereference();
        com.google.javascript.rhino.jstype.JSType jSType86 = objectType12.resolve(errorReporter15, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType85);
        com.google.javascript.rhino.jstype.JSType jSType87 = objectType85.getTypeOfThis();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot89 = objectType85.getSlot("PARAM_LIST\n");
        boolean boolean90 = objectType85.isNullable();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNull(enumElementType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNull(jSTypeStaticSlot38);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNull(jSTypeStaticSlot89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test15562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15562");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean4 = node3.isOptionalArg();
        int int5 = node3.getSourceOffset();
        boolean boolean6 = node3.isCatch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        boolean boolean15 = node12.isNot();
        int int16 = node12.getLineno();
        boolean boolean17 = node12.isAdd();
        com.google.javascript.rhino.Node node18 = node12.cloneTree();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isNot();
        int int28 = node24.getLineno();
        boolean boolean29 = node24.isAdd();
        boolean boolean30 = node18.hasChild(node24);
        boolean boolean31 = node24.isDefaultCase();
        int int32 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isTypeOf();
        boolean boolean37 = node35.isRegExp();
        com.google.javascript.rhino.Node node38 = node24.copyInformationFromForTree(node35);
        boolean boolean39 = node38.isBlock();
        boolean boolean40 = node38.isLabel();
        com.google.javascript.rhino.Node node41 = node3.srcrefTree(node38);
        node41.setCharno(4095);
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.isTrue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15563");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        java.lang.Object[] objArray22 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean33 = nodeIterableList32.add(nodeIterable31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        java.lang.Object[] objArray51 = nodeIterableList48.toArray();
        boolean boolean52 = nodeIterableList48.isEmpty();
        boolean boolean53 = nodeIterableList32.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray69 = nodeIterableList68.toArray();
        boolean boolean70 = strSet65.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        java.lang.Object[] objArray71 = nodeIterableList68.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList68.listIterator();
        boolean boolean73 = nodeIterableList68.isEmpty();
        boolean boolean74 = nodeIterableList32.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        boolean boolean75 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList76 = nodeIterableList0.asList();
        java.lang.String str77 = nodeIterableList0.toString();
        java.lang.Object[] objArray78 = nodeIterableList0.toArray();
        int int79 = nodeIterableList0.size();
        boolean boolean80 = nodeIterableList0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList83 = nodeIterableList0.subList(15, 409647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (15) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test15564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15564");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        boolean boolean40 = node39.isAssignAdd();
        int int41 = node2.getIndexOfChild(node39);
        com.google.javascript.rhino.Node node42 = node39.getNext();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node45.isDebugger();
        boolean boolean52 = node45.isSyntheticBlock();
        boolean boolean53 = node45.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node45, "Unknown class name");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node58.isDebugger();
        boolean boolean65 = node58.isVoid();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isTypeOf();
        com.google.javascript.rhino.Node node70 = node58.srcrefTree(node68);
        boolean boolean71 = node70.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList75 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList75, jSTypeArray74);
        com.google.javascript.rhino.Node node77 = jSTypeRegistry73.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList75);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean82 = node77.isEquivalentToTyped(node81);
        com.google.javascript.rhino.Node node83 = node77.cloneNode();
        com.google.javascript.rhino.InputId inputId84 = node77.getInputId();
        boolean boolean85 = node70.hasChild(node77);
        boolean boolean86 = jSTypeExpression55.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node87 = node39.useSourceInfoIfMissingFromForTree(node70);
        boolean boolean88 = node87.isAssignAdd();
        boolean boolean89 = node87.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(inputId84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15565");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        java.lang.String str40 = staticSourceFile31.getName();
        int int42 = staticSourceFile31.getColumnOfOffset(1);
        int int44 = staticSourceFile31.getColumnOfOffset(4);
        int int46 = staticSourceFile31.getLineOffset(54);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str40, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2147483648) + "'", int46 == (-2147483648));
    }

    @Test
    public void test15566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15566");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        java.lang.Object obj49 = node47.getProp((int) (byte) 0);
        int int50 = node47.getChildCount();
        node35.addChildrenToFront(node47);
        node47.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            node47.setDouble((double) 4095);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR hi! is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test15567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15567");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setDeprecated(false);
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test15568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15568");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("java.io.IOException: {1517329911}");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test15569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15569");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(54, "{1833515481}", 13, 409647);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15570");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node4.isDebugger();
        com.google.javascript.rhino.Node node11 = node4.getFirstChild();
        boolean boolean12 = node4.isNot();
        boolean boolean13 = node4.isIn();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isAssign();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node17, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node27.getAncestors();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(1, node4, node27, 54, 10);
        java.lang.String str32 = node4.toString();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        node36.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        boolean boolean63 = node60.isNot();
        int int64 = node60.getLineno();
        com.google.javascript.rhino.Node node65 = node50.srcref(node60);
        int int66 = node50.getCharno();
        com.google.javascript.rhino.Node node67 = node36.copyInformationFrom(node50);
        boolean boolean68 = node36.isTrue();
        boolean boolean69 = node36.isCase();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(52, node36);
        boolean boolean71 = node36.isDefaultCase();
        com.google.javascript.rhino.Node node72 = node4.useSourceInfoIfMissingFrom(node36);
        namePosition0.setItem(node36);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node36.getStaticSourceFile();
        int int76 = staticSourceFile74.getLineOfOffset(12);
        int int78 = staticSourceFile74.getLineOfOffset(1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR hi!" + "'", str32, "OR hi!");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test15571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15571");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        int int24 = node20.getIntProp(16);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node27.isDebugger();
        boolean boolean34 = node27.isVoid();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isTypeOf();
        com.google.javascript.rhino.Node node39 = node27.srcrefTree(node37);
        com.google.javascript.rhino.Node node40 = node27.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node40.setStaticSourceFile(staticSourceFile41);
        node20.addChildrenToBack(node40);
        boolean boolean44 = node20.isContinue();
        boolean boolean45 = node20.isString();
        boolean boolean46 = node20.isComma();
        boolean boolean47 = node20.isFromExterns();
        com.google.javascript.rhino.Node node48 = node20.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test15572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15572");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node10 = null;
        jSDocInfo0.setAssociatedNode(node10);
        boolean boolean12 = jSDocInfo0.hasFileOverview();
        boolean boolean13 = jSDocInfo0.isIdGenerator();
        java.lang.String str14 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test15573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15573");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        boolean boolean19 = jSType16.matchesNumberContext();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator22 = nodeIterableList20.spliterator();
        boolean boolean23 = jSType16.equals((java.lang.Object) nodeIterableSpliterator22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        boolean boolean31 = objectType30.isEmptyType();
        boolean boolean32 = objectType30.hasDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType33 = jSType16.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType30);
        boolean boolean34 = jSType33.isInstanceType();
        boolean boolean35 = jSType33.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = jSType33.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(jSDocInfo36);
    }

    @Test
    public void test15574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15574");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15575");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        boolean boolean36 = node29.isDo();
        boolean boolean37 = node29.isBlock();
        node29.setWasEmptyNode(true);
        boolean boolean40 = node29.isThis();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = objectType54.toObjectType();
        boolean boolean56 = objectType55.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope57 = objectType55.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType58 = objectType47.resolve(errorReporter48, jSTypeStaticScope57);
        node29.putProp(44, (java.lang.Object) jSType58);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = objectType65.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = objectType72.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        boolean boolean80 = jSTypeRegistry75.canPropertyBeDefined(jSType78, "Unknown class name");
        jSTypeRegistry75.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter83 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry84 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter83);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode85 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry84.setResolveMode(resolveMode85);
        com.google.javascript.rhino.jstype.ObjectType objectType87 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType88 = jSTypeRegistry84.createObjectType(objectType87);
        com.google.javascript.rhino.jstype.JSType jSType90 = jSTypeRegistry75.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType88, "");
        boolean boolean91 = jSType90.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = objectType73.testForEquality(jSType90);
        com.google.javascript.rhino.jstype.JSType jSType93 = jSType90.collapseUnion();
        boolean boolean94 = objectType66.differsFrom(jSType90);
        boolean boolean95 = objectType66.isUnknownType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = objectType66.toMaybeEnumElementType();
        boolean boolean97 = jSType58.isSubtype((com.google.javascript.rhino.jstype.JSType) objectType66);
        java.lang.String str98 = objectType66.toAnnotationString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope57);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + resolveMode85 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode85.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertNotNull(jSType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(enumElementType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "?" + "'", str98, "?");
    }

    @Test
    public void test15576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15576");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        boolean boolean12 = jSTypeRegistry7.canPropertyBeDefined(jSType10, "Unknown class name");
        jSTypeRegistry7.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry7.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        jSTypeRegistry18.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry21.createObjectType(objectType24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = objectType25.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot28 = objectType25.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType25);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType36 = objectType35.toMaybeEnumElementType();
        boolean boolean37 = jSTypeRegistry7.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType25, objectType35);
        com.google.javascript.rhino.jstype.JSType jSType39 = objectType25.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node40 = objectType25.getRootNode();
        boolean boolean41 = objectType25.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        boolean boolean48 = objectType47.isNominalConstructor();
        boolean boolean49 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType25, objectType47);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        boolean boolean56 = jSTypeRegistry51.canPropertyBeDefined(jSType54, "Unknown class name");
        jSTypeRegistry51.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry51.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType64, "");
        boolean boolean67 = jSType66.canBeCalled();
        boolean boolean68 = jSType66.isNoResolvedType();
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry1.getGreatestSubtypeWithProperty(jSType66, "OR []");
        boolean boolean71 = jSType66.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSType66.toMaybeFunctionType();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertNull(jSTypeStaticSlot28);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNull(enumElementType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(functionType72);
    }

    @Test
    public void test15577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15577");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isInstanceOf();
        node5.setCharno(0);
        com.google.javascript.rhino.Node node26 = node5.detachFromParent();
        int int27 = node26.getSourceOffset();
        int int28 = node26.getCharno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test15578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15579");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList86 = nodeIterableList79.asList();
        boolean boolean87 = nodeIterableList86.isEmpty();
        java.lang.Object[] objArray88 = nodeIterableList86.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList89 = nodeIterableList86.asList();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor90 = nodeIterableList89.listIterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertNotNull(nodeIterableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList89);
        org.junit.Assert.assertNotNull(nodeIterableItor90);
    }

    @Test
    public void test15580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15580");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        node16.setOptionalArg(false);
        com.google.javascript.rhino.Node node21 = node2.srcref(node16);
        com.google.javascript.rhino.InputId inputId23 = new com.google.javascript.rhino.InputId("");
        java.lang.String str24 = inputId23.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        boolean boolean31 = objectType30.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair39 = objectType30.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = objectType30.collapseUnion();
        boolean boolean41 = inputId23.equals((java.lang.Object) objectType30);
        node2.setInputId(inputId23);
        java.lang.String str43 = inputId23.getIdName();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList44 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray45 = nodeIterableList44.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = nodeIterableList44.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream47 = nodeIterableList44.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor48 = nodeIterableList44.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean50 = jSDocInfo49.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo49.getType();
        boolean boolean52 = jSDocInfo49.isImplicitCast();
        boolean boolean53 = jSDocInfo49.isExport();
        boolean boolean54 = jSDocInfo49.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo49.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection56 = jSDocInfo49.getMarkers();
        java.lang.String str57 = jSDocInfo49.getSourceName();
        java.util.Collection<java.lang.String> strCollection58 = jSDocInfo49.getReferences();
        boolean boolean59 = nodeIterableList44.contains((java.lang.Object) jSDocInfo49);
        boolean boolean60 = inputId23.equals((java.lang.Object) jSDocInfo49);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 47);
        node62.setCharno(30);
        boolean boolean65 = node62.isNull();
        jSDocInfo49.setAssociatedNode(node62);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "InputId: " + "'", str24, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(typePair39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(nodeIterableList44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(nodeIterableStream47);
        org.junit.Assert.assertNotNull(nodeIterableItor48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertNotNull(markerCollection56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strCollection58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15581");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markText("[]", 1, 10, (int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordParameter("Unknown class name", jSTypeExpression11);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordInterface();
        boolean boolean31 = jSDocInfoBuilder28.recordDescription("hi!");
        boolean boolean32 = jSDocInfoBuilder28.recordHiddenness();
        boolean boolean33 = strSet24.remove((java.lang.Object) jSDocInfoBuilder28);
        boolean boolean34 = jSDocInfoBuilder28.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder28.recordExtendedInterface(jSTypeExpression35);
        boolean boolean38 = jSDocInfoBuilder28.recordMeaning("{353548028}");
        boolean boolean40 = jSDocInfoBuilder28.addReference("{46019314}");
        boolean boolean41 = jSDocInfoBuilder28.recordExpose();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean45 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean48 = jSDocInfoBuilder43.recordVisibility(visibility47);
        boolean boolean49 = jSDocInfoBuilder28.recordVisibility(visibility47);
        boolean boolean50 = jSDocInfoBuilder1.recordVisibility(visibility47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test15582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15582");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition18 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker20.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker20.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList24 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker7, marker11, marker15, marker16, marker20);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker4.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker4.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(nodeSourcePosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNotNull(markerList24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
    }

    @Test
    public void test15583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15583");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("{640911743}");
        boolean boolean17 = jSDocInfoBuilder1.recordBlockDescription("{764597585}");
        boolean boolean19 = jSDocInfoBuilder1.addReference("{2006459669}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test15584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15584");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        java.lang.Object[] objArray5 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList12 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray13 = nodeIterableList12.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = nodeIterableList12.reverse();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList14, 52, node21 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray29 = nodeIterableList28.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = nodeIterableList28.reverse();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList30, 52, node37 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList44 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray45 = nodeIterableList44.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = nodeIterableList44.reverse();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        java.lang.Object[] objArray56 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList46, 52, node53 };
        java.lang.Object[][] objArray57 = new java.lang.Object[][] { objArray24, objArray40, objArray56 };
        java.lang.Object[][] objArray58 = nodeIterableList8.toArray(objArray57);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray60 = nodeIterableList59.toArray();
        int int62 = nodeIterableList59.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray63 = nodeIterableList59.toArray();
        boolean boolean64 = nodeIterableList8.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList59);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList8.reverse();
        boolean boolean66 = nodeIterableList65.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = nodeIterableList0.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(nodeIterableList12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test15585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15585");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression10);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        boolean boolean17 = jSDocInfoBuilder13.recordHiddenness();
        boolean boolean18 = jSDocInfoBuilder13.recordConsistentIdGenerator();
        boolean boolean19 = jSDocInfoBuilder13.recordNoTypeCheck();
        jSDocInfoBuilder13.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean27 = jSDocInfoBuilder13.recordLends("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean32 = jSDocInfoBuilder29.recordDescription("hi!");
        boolean boolean33 = jSDocInfoBuilder29.recordHiddenness();
        boolean boolean34 = jSDocInfoBuilder29.recordExpose();
        boolean boolean35 = jSDocInfoBuilder29.recordIdGenerator();
        boolean boolean37 = jSDocInfoBuilder29.addReference("OR hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean56 = jSDocInfoBuilder53.recordDescription("hi!");
        boolean boolean57 = jSDocInfoBuilder53.recordHiddenness();
        boolean boolean58 = strSet49.remove((java.lang.Object) jSDocInfoBuilder53);
        boolean boolean59 = jSDocInfoBuilder53.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder61.addAuthor("");
        boolean boolean64 = jSDocInfoBuilder61.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = null;
        boolean boolean66 = jSDocInfoBuilder61.recordThrowType(jSTypeExpression65);
        boolean boolean67 = jSDocInfoBuilder61.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        jSDocInfoBuilder61.markName("", staticSourceFile69, 29, 50);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        boolean boolean81 = node75.isDebugger();
        boolean boolean82 = node75.isSyntheticBlock();
        boolean boolean83 = node75.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node75, "Unknown class name");
        boolean boolean87 = jSDocInfoBuilder61.recordThrowDescription(jSTypeExpression85, "?");
        boolean boolean88 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression85);
        boolean boolean89 = jSDocInfoBuilder29.recordEnumParameterType(jSTypeExpression85);
        boolean boolean90 = jSDocInfoBuilder13.recordThrowType(jSTypeExpression85);
        boolean boolean91 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean93 = jSDocInfo92.isExterns();
        boolean boolean94 = jSDocInfo92.hasReturnType();
        java.util.Set<java.lang.String> strSet95 = jSDocInfo92.getParameterNames();
        boolean boolean96 = strSet95.isEmpty();
        boolean boolean97 = jSDocInfoBuilder1.recordModifies(strSet95);
        boolean boolean98 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test15586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isExport();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15587");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        typePosition0.setPositionInformation((int) (short) 1, (int) (short) 0, (int) '4', 100);
        int int8 = typePosition0.getPositionOnEndLine();
        int int9 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node10 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test15588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15588");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList9.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        int int12 = nodeIterableList11.size();
        boolean boolean13 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList9.iterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isSetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node17.children();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = nodeIterableList9.add(nodeIterable21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test15589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15589");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node4.isDebugger();
        com.google.javascript.rhino.Node node11 = node4.getFirstChild();
        boolean boolean12 = node4.isNot();
        boolean boolean13 = node4.isIn();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isAssign();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node17, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node27.getAncestors();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(1, node4, node27, 54, 10);
        boolean boolean32 = node4.isInstanceOf();
        com.google.javascript.rhino.Node node33 = node4.cloneTree();
        boolean boolean34 = node4.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(29, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15590");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean22 = jSDocInfoBuilder20.recordVisibility(visibility21);
        boolean boolean23 = jSDocInfoBuilder20.isConstructorRecorded();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDec();
        boolean boolean33 = node26.isBlock();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        int int48 = strSet45.size();
        strSet45.clear();
        node26.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        boolean boolean57 = jSTypeRegistry52.canPropertyBeDefined(jSType55, "Unknown class name");
        jSTypeRegistry52.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry52.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType65, "");
        com.google.javascript.rhino.jstype.JSType jSType69 = objectType65.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean70 = objectType65.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType72 = objectType65.getRestrictedTypeGivenToBooleanOutcome(false);
        node26.setJSType((com.google.javascript.rhino.jstype.JSType) objectType65);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node26, "TYPEOF hi!");
        boolean boolean76 = jSDocInfoBuilder20.recordImplementedInterface(jSTypeExpression75);
        boolean boolean77 = jSDocInfoBuilder17.recordTypedef(jSTypeExpression75);
        boolean boolean78 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test15591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15591");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = jSTypeRegistry4.createObjectType(objectType7);
        boolean boolean9 = objectType8.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = objectType15.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType8.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType15);
        com.google.javascript.rhino.jstype.JSType jSType18 = objectType8.collapseUnion();
        boolean boolean19 = objectType8.isNullType();
        boolean boolean20 = objectType8.canBeCalled();
        jSTypeRegistry1.registerPropertyOnType("{2077705720}", (com.google.javascript.rhino.jstype.JSType) objectType8);
        jSTypeRegistry1.setLastGeneration(true);
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot33 = objectType30.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node34 = objectType30.getRootNode();
        com.google.javascript.rhino.Node node35 = objectType30.getRootNode();
        boolean boolean36 = objectType30.isString();
        boolean boolean37 = objectType30.isInterface();
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry1.createObjectType(objectType30);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry1.getNativeObjectType(jSTypeNative39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNull(jSTypeStaticSlot33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectType38);
    }

    @Test
    public void test15592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15592");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        node2.removeProp(131075);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test15593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15593");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry5.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = objectType9.toObjectType();
        boolean boolean11 = objectType10.matchesInt32Context();
        boolean boolean12 = objectType10.isBooleanValueType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot14 = objectType10.getOwnSlot("{1078264502}");
        java.lang.String str15 = objectType10.toString();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection16 = jSTypeRegistry1.getDirectImplementors(objectType10);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType18 = objectType17.toMaybeParameterizedType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{...}" + "'", str15, "{...}");
        org.junit.Assert.assertNotNull(functionTypeCollection16);
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNull(parameterizedType18);
    }

    @Test
    public void test15594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15594");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo4.getTypedefType();
        java.lang.String str82 = jSDocInfo4.getReturnDescription();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test15595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15595");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = jSType16.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSType16.collapseUnion();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        boolean boolean25 = objectType24.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = objectType38.toObjectType();
        boolean boolean40 = objectType39.matchesInt32Context();
        boolean boolean41 = objectType39.isStringValueType();
        boolean boolean42 = objectType39.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair49 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType39, (com.google.javascript.rhino.jstype.JSType) objectType48);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry27.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType39);
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSType50.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = objectType24.getTypesUnderInequality(jSType50);
        boolean boolean53 = objectType24.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType jSType54 = objectType24.getTypeOfThis();
        boolean boolean55 = objectType24.canBeCalled();
        boolean boolean56 = objectType24.isString();
        boolean boolean57 = jSType18.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType24);
        boolean boolean58 = jSType18.isConstructor();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(functionType51);
        org.junit.Assert.assertNotNull(typePair52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test15596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15596");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 49);
        boolean boolean2 = node1.isDebugger();
        java.lang.Object obj4 = node1.getProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test15597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15597");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = objectType39.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        boolean boolean47 = jSTypeRegistry42.canPropertyBeDefined(jSType45, "Unknown class name");
        jSTypeRegistry42.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry42.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType55, "");
        boolean boolean58 = jSType57.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = objectType40.testForEquality(jSType57);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair60 = jSType33.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) objectType40);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        boolean boolean67 = jSTypeRegistry62.canPropertyBeDefined(jSType65, "Unknown class name");
        jSTypeRegistry62.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode72 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry71.setResolveMode(resolveMode72);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry71.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry62.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType75, "");
        com.google.javascript.rhino.jstype.JSType jSType79 = objectType75.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean80 = objectType75.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType82 = objectType75.getRestrictedTypeGivenToBooleanOutcome(false);
        java.lang.String str83 = jSType82.getDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType84 = objectType40.getGreatestSubtype(jSType82);
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType85 = jSType82.toMaybeParameterizedType();
        boolean boolean86 = jSType82.hasDisplayName();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(typePair60);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + resolveMode72 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode72.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNull(parameterizedType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test15598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15598");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        node5.removeProp(1);
        int int10 = node5.getSourceOffset();
        boolean boolean11 = node5.hasMoreThanOneChild();
        boolean boolean12 = node5.isFromExterns();
        boolean boolean13 = node5.isQualifiedName();
        boolean boolean14 = node5.isNew();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(53, "OR hi!\n    OR hi!\n");
        node17.detachChildren();
        boolean boolean19 = node17.isContinue();
        com.google.javascript.rhino.Node node20 = node5.srcref(node17);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test15599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15599");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean2 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry1.getTypesWithProperty("");
        jSTypeRegistry1.clearNamedTypes();
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        jSTypeRegistry1.unregisterPropertyOnType("function (this:me, {289958586}): me", jSType8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = jSTypeRegistry1.createAnonymousObjectType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(objectType10);
    }

    @Test
    public void test15600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15600");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        boolean boolean86 = nodeIterableList23.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator87 = nodeIterableList23.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor88 = nodeIterableList23.iterator();
        java.lang.Object[] objArray89 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList90 = nodeIterableList23.asList();
        boolean boolean91 = nodeIterableList90.isEmpty();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator87);
        org.junit.Assert.assertNotNull(nodeIterableItor88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test15601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15601");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType6 = objectType5.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType5.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str15 = objectType12.toDebugHashCodeString();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        boolean boolean23 = objectType22.matchesInt32Context();
        boolean boolean24 = objectType22.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        boolean boolean45 = jSTypeRegistry40.canPropertyBeDefined(jSType43, "Unknown class name");
        jSTypeRegistry40.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry40.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType53, "");
        boolean boolean56 = jSType55.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = objectType38.testForEquality(jSType55);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType55.collapseUnion();
        boolean boolean59 = objectType31.differsFrom(jSType55);
        boolean boolean60 = jSType55.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType61 = objectType22.getGreatestSubtype(jSType55);
        boolean boolean62 = objectType22.isConstructor();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = objectType22.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.Node node64 = objectType22.getRootNode();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair65 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType12, (com.google.javascript.rhino.jstype.JSType) objectType22);
        boolean boolean66 = objectType22.isNullType();
        boolean boolean67 = objectType22.isBooleanValueType();
        objectType22.clearResolved();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNull(enumElementType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{294772760}" + "'", str15, "{294772760}");
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15602");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        boolean boolean15 = node14.isObjectLit();
        boolean boolean16 = node14.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node14.getJSDocInfo();
        java.lang.String str21 = node14.toString(false, true, false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR hi!" + "'", str21, "OR hi!");
    }

    @Test
    public void test15603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15603");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', 37, 0);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node17.getJSDocInfo();
        jSDocInfoBuilder1.markTypeNode(node17, 35, 29, 0, 100, false);
        node17.removeProp(45);
        node17.setVarArgs(false);
        boolean boolean30 = node17.isBlock();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node17.siblings();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
    }

    @Test
    public void test15604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15604");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isNot();
        int int10 = node6.getLineno();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node21 = node6.srcref(node16);
        int int22 = node6.getCharno();
        com.google.javascript.rhino.Node node24 = node6.getAncestor((int) (short) 1);
        boolean boolean25 = node24.isNE();
        boolean boolean26 = node24.isAssignAdd();
        boolean boolean27 = node24.isUnscopedQualifiedName();
        node24.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING OR hi! [var_args_name: 1] 41\n\n\nTree2:\nOR hi!\n\n\nSubtree1: STRING OR hi! [var_args_name: 1] 41\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean35 = node34.isOptionalArg();
        boolean boolean36 = node34.isFalse();
        boolean boolean37 = node34.isVoid();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node24, node38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15605");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 100, 10);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        boolean boolean14 = node9.isAdd();
        node9.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean17 = node9.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isAssign();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(51, node21, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node32 = node9.srcrefTree(node31);
        int int33 = node32.getLength();
        com.google.javascript.rhino.Node node34 = node3.useSourceInfoFromForTree(node32);
        boolean boolean35 = node3.isWith();
        com.google.javascript.rhino.Node node36 = node3.cloneNode();
        int int37 = node36.getSourceOffset();
        boolean boolean38 = node36.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test15606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15606");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        boolean boolean15 = node10.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node10.setJSType(jSType16);
        boolean boolean18 = node10.isOptionalArg();
        java.util.Set<java.lang.String> strSet19 = node10.getDirectives();
        boolean boolean20 = node10.isInstanceOf();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node41 = node26.srcref(node36);
        boolean boolean42 = node41.isDelProp();
        com.google.javascript.rhino.Node node43 = node41.getLastSibling();
        boolean boolean44 = node43.isSetterDef();
        com.google.javascript.rhino.Node node45 = node10.srcrefTree(node43);
        com.google.javascript.rhino.InputId inputId46 = node10.getInputId();
        jSDocInfoBuilder1.markTypeNode(node10, 97, 35, (int) '4', 52, false);
        node10.setSourceFileForTesting("OR hi! 0");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(inputId46);
    }

    @Test
    public void test15607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15607");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        com.google.javascript.rhino.Node node10 = node3.getFirstChild();
        boolean boolean11 = node3.isNot();
        boolean boolean12 = node3.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node16.isDebugger();
        boolean boolean23 = node16.isAssign();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(51, node16, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node26.getAncestors();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(1, node3, node26, 54, 10);
        java.lang.String str31 = node3.toString();
        boolean boolean32 = node3.isVoid();
        boolean boolean33 = node3.isCatch();
        com.google.javascript.rhino.Node node34 = node3.cloneNode();
        com.google.javascript.rhino.Node node35 = node3.getParent();
        boolean boolean36 = node3.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR hi!" + "'", str31, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15608");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        jSDocInfo0.setLicense("JSDocInfo");
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean9 = jSDocInfo0.hasParameterType("java.io.IOException: OR hi! [directives: []]\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: OR []");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15609");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        com.google.javascript.rhino.Node node23 = node5.getAncestor((int) (short) 1);
        int int24 = node5.getSourcePosition();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node30.isNot();
        int int34 = node30.getLineno();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node40.isNot();
        int int44 = node40.getLineno();
        com.google.javascript.rhino.Node node45 = node30.srcref(node40);
        boolean boolean46 = node45.isDelProp();
        com.google.javascript.rhino.Node node47 = node45.getLastSibling();
        boolean boolean48 = node47.isSetterDef();
        com.google.javascript.rhino.Node node49 = node47.removeChildren();
        com.google.javascript.rhino.Node node50 = node47.cloneNode();
        com.google.javascript.rhino.Node node51 = node5.useSourceInfoFrom(node47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test15610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15610");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str12 = jSDocInfo0.getSourceName();
        boolean boolean13 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getTypedefType();
        java.util.Collection<java.lang.String> strCollection15 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(strCollection15);
    }

    @Test
    public void test15611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.hasModifies();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test15612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15612");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        boolean boolean12 = node11.wasEmptyNode();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        boolean boolean17 = node15.isDelProp();
        boolean boolean18 = node15.hasChildren();
        boolean boolean19 = node15.isOr();
        com.google.javascript.rhino.InputId inputId21 = new com.google.javascript.rhino.InputId("");
        java.lang.String str22 = inputId21.getIdName();
        java.lang.String str23 = inputId21.getIdName();
        node15.setInputId(inputId21);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = nodeIterableList25.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = nodeIterableList31.reverse();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList33, 52, node40 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = nodeIterableList47.reverse();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList49, 52, node56 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray64 = nodeIterableList63.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList63.reverse();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        java.lang.Object[] objArray75 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList65, 52, node72 };
        java.lang.Object[][] objArray76 = new java.lang.Object[][] { objArray43, objArray59, objArray75 };
        java.lang.Object[][] objArray77 = nodeIterableList27.toArray(objArray76);
        boolean boolean78 = inputId21.equals((java.lang.Object) objArray77);
        node11.setInputId(inputId21);
        boolean boolean80 = node11.isInstanceOf();
        node11.setCharno(37);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test15613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15613");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.isExport();
        java.lang.String str13 = jSDocInfo0.getOriginalCommentString();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15614");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.addAuthor("");
        boolean boolean9 = jSDocInfoBuilder6.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder6.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder6.markName("", staticSourceFile14, 29, 50);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node20.isDebugger();
        boolean boolean27 = node20.isSyntheticBlock();
        boolean boolean28 = node20.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node20, "Unknown class name");
        boolean boolean32 = jSDocInfoBuilder6.recordThrowDescription(jSTypeExpression30, "?");
        boolean boolean34 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression30, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean35 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean36 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean38 = jSDocInfoBuilder1.recordVersion("OR hi! [var_args_name: 1]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordDefineType(jSTypeExpression44);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = null;
        boolean boolean47 = jSDocInfoBuilder40.recordThisType(jSTypeExpression46);
        boolean boolean48 = jSDocInfoBuilder40.isJavaDispatch();
        boolean boolean49 = jSDocInfoBuilder40.recordExpose();
        boolean boolean50 = jSDocInfoBuilder40.recordIdGenerator();
        boolean boolean51 = jSDocInfoBuilder40.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean55 = jSDocInfoBuilder53.isInterfaceRecorded();
        boolean boolean56 = jSDocInfoBuilder53.recordIdGenerator();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isGetElem();
        jSDocInfoBuilder53.markTypeNode(node59, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node69.isDebugger();
        boolean boolean76 = node69.isSyntheticBlock();
        boolean boolean77 = node69.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node69, "Unknown class name");
        boolean boolean80 = jSTypeExpression79.isOptionalArg();
        boolean boolean81 = jSDocInfoBuilder53.recordEnumParameterType(jSTypeExpression79);
        boolean boolean82 = jSDocInfoBuilder40.recordExtendedInterface(jSTypeExpression79);
        boolean boolean83 = jSDocInfoBuilder1.recordType(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15615");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        boolean boolean64 = nodeIterableList63.isEmpty();
        boolean boolean65 = nodeIterableList63.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList63.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.isExterns();
        boolean boolean69 = jSDocInfo67.containsDeclaration();
        boolean boolean70 = jSDocInfo67.hasThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection71 = jSDocInfo67.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor66.set((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeCollection71);
    }

    @Test
    public void test15616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15616");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = objectType39.toObjectType();
        boolean boolean41 = objectType40.matchesInt32Context();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = jSType33.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType) objectType40);
        boolean boolean43 = objectType40.isTemplateType();
        boolean boolean44 = objectType40.isCheckedUnknownType();
        boolean boolean45 = objectType40.isParameterizedType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15617");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = jSTypeRegistry4.createObjectType(objectType7);
        boolean boolean9 = objectType8.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = objectType15.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType8.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType15);
        com.google.javascript.rhino.jstype.JSType jSType18 = objectType8.collapseUnion();
        boolean boolean19 = objectType8.isNullType();
        boolean boolean20 = objectType8.canBeCalled();
        jSTypeRegistry1.registerPropertyOnType("{2077705720}", (com.google.javascript.rhino.jstype.JSType) objectType8);
        java.lang.String str22 = objectType8.toDebugHashCodeString();
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{162007597}" + "'", str22, "{162007597}");
    }

    @Test
    public void test15618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15618");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isNot();
        int int10 = node6.getLineno();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node21 = node6.srcref(node16);
        int int22 = node6.getCharno();
        boolean boolean23 = node6.isQuotedString();
        boolean boolean24 = node6.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node6.setStaticSourceFile(staticSourceFile25);
        int int27 = node6.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node6.getStaticSourceFile();
        boolean boolean29 = node6.isNoSideEffectsCall();
        boolean boolean30 = node6.isDebugger();
        boolean boolean31 = node6.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 100, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15619");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        com.google.javascript.rhino.Node node10 = node3.getFirstChild();
        boolean boolean11 = node3.isNot();
        boolean boolean12 = node3.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node16.isDebugger();
        boolean boolean23 = node16.isAssign();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(51, node16, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node26.getAncestors();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(1, node3, node26, 54, 10);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDec();
        boolean boolean40 = node33.isBlock();
        boolean boolean41 = node33.hasOneChild();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = jSDocInfoBuilder43.recordExpose();
        boolean boolean49 = jSDocInfoBuilder43.recordNoCompile();
        boolean boolean50 = jSDocInfoBuilder43.isPopulatedWithFileOverview();
        boolean boolean51 = jSDocInfoBuilder43.isPopulated();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node55.siblings();
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet64);
        node55.putBooleanProp(0, false);
        node55.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean72 = node55.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = node55.getStaticSourceFile();
        boolean boolean74 = staticSourceFile73.isExtern();
        int int76 = staticSourceFile73.getLineOffset(16);
        jSDocInfoBuilder43.markName("None", staticSourceFile73, (int) (byte) 1, 43);
        int int81 = staticSourceFile73.getColumnOfOffset(4);
        node33.setStaticSourceFile(staticSourceFile73);
        node30.setStaticSourceFile(staticSourceFile73);
        node30.setType(5);
        boolean boolean86 = node30.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(staticSourceFile73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-2147483648) + "'", int76 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test15620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15620");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor1 = nodeIterableList0.iterator();
        java.lang.Object[] objArray2 = nodeIterableList0.toArray();
        java.io.IOException[] iOExceptionArray3 = new java.io.IOException[] {};
        java.io.IOException[] iOExceptionArray4 = nodeIterableList0.toArray(iOExceptionArray3);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isNE();
        boolean boolean9 = node7.isInstanceOf();
        boolean boolean10 = node7.isThrow();
        node7.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node7.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor15 = nodeIterableList14.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = com.google.common.collect.ImmutableList.of();
        int int17 = nodeIterableList16.size();
        boolean boolean18 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList16);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor19 = nodeIterableList14.listIterator();
        boolean boolean20 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        boolean boolean23 = jSDocInfo21.hasModifies();
        boolean boolean25 = jSDocInfo21.hasParameter("OR hi!");
        java.lang.String str26 = jSDocInfo21.getDeprecationReason();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo21.getSuppressions();
        java.lang.Object obj28 = null;
        boolean boolean29 = strSet27.equals(obj28);
        java.util.RandomAccess[][] randomAccessArray30 = new java.util.RandomAccess[][] {};
        java.util.RandomAccess[][] randomAccessArray31 = new java.util.RandomAccess[][] {};
        java.util.RandomAccess[][][] randomAccessArray32 = new java.util.RandomAccess[][][] { randomAccessArray30, randomAccessArray31 };
        java.util.RandomAccess[][][] randomAccessArray33 = strSet27.toArray(randomAccessArray32);
        java.lang.Object[][][] objArray34 = nodeIterableList0.toArray((java.lang.Object[][][]) randomAccessArray32);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordInterface();
        boolean boolean39 = jSDocInfoBuilder36.recordDescription("hi!");
        boolean boolean40 = jSDocInfoBuilder36.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = null;
        boolean boolean42 = jSDocInfoBuilder36.recordThrowType(jSTypeExpression41);
        boolean boolean43 = jSDocInfoBuilder36.recordConstancy();
        boolean boolean44 = jSDocInfoBuilder36.recordOverride();
        boolean boolean46 = jSDocInfoBuilder36.recordMeaning("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordInterface();
        boolean boolean51 = jSDocInfoBuilder48.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordDefineType(jSTypeExpression52);
        boolean boolean55 = jSDocInfoBuilder48.recordMeaning("hi!");
        boolean boolean57 = jSDocInfoBuilder48.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder59.addAuthor("");
        boolean boolean62 = jSDocInfoBuilder59.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = null;
        boolean boolean64 = jSDocInfoBuilder59.recordThrowType(jSTypeExpression63);
        boolean boolean65 = jSDocInfoBuilder59.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        jSDocInfoBuilder59.markName("", staticSourceFile67, 29, 50);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node73.isDebugger();
        boolean boolean80 = node73.isSyntheticBlock();
        boolean boolean81 = node73.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = new com.google.javascript.rhino.JSTypeExpression(node73, "Unknown class name");
        boolean boolean85 = jSDocInfoBuilder59.recordThrowDescription(jSTypeExpression83, "?");
        boolean boolean86 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression83);
        boolean boolean87 = jSDocInfoBuilder36.recordType(jSTypeExpression83);
        boolean boolean88 = jSTypeExpression83.isVarArgs();
        boolean boolean89 = nodeIterableList0.equals((java.lang.Object) boolean88);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(nodeIterableItor1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(iOExceptionArray3);
        org.junit.Assert.assertNotNull(iOExceptionArray4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(nodeIterableItor15);
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(randomAccessArray32);
        org.junit.Assert.assertNotNull(randomAccessArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15621");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        boolean boolean23 = node20.getBooleanProp(0);
        boolean boolean24 = node20.isDo();
        boolean boolean25 = node20.isObjectLit();
        boolean boolean26 = node20.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15622");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, 43, (int) ' ');
    }

    @Test
    public void test15623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15623");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        boolean boolean10 = objectType6.isAllType();
        boolean boolean11 = objectType6.isStringObjectType();
        com.google.javascript.rhino.jstype.JSType jSType13 = objectType6.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.JSType jSType15 = objectType6.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.JSType jSType17 = objectType6.getRestrictedTypeGivenToBooleanOutcome(true);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSType15);
        org.junit.Assert.assertNotNull(jSType17);
    }

    @Test
    public void test15624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15624");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream20 = nodeIterableList14.parallelStream();
        boolean boolean21 = nodeIterableList14.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isExterns();
        com.google.javascript.rhino.Node node24 = jSDocInfo22.getAssociatedNode();
        boolean boolean25 = jSDocInfo22.hasThisType();
        boolean boolean26 = jSDocInfo22.isOverride();
        boolean boolean27 = jSDocInfo22.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo22.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo22.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo22.getReturnType();
        java.util.Set<java.lang.String> strSet31 = jSDocInfo22.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet31.spliterator();
        boolean boolean33 = nodeIterableList14.equals((java.lang.Object) strSet31);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList14.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test15625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15625");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(12, "OR hi!\n    OR hi!\n", 32, 100);
        com.google.javascript.rhino.Node node8 = node2.srcrefTree(node7);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test15626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15626");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        boolean boolean14 = strSet13.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test15627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15627");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        boolean boolean22 = node17.isAdd();
        boolean boolean23 = node11.hasChild(node17);
        boolean boolean24 = node11.isVar();
        boolean boolean25 = node11.isNull();
        boolean boolean26 = node11.isRegExp();
        boolean boolean27 = node11.isLabel();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15628");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode4 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        jSTypeRegistry2.setResolveMode(resolveMode4);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry12.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        boolean boolean23 = jSTypeRegistry18.canPropertyBeDefined(jSType21, "Unknown class name");
        jSTypeRegistry18.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry18.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        jSTypeRegistry29.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry32.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = objectType36.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot39 = objectType36.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType47 = objectType46.toMaybeEnumElementType();
        boolean boolean48 = jSTypeRegistry18.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType36, objectType46);
        com.google.javascript.rhino.jstype.JSType jSType50 = objectType36.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node51 = objectType36.getRootNode();
        boolean boolean52 = objectType36.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        boolean boolean59 = objectType58.isNominalConstructor();
        boolean boolean60 = jSTypeRegistry12.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType36, objectType58);
        jSTypeRegistry7.unregisterPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType58);
        boolean boolean62 = objectType58.isNominalType();
        java.lang.String str63 = objectType58.toAnnotationString();
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry2.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative65 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry2.getNativeType(jSTypeNative65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode4 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode4.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNull(jSTypeStaticSlot39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNull(enumElementType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "?" + "'", str63, "?");
        org.junit.Assert.assertNotNull(objectType64);
    }

    @Test
    public void test15629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15629");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        int int14 = strSet11.size();
        strSet11.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry33.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType46, "");
        boolean boolean49 = jSType48.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = objectType31.testForEquality(jSType48);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType48.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry17.createNullableType(jSType48);
        boolean boolean53 = strSet11.equals((java.lang.Object) jSTypeRegistry17);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry17.createAnonymousObjectType();
        boolean boolean55 = jSTypeRegistry17.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative56 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry17.getNativeType(jSTypeNative56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15630");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.addAuthor("");
        boolean boolean19 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder16.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder24.addAuthor("");
        boolean boolean27 = jSDocInfoBuilder24.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = null;
        boolean boolean29 = jSDocInfoBuilder24.recordThrowType(jSTypeExpression28);
        boolean boolean30 = jSDocInfoBuilder24.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.addAuthor("");
        boolean boolean35 = jSDocInfoBuilder32.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder32.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        jSDocInfoBuilder32.markName("", staticSourceFile40, 29, 50);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node46.isDebugger();
        boolean boolean53 = node46.isSyntheticBlock();
        boolean boolean54 = node46.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node46, "Unknown class name");
        boolean boolean58 = jSDocInfoBuilder32.recordThrowDescription(jSTypeExpression56, "?");
        boolean boolean59 = jSDocInfoBuilder24.recordExtendedInterface(jSTypeExpression56);
        boolean boolean60 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression56);
        boolean boolean61 = jSDocInfoBuilder11.recordType(jSTypeExpression56);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        com.google.javascript.rhino.Node node63 = jSTypeExpression62.getRoot();
        boolean boolean64 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression62);
        boolean boolean65 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test15631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15631");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker6 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker7.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker7.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition10 = marker7.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker14 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker14.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker14.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker14.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker18 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker18.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition20 = marker18.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker18.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker23 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition24 = marker23.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition25 = marker23.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker23.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker27 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition28 = marker27.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition29 = marker27.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition30 = marker27.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList31 = com.google.common.collect.ImmutableList.of(marker7, marker11, marker14, marker18, marker22, marker23, marker27);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition32 = marker22.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker33 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition34 = marker33.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition35 = marker33.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition36 = marker33.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker37 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition38 = marker37.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = marker37.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition40 = marker37.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker41 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition42 = marker41.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition43 = marker41.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition44 = marker41.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker45 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition46 = marker45.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition47 = marker45.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker48 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = marker48.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition50 = marker48.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition51 = marker48.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker52 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition53 = marker52.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition54 = marker52.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition55 = marker52.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker56 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker57 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition58 = marker57.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition59 = marker57.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition60 = marker57.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker61 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition62 = marker61.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition63 = marker61.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = marker61.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList65 = com.google.common.collect.ImmutableList.of(marker41, marker45, marker48, marker52, marker56, marker57, marker61);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition66 = marker56.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker67 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition68 = marker67.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition69 = marker67.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker70 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker70.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = marker70.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker73 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition74 = marker73.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition75 = marker73.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition76 = marker73.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker73.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition78 = marker73.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition79 = marker73.getNameNode();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList80 = com.google.common.collect.ImmutableList.of(marker67, marker70, marker73);
        com.google.javascript.rhino.JSDocInfo.Marker marker81 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition82 = marker81.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition83 = marker81.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker84 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition85 = marker84.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition86 = marker84.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList87 = com.google.common.collect.ImmutableList.of(marker0, marker6, marker22, marker33, marker37, marker56, marker73, marker81, marker84);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition88 = marker37.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition89 = marker37.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition90 = marker37.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition91 = marker37.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition92 = marker37.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(nodeSourcePosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition20);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition24);
        org.junit.Assert.assertNull(nodeSourcePosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
        org.junit.Assert.assertNull(nodeSourcePosition28);
        org.junit.Assert.assertNull(nodeSourcePosition29);
        org.junit.Assert.assertNull(stringPosition30);
        org.junit.Assert.assertNotNull(markerList31);
        org.junit.Assert.assertNull(nodeSourcePosition32);
        org.junit.Assert.assertNull(nodeSourcePosition34);
        org.junit.Assert.assertNull(stringPosition35);
        org.junit.Assert.assertNull(nodeSourcePosition36);
        org.junit.Assert.assertNull(nodeSourcePosition38);
        org.junit.Assert.assertNull(stringPosition39);
        org.junit.Assert.assertNull(nodeSourcePosition40);
        org.junit.Assert.assertNull(nodeSourcePosition42);
        org.junit.Assert.assertNull(nodeSourcePosition43);
        org.junit.Assert.assertNull(nodeSourcePosition44);
        org.junit.Assert.assertNull(nodeSourcePosition46);
        org.junit.Assert.assertNull(nodeSourcePosition47);
        org.junit.Assert.assertNull(stringPosition49);
        org.junit.Assert.assertNull(stringPosition50);
        org.junit.Assert.assertNull(stringPosition51);
        org.junit.Assert.assertNull(nodeSourcePosition53);
        org.junit.Assert.assertNull(nodeSourcePosition54);
        org.junit.Assert.assertNull(nodeSourcePosition55);
        org.junit.Assert.assertNull(nodeSourcePosition58);
        org.junit.Assert.assertNull(nodeSourcePosition59);
        org.junit.Assert.assertNull(nodeSourcePosition60);
        org.junit.Assert.assertNull(nodeSourcePosition62);
        org.junit.Assert.assertNull(nodeSourcePosition63);
        org.junit.Assert.assertNull(stringPosition64);
        org.junit.Assert.assertNotNull(markerList65);
        org.junit.Assert.assertNull(nodeSourcePosition66);
        org.junit.Assert.assertNull(stringPosition68);
        org.junit.Assert.assertNull(stringPosition69);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(typePosition72);
        org.junit.Assert.assertNull(nodeSourcePosition74);
        org.junit.Assert.assertNull(nodeSourcePosition75);
        org.junit.Assert.assertNull(stringPosition76);
        org.junit.Assert.assertNull(stringPosition77);
        org.junit.Assert.assertNull(nodeSourcePosition78);
        org.junit.Assert.assertNull(nodeSourcePosition79);
        org.junit.Assert.assertNotNull(markerList80);
        org.junit.Assert.assertNull(nodeSourcePosition82);
        org.junit.Assert.assertNull(nodeSourcePosition83);
        org.junit.Assert.assertNull(stringPosition85);
        org.junit.Assert.assertNull(stringPosition86);
        org.junit.Assert.assertNotNull(markerList87);
        org.junit.Assert.assertNull(typePosition88);
        org.junit.Assert.assertNull(typePosition89);
        org.junit.Assert.assertNull(stringPosition90);
        org.junit.Assert.assertNull(stringPosition91);
        org.junit.Assert.assertNull(nodeSourcePosition92);
    }

    @Test
    public void test15632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15632");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        jSTypeRegistry1.resetForTypeCheck();
        boolean boolean13 = jSTypeRegistry1.hasNamespace("Not declared as a type name");
        boolean boolean15 = jSTypeRegistry1.isForwardDeclaredType("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node22.isNot();
        int int26 = node22.getLineno();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        com.google.javascript.rhino.Node node37 = node22.srcref(node32);
        int int38 = node22.getCharno();
        boolean boolean39 = node22.isQuotedString();
        boolean boolean40 = node22.isBreak();
        com.google.javascript.rhino.jstype.FunctionType functionType41 = jSTypeRegistry1.createFunctionType(jSType16, node22);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node22.getAncestors();
        boolean boolean43 = node22.isLabel();
        node22.setType(5);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(functionType41);
        org.junit.Assert.assertNotNull(ancestorIterable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test15633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15633");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node19.isNot();
        int int23 = node19.getLineno();
        com.google.javascript.rhino.Node node24 = node9.srcref(node19);
        int int25 = node9.getCharno();
        boolean boolean26 = node9.isQuotedString();
        boolean boolean27 = node9.isIf();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        boolean boolean38 = node33.isAdd();
        com.google.javascript.rhino.Node node39 = node9.useSourceInfoFromForTree(node33);
        int int40 = node3.getIndexOfChild(node39);
        boolean boolean41 = node39.isDec();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean45 = node44.isFalse();
        int int46 = node44.getType();
        com.google.javascript.rhino.Node node47 = node44.getFirstChild();
        node39.putProp(8202, (java.lang.Object) node47);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        boolean boolean55 = jSTypeRegistry50.canPropertyBeDefined(jSType53, "Unknown class name");
        jSTypeRegistry50.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry59.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry50.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType63, "");
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode68 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry67.setResolveMode(resolveMode68);
        com.google.javascript.rhino.jstype.ObjectType objectType70 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry67.createObjectType(objectType70);
        boolean boolean72 = jSType65.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType71);
        boolean boolean73 = jSType65.isNoType();
        boolean boolean74 = jSType65.isBooleanObjectType();
        boolean boolean75 = jSType65.isBooleanValueType();
        node39.setJSType(jSType65);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 40 + "'", int46 == 40);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + resolveMode68 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode68.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test15634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15634");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.toString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(36, "SHNE 49\n", 40960, 11);
        boolean boolean9 = node8.isInstanceOf();
        boolean boolean10 = inputId1.equals((java.lang.Object) boolean9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Not declared as a constructor" + "'", str2, "Not declared as a constructor");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "InputId: Not declared as a constructor" + "'", str3, "InputId: Not declared as a constructor");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15635");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean31 = nodeIterableList30.add(nodeIterable29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        boolean boolean48 = strSet43.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        java.lang.Object[] objArray49 = nodeIterableList46.toArray();
        boolean boolean50 = nodeIterableList46.isEmpty();
        boolean boolean51 = nodeIterableList30.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor52 = nodeIterableList30.iterator();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        boolean boolean63 = node58.isAdd();
        com.google.javascript.rhino.Node node64 = node58.cloneTree();
        java.lang.String str65 = node64.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node64.siblings();
        boolean boolean67 = nodeIterableList30.add(nodeIterable66);
        boolean boolean68 = nodeIterableList19.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = nodeIterableList19.subList(1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (1) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test15636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15636");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean5 = jSDocInfoBuilder1.recordVersion("{1148688991}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test15637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15637");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordExport();
        boolean boolean17 = jSDocInfoBuilder1.recordBlockDescription("GETELEM");
        boolean boolean18 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean19 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15638");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isBreak();
        boolean boolean9 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node13.isDebugger();
        node13.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        com.google.javascript.rhino.Node node42 = node27.srcref(node37);
        int int43 = node27.getCharno();
        com.google.javascript.rhino.Node node44 = node13.copyInformationFrom(node27);
        boolean boolean45 = node13.isTrue();
        boolean boolean46 = node13.isCase();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(52, node13);
        java.lang.String str48 = node47.toString();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node52.isDebugger();
        node52.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        boolean boolean69 = node66.isNot();
        int int70 = node66.getLineno();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node76.isNot();
        int int80 = node76.getLineno();
        com.google.javascript.rhino.Node node81 = node66.srcref(node76);
        int int82 = node66.getCharno();
        com.google.javascript.rhino.Node node83 = node52.copyInformationFrom(node66);
        boolean boolean84 = node52.isTrue();
        boolean boolean85 = node52.isCase();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(52, node52);
        com.google.javascript.rhino.Node node87 = node47.srcrefTree(node86);
        com.google.javascript.rhino.Node node88 = node2.useSourceInfoFrom(node86);
        boolean boolean89 = node86.isDo();
        boolean boolean90 = node86.isTrue();
        boolean boolean91 = node86.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "INSTANCEOF" + "'", str48, "INSTANCEOF");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15639");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection1 = visibilityEnumBuilder0.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder3 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder3.recordDefineType(jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder3.recordOverride();
        boolean boolean8 = jSDocInfoBuilder3.addReference("Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder9 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder9.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo12.getVisibility();
        boolean boolean16 = jSDocInfo12.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo12.setVisibility(visibility17);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray19 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility17 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray19);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo24.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = jSDocInfo24.getVisibility();
        boolean boolean28 = jSDocInfo24.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo24.setVisibility(visibility29);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray31 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility29 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray31);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getType();
        boolean boolean38 = jSDocInfo35.isImplicitCast();
        boolean boolean39 = jSDocInfo35.isExport();
        boolean boolean40 = jSDocInfo35.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo35.getReturnType();
        boolean boolean42 = jSDocInfo35.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        jSDocInfo35.setVisibility(visibility44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        boolean boolean49 = jSDocInfoBuilder3.recordVisibility(visibility44);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList50 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder0);
        org.junit.Assert.assertNotNull(visibilityEnumCollection1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray19);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(visibility27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder47);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(visibilityEnumList50);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
    }

    @Test
    public void test15640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15640");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        java.lang.Object[] objArray14 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isImplicitCast();
        boolean boolean17 = jSDocInfo15.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo15.getBaseType();
        boolean boolean19 = nodeIterableList0.contains((java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        boolean boolean25 = jSDocInfoBuilder21.recordHiddenness();
        boolean boolean26 = jSDocInfoBuilder21.recordExpose();
        boolean boolean27 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean29 = jSDocInfoBuilder21.addReference("OR hi!");
        boolean boolean30 = nodeIterableList0.equals((java.lang.Object) "OR hi!");
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor31 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        boolean boolean42 = node37.isAdd();
        com.google.javascript.rhino.Node node43 = node37.cloneTree();
        boolean boolean44 = node37.isWith();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node47.siblings();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet56);
        int int59 = strSet56.size();
        strSet56.clear();
        node37.setDirectives((java.util.Set<java.lang.String>) strSet56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.hasFileOverview();
        boolean boolean64 = jSDocInfo62.hasModifies();
        java.util.Set<java.lang.String> strSet65 = jSDocInfo62.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        boolean boolean67 = strSet65.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList66.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor69 = nodeIterableList66.iterator();
        java.lang.Object[] objArray70 = nodeIterableList66.toArray();
        boolean boolean71 = strSet56.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList66.iterator();
        boolean boolean73 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor74 = nodeIterableList66.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo75.getType();
        boolean boolean78 = jSDocInfo75.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo75.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection80 = jSDocInfo75.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor74.set((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor68);
        org.junit.Assert.assertNotNull(nodeIterableItor69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(nodeCollection80);
    }

    @Test
    public void test15641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15641");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("GETELEM 2 [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder15.recordConstancy();
        boolean boolean23 = jSDocInfoBuilder15.recordOverride();
        boolean boolean24 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean26 = jSDocInfoBuilder15.recordMeaning("{...}");
        boolean boolean27 = jSDocInfoBuilder15.isConstructorRecorded();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node31, "");
        boolean boolean34 = jSTypeExpression33.isVarArgs();
        boolean boolean35 = jSDocInfoBuilder15.recordThisType(jSTypeExpression33);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression33);
        boolean boolean37 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression33);
        boolean boolean38 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean39 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean40 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test15642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15642");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isSetterDef();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean28 = node27.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType29 = node27.getJSType();
        node22.addChildrenToBack(node27);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = nodeIterableList31.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray40 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition34, typePosition35, typePosition36, typePosition37, typePosition38, typePosition39 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = nodeIterableList31.toArray(typePositionArray40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder43.addAuthor("");
        boolean boolean46 = jSDocInfoBuilder43.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder43.recordReturnType(jSTypeExpression47);
        int int49 = nodeIterableList31.lastIndexOf((java.lang.Object) jSTypeExpression47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = nodeIterableList31.contains((java.lang.Object) strSet51);
        node22.setDirectives(strSet51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node57.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean65 = nodeIterableList64.add(nodeIterable63);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node68.siblings();
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList80 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray81 = nodeIterableList80.toArray();
        boolean boolean82 = strSet77.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList80);
        java.lang.Object[] objArray83 = nodeIterableList80.toArray();
        boolean boolean84 = nodeIterableList80.isEmpty();
        boolean boolean85 = nodeIterableList64.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList80);
        boolean boolean86 = nodeIterableList54.equals((java.lang.Object) nodeIterableList64);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList54.iterator();
        boolean boolean88 = strSet51.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList54);
        java.lang.Object[] objArray89 = nodeIterableList54.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(typePositionArray40);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(nodeIterableList80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
    }

    @Test
    public void test15643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15643");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = objectType39.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        boolean boolean47 = jSTypeRegistry42.canPropertyBeDefined(jSType45, "Unknown class name");
        jSTypeRegistry42.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry42.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType55, "");
        boolean boolean58 = jSType57.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = objectType40.testForEquality(jSType57);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair60 = jSType33.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) objectType40);
        com.google.javascript.rhino.jstype.JSType jSType61 = typePair60.typeB;
        com.google.javascript.rhino.jstype.JSType jSType62 = jSType61.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType63 = jSType61.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(typePair60);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(enumElementType63);
    }

    @Test
    public void test15644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15644");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable11 = jSTypeRegistry1.getEachReferenceTypeWithProperty("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = objectType17.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        boolean boolean25 = jSTypeRegistry20.canPropertyBeDefined(jSType23, "Unknown class name");
        jSTypeRegistry20.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry20.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType33, "");
        boolean boolean36 = jSType35.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = objectType18.testForEquality(jSType35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isExterns();
        boolean boolean40 = jSDocInfo38.hasReturnType();
        boolean boolean41 = jSDocInfo38.isOverride();
        boolean boolean42 = jSDocInfo38.isNoCompile();
        java.lang.String str43 = jSDocInfo38.getLendsName();
        boolean boolean44 = jSType35.equals((java.lang.Object) str43);
        boolean boolean45 = jSType35.isUnknownType();
        boolean boolean46 = jSType35.isUnionType();
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createNullableType(jSType35);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectTypeIterable11);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSType47);
    }

    @Test
    public void test15645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15645");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor13 = nodeIterableList0.listIterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream14 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node20.isDebugger();
        boolean boolean27 = node20.isVoid();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isTypeOf();
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node30);
        boolean boolean33 = node32.isObjectLit();
        boolean boolean34 = node32.isExprResult();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoIfMissingFrom(node32);
        boolean boolean36 = node17.isBlock();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        node39.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node48 = node39.getLastChild();
        boolean boolean49 = node39.isCall();
        boolean boolean50 = node17.isEquivalentToTyped(node39);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(43, node17, 1, 51);
        boolean boolean54 = node53.isOptionalArg();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node53.getAncestors();
        int int56 = nodeIterableList0.lastIndexOf((java.lang.Object) ancestorIterable55);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor13);
        org.junit.Assert.assertNotNull(nodeIterableStream14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test15646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15646");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition1.getPositionOnStartLine();
        int int16 = namePosition1.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            namePosition1.setPositionInformation(40, 8, 13, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 40?end-line: 13");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test15647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15647");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str82 = jSDocInfo46.getDeprecationReason();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test15648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15648");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("{1306773208}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15649");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = null;
        boolean boolean14 = jSDocInfoBuilder9.recordDefineType(jSTypeExpression13);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder9.recordThisType(jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder9.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder9.recordBaseType(jSTypeExpression18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder21.recordDefineType(jSTypeExpression25);
        boolean boolean28 = jSDocInfoBuilder21.recordMeaning("hi!");
        boolean boolean30 = jSDocInfoBuilder21.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.recordInterface();
        boolean boolean35 = jSDocInfoBuilder32.recordDescription("hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        boolean boolean57 = jSDocInfoBuilder51.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder59.addAuthor("");
        boolean boolean62 = jSDocInfoBuilder59.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = null;
        boolean boolean64 = jSDocInfoBuilder59.recordThrowType(jSTypeExpression63);
        boolean boolean65 = jSDocInfoBuilder59.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        jSDocInfoBuilder59.markName("", staticSourceFile67, 29, 50);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node73.isDebugger();
        boolean boolean80 = node73.isSyntheticBlock();
        boolean boolean81 = node73.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = new com.google.javascript.rhino.JSTypeExpression(node73, "Unknown class name");
        boolean boolean85 = jSDocInfoBuilder59.recordThrowDescription(jSTypeExpression83, "?");
        boolean boolean86 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression83);
        boolean boolean87 = jSDocInfoBuilder32.recordEnumParameterType(jSTypeExpression83);
        boolean boolean88 = jSDocInfoBuilder21.recordImplementedInterface(jSTypeExpression83);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression83);
        boolean boolean90 = jSDocInfoBuilder9.recordType(jSTypeExpression89);
        boolean boolean92 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression89, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean93 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test15650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15650");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(51, node28, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node44 = node5.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node45 = node43.getLastSibling();
        boolean boolean46 = node45.isDelProp();
        boolean boolean47 = node45.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test15651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15651");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean9 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder11.addAuthor("");
        boolean boolean14 = jSDocInfoBuilder11.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder11.recordReturnType(jSTypeExpression15);
        jSDocInfoBuilder11.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean22 = jSDocInfoBuilder11.recordDeprecationReason("hi!");
        boolean boolean23 = jSDocInfoBuilder11.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean28 = jSDocInfoBuilder25.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean58 = jSDocInfoBuilder25.recordThrowDescription(jSTypeExpression54, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node59 = jSTypeExpression54.getRoot();
        boolean boolean60 = jSDocInfoBuilder11.recordEnumParameterType(jSTypeExpression54);
        boolean boolean61 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression54);
        boolean boolean62 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test15652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15652");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("{1923315740}");
        boolean boolean2 = node1.isNew();
        boolean boolean3 = node1.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        jSTypeRegistry5.identifyNonNullableName("OR hi!");
        jSTypeRegistry5.identifyNonNullableName("INSTANCEOF");
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = objectType15.toObjectType();
        boolean boolean17 = objectType16.matchesInt32Context();
        boolean boolean18 = objectType16.isBooleanValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        boolean boolean25 = jSTypeRegistry20.canPropertyBeDefined(jSType23, "Unknown class name");
        jSTypeRegistry20.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry20.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        jSTypeRegistry31.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = objectType38.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot41 = objectType38.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry31.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType38);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType49 = objectType48.toMaybeEnumElementType();
        boolean boolean50 = jSTypeRegistry20.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType38, objectType48);
        com.google.javascript.rhino.jstype.JSType jSType52 = objectType38.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = objectType58.toObjectType();
        boolean boolean60 = objectType59.matchesInt32Context();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair61 = jSType52.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType) objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = typePair61.typeB;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = jSType62.getPossibleToBooleanOutcomes();
        boolean boolean64 = objectType16.canTestForShallowEqualityWith(jSType62);
        boolean boolean65 = objectType16.isObject();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        boolean boolean74 = node71.isNot();
        int int75 = node71.getLineno();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean82 = node81.isThis();
        node78.addChildToBack(node81);
        boolean boolean84 = node81.isNot();
        int int85 = node81.getLineno();
        com.google.javascript.rhino.Node node86 = node71.srcref(node81);
        boolean boolean87 = node81.isComma();
        com.google.javascript.rhino.jstype.FunctionType functionType88 = jSTypeRegistry5.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType16, node81);
        com.google.javascript.rhino.Node node89 = node1.srcrefTree(node81);
        boolean boolean90 = node81.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(jSTypeStaticSlot41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNull(enumElementType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(typePair61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(functionType88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test15653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15653");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnStartLine();
        int int6 = stringPosition0.getPositionOnEndLine();
        int int7 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test15654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15654");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        boolean boolean6 = nodeIterableList0.equals((java.lang.Object) objArray5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordInterface();
        boolean boolean11 = jSDocInfoBuilder8.recordDescription("hi!");
        boolean boolean12 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder8.recordExpose();
        boolean boolean14 = jSDocInfoBuilder8.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        boolean boolean24 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordImplicitCast();
        boolean boolean31 = jSDocInfoBuilder26.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder26.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression37);
        jSDocInfoBuilder36.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        boolean boolean62 = jSDocInfoBuilder58.recordHiddenness();
        boolean boolean63 = strSet54.remove((java.lang.Object) jSDocInfoBuilder58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder58.recordTypedef(jSTypeExpression64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder67.recordInterface();
        boolean boolean70 = jSDocInfoBuilder67.recordDescription("hi!");
        boolean boolean71 = jSDocInfoBuilder67.recordHiddenness();
        boolean boolean72 = jSDocInfoBuilder67.recordExpose();
        boolean boolean73 = jSDocInfoBuilder67.recordConstructor();
        boolean boolean75 = jSDocInfoBuilder67.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = null;
        boolean boolean84 = jSDocInfoBuilder77.recordThisType(jSTypeExpression83);
        boolean boolean85 = jSDocInfoBuilder77.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList86 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder8, jSDocInfoBuilder16, jSDocInfoBuilder26, jSDocInfoBuilder36, jSDocInfoBuilder58, jSDocInfoBuilder67, jSDocInfoBuilder77);
        boolean boolean88 = jSDocInfoBuilder58.recordBlockDescription("InputId: ");
        boolean boolean89 = jSDocInfoBuilder58.recordConstructor();
        boolean boolean91 = jSDocInfoBuilder58.hasParameter("INSTANCEOF");
        boolean boolean92 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder58);
        boolean boolean93 = jSDocInfoBuilder58.shouldParseDocumentation();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = null;
        boolean boolean96 = jSDocInfoBuilder58.recordParameter("OR hi! 0", jSTypeExpression95);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test15655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15655");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator4 = nodeIterableList3.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream6 = nodeIterableList3.parallelStream();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor7 = nodeIterableList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList3.subList(30, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (30) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator4);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableStream6);
        org.junit.Assert.assertNotNull(nodeIterableItor7);
    }

    @Test
    public void test15656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15656");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 47);
        node1.setCharno(30);
        boolean boolean4 = node1.isNull();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable5);
    }

    @Test
    public void test15657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15657");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean13 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15658");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node2.siblings();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        boolean boolean22 = node19.isGetterDef();
        com.google.javascript.rhino.Node node23 = node2.copyInformationFrom(node19);
        int int24 = node23.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test15659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15659");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.markName("InputId: java.io.IOException: java.io.IOException: ", 0, 29);
        boolean boolean19 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean20 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean22 = jSDocInfoBuilder1.addReference("{1574821220}");
        boolean boolean23 = jSDocInfoBuilder1.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test15660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15660");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("OR hi!\n    OR hi!\n", (java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = iOException6.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException();
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("");
        iOException9.addSuppressed((java.lang.Throwable) iOException12);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray15 = iOException12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test15661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15661");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 100, 10);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        boolean boolean14 = node9.isAdd();
        node9.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean17 = node9.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isAssign();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(51, node21, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node32 = node9.srcrefTree(node31);
        int int33 = node32.getLength();
        com.google.javascript.rhino.Node node34 = node3.useSourceInfoFromForTree(node32);
        boolean boolean35 = node3.isWith();
        com.google.javascript.rhino.Node node36 = node3.cloneNode();
        int int37 = node36.getSourceOffset();
        boolean boolean38 = node36.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test15662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15662");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry15.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType28, "");
        boolean boolean31 = jSType30.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = objectType13.testForEquality(jSType30);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSType30.collapseUnion();
        boolean boolean34 = objectType6.differsFrom(jSType30);
        boolean boolean35 = jSType30.matchesStringContext();
        boolean boolean36 = jSType30.matchesStringContext();
        java.lang.String str37 = jSType30.toAnnotationString();
        boolean boolean38 = jSType30.isNullType();
        boolean boolean39 = jSType30.isNoType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = jSType30.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "?" + "'", str37, "?");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(enumElementType40);
    }

    @Test
    public void test15663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15663");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.JSType jSType18 = objectType14.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType18.clearResolved();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry22.createObjectType(objectType25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = objectType26.toObjectType();
        boolean boolean28 = objectType27.matchesInt32Context();
        boolean boolean29 = objectType27.isStringValueType();
        boolean boolean30 = objectType27.canBeCalled();
        boolean boolean31 = objectType27.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType32 = objectType27.getTypeOfThis();
        boolean boolean33 = objectType27.isNoResolvedType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType27.toMaybeEnumElementType();
        java.lang.String str35 = objectType27.toAnnotationString();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSType18.resolve(errorReporter20, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSType36.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "?" + "'", str35, "?");
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertNull(jSDocInfo37);
    }

    @Test
    public void test15664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15664");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "None", "{1078264502}", "OR hi! [directives: []]\n", "{1078264502}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        boolean boolean23 = jSDocInfoBuilder1.isDescriptionRecorded();
        jSDocInfoBuilder1.markText("function (this:me, {2030651202}): me", 4093, 100, 0, 1);
        boolean boolean30 = jSDocInfoBuilder1.isPopulated();
        boolean boolean32 = jSDocInfoBuilder1.recordDescription("function (this:me, {1919316235}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15665");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getStartLine();
        int int4 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node5 = typePosition0.getItem();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test15666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15666");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        int int61 = nodeIterableList53.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList62 = nodeIterableList53.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor63 = nodeIterableList62.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = nodeIterableList62.remove(96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList62);
        org.junit.Assert.assertNotNull(nodeIterableItor63);
    }

    @Test
    public void test15667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15667");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        boolean boolean6 = node2.isOr();
        com.google.javascript.rhino.InputId inputId8 = new com.google.javascript.rhino.InputId("");
        java.lang.String str9 = inputId8.getIdName();
        java.lang.String str10 = inputId8.getIdName();
        node2.setInputId(inputId8);
        boolean boolean12 = node2.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = node13.isCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test15668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15668");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        boolean boolean22 = node17.isAdd();
        boolean boolean23 = node11.hasChild(node17);
        boolean boolean24 = node17.isDefaultCase();
        int int25 = node17.getSourcePosition();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = node17.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node17.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isNE();
        boolean boolean37 = node35.isInstanceOf();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDebugger();
        node40.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node54.isNot();
        int int58 = node54.getLineno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        boolean boolean67 = node64.isNot();
        int int68 = node64.getLineno();
        com.google.javascript.rhino.Node node69 = node54.srcref(node64);
        int int70 = node54.getCharno();
        com.google.javascript.rhino.Node node71 = node40.copyInformationFrom(node54);
        boolean boolean72 = node40.isTrue();
        boolean boolean73 = node40.isCase();
        boolean boolean74 = node40.isObjectLit();
        com.google.javascript.rhino.Node node75 = node35.srcrefTree(node40);
        boolean boolean76 = node35.isNull();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node35, "{599635391}");
        com.google.javascript.rhino.Node node79 = node17.useSourceInfoFromForTree(node35);
        boolean boolean80 = node17.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test15669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15669");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node5.siblings();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray18 = nodeIterableList17.toArray();
        boolean boolean19 = strSet14.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList17);
        java.util.HashSet[] hashSetArray21 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray22 = (java.util.HashSet<java.lang.String>[]) hashSetArray21;
        strSetArray22[0] = strSet14;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList25 = com.google.common.collect.ImmutableList.copyOf(strSetArray22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isExterns();
        boolean boolean38 = jSDocInfo36.hasReturnType();
        boolean boolean39 = jSDocInfo36.isOverride();
        jSDocInfo36.setLicense("hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node47.isNot();
        int int51 = node47.getLineno();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node57.isNot();
        int int61 = node57.getLineno();
        com.google.javascript.rhino.Node node62 = node47.srcref(node57);
        boolean boolean63 = node62.isDelProp();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        node69.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node69.setStaticSourceFile(staticSourceFile74);
        com.google.common.collect.ImmutableList<java.lang.Object> objList76 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray22, (java.lang.Object) node28, (java.lang.Object) "hi!", (java.lang.Object) boolean63, (java.lang.Object) node69);
        boolean boolean77 = node69.isInstanceOf();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(35, 37, 39);
        com.google.javascript.rhino.Node node82 = node69.srcrefTree(node81);
        int int83 = nodeIterableList2.lastIndexOf((java.lang.Object) node81);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList84 = nodeIterableList2.reverse();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean91 = node90.isThis();
        node87.addChildToBack(node90);
        boolean boolean93 = node87.isDebugger();
        boolean boolean94 = node87.isVoid();
        com.google.javascript.rhino.Node node95 = node87.getParent();
        boolean boolean96 = nodeIterableList84.equals((java.lang.Object) node87);
        boolean boolean97 = node87.isRegExp();
        int int98 = node87.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(hashSetArray21);
        org.junit.Assert.assertNotNull(strSetArray22);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test15670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15670");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        node6.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        boolean boolean19 = node17.isDelProp();
        boolean boolean20 = node17.hasChildren();
        boolean boolean21 = node17.isOr();
        java.lang.String str22 = node6.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDebugger();
        boolean boolean33 = node26.isAssign();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(51, node26, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node36.getAncestors();
        com.google.javascript.rhino.Node node38 = node17.copyInformationFrom(node36);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node36, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node56.isNot();
        int int60 = node56.getLineno();
        com.google.javascript.rhino.Node node61 = node46.srcref(node56);
        boolean boolean62 = node61.isDelProp();
        com.google.javascript.rhino.Node node63 = node61.getLastSibling();
        com.google.javascript.rhino.Node node64 = node36.clonePropsFrom(node61);
        boolean boolean65 = node36.isNoSideEffectsCall();
        node3.addChildToFront(node36);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node67 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str22, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15671");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(35);
        boolean boolean2 = node1.isIf();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15672");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry17.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType30, "");
        boolean boolean33 = jSType32.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = objectType15.testForEquality(jSType32);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSType32.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry1.createNullableType(jSType32);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        boolean boolean44 = objectType43.matchesInt32Context();
        boolean boolean45 = objectType43.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry47.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType60, "");
        com.google.javascript.rhino.jstype.UnionType unionType63 = objectType60.toMaybeUnionType();
        com.google.javascript.rhino.Node node64 = objectType60.getRootNode();
        boolean boolean65 = objectType60.isRegexpType();
        boolean boolean66 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType43, objectType60);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope67 = objectType60.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType68 = objectType60.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType69 = objectType60.unboxesTo();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNull(unionType63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSTypeStaticScope67);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
    }

    @Test
    public void test15673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15673");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        com.google.javascript.rhino.Node node9 = node2.getFirstChild();
        boolean boolean10 = node2.isNot();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        java.lang.String str33 = staticSourceFile31.getName();
        node2.setStaticSourceFile(staticSourceFile31);
        int int36 = staticSourceFile31.getColumnOfOffset((int) (byte) 10);
        int int38 = staticSourceFile31.getLineOffset(31);
        int int40 = staticSourceFile31.getLineOffset((int) '#');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str33, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2147483648) + "'", int38 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-2147483648) + "'", int40 == (-2147483648));
    }

    @Test
    public void test15674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15674");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        boolean boolean29 = jSTypeRegistry24.canPropertyBeDefined(jSType27, "Unknown class name");
        jSTypeRegistry24.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry24.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType37, "");
        boolean boolean40 = jSType39.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType39.collapseUnion();
        boolean boolean43 = objectType15.differsFrom(jSType39);
        boolean boolean44 = jSType39.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType6.getGreatestSubtype(jSType39);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSType45.findPropertyType("OR hi! [directives: []]\n");
        java.lang.String str48 = jSType45.toAnnotationString();
        java.lang.String str49 = jSType45.getDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = jSType45.canTestForEqualityWith(jSType50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "?" + "'", str48, "?");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test15675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15675");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.JSType jSType18 = objectType14.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        boolean boolean31 = jSTypeRegistry26.canPropertyBeDefined(jSType29, "Unknown class name");
        jSTypeRegistry26.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry26.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        jSTypeRegistry37.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot47 = objectType44.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry37.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType44);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType55 = objectType54.toMaybeEnumElementType();
        boolean boolean56 = jSTypeRegistry26.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType44, objectType54);
        com.google.javascript.rhino.jstype.JSType jSType58 = objectType44.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node59 = objectType44.getRootNode();
        boolean boolean60 = objectType44.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        boolean boolean67 = objectType66.isNominalConstructor();
        boolean boolean68 = jSTypeRegistry20.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType44, objectType66);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair69 = jSType18.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType) objectType44);
        boolean boolean70 = jSType18.isFunctionType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNull(jSTypeStaticSlot47);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNull(enumElementType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(typePair69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test15676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15676");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.String str14 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node15 = node2.getParent();
        boolean boolean16 = node2.isUnscopedQualifiedName();
        boolean boolean17 = node2.isNew();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15677");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        int int29 = typePosition0.getStartLine();
        typePosition0.setPositionInformation((int) (byte) 1, 83, 41, 41);
        int int35 = typePosition0.getPositionOnEndLine();
        int int36 = typePosition0.getStartLine();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 41 + "'", int35 == 41);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test15678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15678");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        java.lang.String[] strArray10 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList42 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray43 = nodeIterableList42.toArray();
        boolean boolean44 = strSet39.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList42);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList45 = com.google.common.collect.ImmutableList.of(strSet11, strSet25, strSet39);
        boolean boolean46 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet11);
        boolean boolean48 = jSDocInfoBuilder1.addReference("{1078264502}");
        boolean boolean49 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeIterableList42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSetList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15679");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList8 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8, jSTypeArray7);
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList8);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry12.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        jSTypeRegistry23.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot33 = objectType30.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry23.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType30);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType41 = objectType40.toMaybeEnumElementType();
        boolean boolean42 = jSTypeRegistry12.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType30, objectType40);
        com.google.javascript.rhino.jstype.JSType jSType44 = objectType30.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node45 = objectType30.getRootNode();
        boolean boolean46 = objectType30.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry48.createObjectType(objectType51);
        boolean boolean53 = objectType52.isNominalConstructor();
        boolean boolean54 = jSTypeRegistry6.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType30, objectType52);
        jSTypeRegistry1.unregisterPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType52);
        boolean boolean56 = objectType52.isNominalType();
        boolean boolean57 = objectType52.isString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNull(jSTypeStaticSlot33);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNull(enumElementType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test15680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15680");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(43, node1, 52, 200716);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15681");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node4.isDebugger();
        node4.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node18.isNot();
        int int22 = node18.getLineno();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node28.isNot();
        int int32 = node28.getLineno();
        com.google.javascript.rhino.Node node33 = node18.srcref(node28);
        int int34 = node18.getCharno();
        com.google.javascript.rhino.Node node35 = node4.copyInformationFrom(node18);
        boolean boolean36 = node4.isTrue();
        boolean boolean37 = node4.isCase();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(52, node4);
        boolean boolean39 = node4.isDefaultCase();
        boolean boolean40 = node4.isSetterDef();
        boolean boolean41 = node4.isBlock();
        boolean boolean42 = node4.isNoSideEffectsCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(97, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test15682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15682");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor3 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder4 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList5 = visibilityEnumBuilder4.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection6 = visibilityEnumBuilder4.build();
        boolean boolean7 = nodeIterableList0.contains((java.lang.Object) visibilityEnumBuilder4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isExterns();
        com.google.javascript.rhino.Node node10 = jSDocInfo8.getAssociatedNode();
        boolean boolean11 = jSDocInfo8.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo8.getType();
        java.lang.String str13 = jSDocInfo8.getMeaning();
        java.lang.String str14 = jSDocInfo8.getDescription();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean18 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder16.recordIdGenerator();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isGetElem();
        jSDocInfoBuilder16.markTypeNode(node22, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder16.recordBaseType(jSTypeExpression30);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = jSDocInfo35.getVisibility();
        boolean boolean39 = jSDocInfo35.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo35.setVisibility(visibility40);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray42 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility40 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray42);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder47.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility48);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isExterns();
        boolean boolean53 = jSDocInfo51.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean55 = jSDocInfo54.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo54.getType();
        boolean boolean57 = jSDocInfo54.isImplicitCast();
        boolean boolean58 = jSDocInfo54.isExport();
        boolean boolean59 = jSDocInfo54.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo54.getReturnType();
        boolean boolean61 = jSDocInfo54.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility63 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility63);
        jSDocInfo54.setVisibility(visibility63);
        jSDocInfo51.setVisibility(visibility63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder45.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility63);
        boolean boolean69 = jSDocInfoBuilder16.recordVisibility(visibility63);
        jSDocInfo8.setVisibility(visibility63);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder4.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility63);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor3);
        org.junit.Assert.assertNotNull(visibilityEnumList5);
        org.junit.Assert.assertNotNull(visibilityEnumCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(visibility38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray42);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + visibility63 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility63.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
    }

    @Test
    public void test15683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15683");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        jSTypeRegistry1.forwardDeclareType("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        boolean boolean25 = jSType23.isNumber();
        jSTypeRegistry1.unregisterPropertyOnType("{1078264502}", jSType23);
        boolean boolean27 = jSType23.isNullType();
        boolean boolean28 = jSType23.isStringValueType();
        boolean boolean29 = jSType23.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSType23.dereference();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectType30);
    }

    @Test
    public void test15684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15684");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        boolean boolean9 = jSDocInfo0.hasReturnType();
        java.lang.String str10 = jSDocInfo0.getVersion();
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("function (this:me, {2030651202}): me");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test15685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15685");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition18);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList21 = com.google.common.collect.ImmutableList.of(namePosition20);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition26);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition28 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList29 = com.google.common.collect.ImmutableList.of(namePosition15, namePosition16, namePosition17, namePosition18, namePosition20, namePosition22, namePosition23, namePosition24, namePosition25, namePosition26, namePosition28);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition32 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition33);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition35 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList36 = com.google.common.collect.ImmutableList.of(namePosition35);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition41 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList42 = com.google.common.collect.ImmutableList.of(namePosition41);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList44 = com.google.common.collect.ImmutableList.of(namePosition30, namePosition31, namePosition32, namePosition33, namePosition35, namePosition37, namePosition38, namePosition39, namePosition40, namePosition41, namePosition43);
        int int45 = namePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition49 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList50 = com.google.common.collect.ImmutableList.of(namePosition49);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition51 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList52 = com.google.common.collect.ImmutableList.of(namePosition51);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition54 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition55 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition56 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition57 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList58 = com.google.common.collect.ImmutableList.of(namePosition57);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition59 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList60 = com.google.common.collect.ImmutableList.of(namePosition46, namePosition47, namePosition48, namePosition49, namePosition51, namePosition53, namePosition54, namePosition55, namePosition56, namePosition57, namePosition59);
        int int61 = namePosition53.getPositionOnEndLine();
        com.google.javascript.rhino.Node node62 = namePosition53.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition65 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList67 = com.google.common.collect.ImmutableList.of(namePosition66);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition68);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition70 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition71 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition72 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition73 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition74 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList75 = com.google.common.collect.ImmutableList.of(namePosition74);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition76 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList77 = com.google.common.collect.ImmutableList.of(namePosition63, namePosition64, namePosition65, namePosition66, namePosition68, namePosition70, namePosition71, namePosition72, namePosition73, namePosition74, namePosition76);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList78 = com.google.common.collect.ImmutableList.of(namePosition7, namePosition18, namePosition33, namePosition53, namePosition74);
        int int79 = namePosition33.getEndLine();
        int int80 = namePosition33.getStartLine();
        int int81 = namePosition33.getEndLine();
        int int82 = namePosition33.getStartLine();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertNotNull(namePositionList21);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList29);
        org.junit.Assert.assertNotNull(namePositionList34);
        org.junit.Assert.assertNotNull(namePositionList36);
        org.junit.Assert.assertNotNull(namePositionList42);
        org.junit.Assert.assertNotNull(namePositionList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(namePositionList50);
        org.junit.Assert.assertNotNull(namePositionList52);
        org.junit.Assert.assertNotNull(namePositionList58);
        org.junit.Assert.assertNotNull(namePositionList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(namePositionList67);
        org.junit.Assert.assertNotNull(namePositionList69);
        org.junit.Assert.assertNotNull(namePositionList75);
        org.junit.Assert.assertNotNull(namePositionList77);
        org.junit.Assert.assertNotNull(namePositionList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test15686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15686");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry25.createAnonymousObjectType();
        objectType33.clearResolved();
        node17.setJSType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        boolean boolean46 = node38.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType33, node38);
        boolean boolean48 = jSTypeRegistry1.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33);
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = objectType56.toObjectType();
        boolean boolean58 = objectType57.matchesInt32Context();
        boolean boolean59 = objectType57.isStringValueType();
        boolean boolean60 = objectType57.canBeCalled();
        boolean boolean61 = objectType57.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        boolean boolean68 = jSTypeRegistry63.canPropertyBeDefined(jSType66, "Unknown class name");
        jSTypeRegistry63.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry63.createAnonymousObjectType();
        objectType71.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType74 = objectType71.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean75 = objectType71.isNoResolvedType();
        boolean boolean76 = objectType57.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType71);
        boolean boolean77 = objectType71.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType79 = objectType71.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSType79.toMaybeFunctionType();
        boolean boolean81 = jSTypeRegistry1.declareType("java.io.IOException: JSDocInfo", jSType79);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(functionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test15687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15687");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node2.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node2.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder11);
        org.junit.Assert.assertNotNull(ancestorIterable12);
    }

    @Test
    public void test15688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15688");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        boolean boolean25 = jSType23.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType26 = jSType23.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSType23.dereference();
        boolean boolean28 = jSType23.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, jSType23);
        boolean boolean30 = jSType23.isEnumType();
        boolean boolean31 = jSType23.isNoObjectType();
        boolean boolean32 = jSType23.isNoType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test15689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15689");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(42);
    }

    @Test
    public void test15690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15691");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        boolean boolean81 = jSDocInfoBuilder51.recordBlockDescription("InputId: ");
        boolean boolean82 = jSDocInfoBuilder51.recordConstructor();
        boolean boolean84 = jSDocInfoBuilder51.hasParameter("INSTANCEOF");
        boolean boolean86 = jSDocInfoBuilder51.recordFileOverview("");
        boolean boolean88 = jSDocInfoBuilder51.recordMeaning("{51547601}");
        boolean boolean89 = jSDocInfoBuilder51.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15692");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.wasEmptyNode();
        int int5 = node2.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int8 = stringPosition7.getPositionOnEndLine();
        int int9 = stringPosition7.getEndLine();
        int int10 = stringPosition7.getEndLine();
        stringPosition7.setItem("InputId: ");
        stringPosition7.setItem("{1078264502}");
        node2.putProp(41, (java.lang.Object) stringPosition7);
        int int16 = stringPosition7.getPositionOnEndLine();
        int int17 = stringPosition7.getPositionOnStartLine();
        int int18 = stringPosition7.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test15693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15693");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node5 = node4.cloneNode();
        boolean boolean6 = node4.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15694");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        java.lang.String str23 = node22.toStringTree();
        boolean boolean24 = node22.isGetElem();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node34.isNot();
        int int38 = node34.getLineno();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node49 = node34.srcref(node44);
        int int50 = node34.getCharno();
        boolean boolean51 = node34.isQuotedString();
        boolean boolean52 = node34.isIf();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        boolean boolean63 = node58.isAdd();
        com.google.javascript.rhino.Node node64 = node34.useSourceInfoFromForTree(node58);
        int int65 = node28.getIndexOfChild(node64);
        com.google.javascript.rhino.Node node66 = node22.useSourceInfoIfMissingFromForTree(node64);
        node22.removeProp(0);
        boolean boolean69 = node22.isIn();
        boolean boolean70 = node22.isArrayLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR hi!\n" + "'", str23, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test15695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15695");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isHidden();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15696");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordParameter("OR hi!", jSTypeExpression6);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        boolean boolean16 = node13.isNot();
        int int17 = node13.getLineno();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node28 = node13.srcref(node23);
        boolean boolean29 = node28.isDelProp();
        com.google.javascript.rhino.Node node30 = node28.getLastSibling();
        boolean boolean31 = node30.isUnscopedQualifiedName();
        boolean boolean32 = node30.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo33.getImplementedInterfaces();
        java.lang.String str37 = jSDocInfo33.getDescription();
        node30.setJSDocInfo(jSDocInfo33);
        boolean boolean39 = node30.isDefaultCase();
        node30.putBooleanProp(53, true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder1.build(node30);
        boolean boolean44 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test15697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15697");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor29 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo30.getType();
        boolean boolean33 = jSDocInfo30.isImplicitCast();
        boolean boolean34 = jSDocInfo30.isOverride();
        boolean boolean35 = jSDocInfo30.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo30.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo30.getType();
        boolean boolean38 = jSDocInfo30.isNoCompile();
        boolean boolean39 = nodeIterableList0.equals((java.lang.Object) jSDocInfo30);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray42 = nodeIterableList41.toArray();
        boolean boolean43 = nodeIterableList41.isEmpty();
        boolean boolean44 = nodeIterableList41.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor45 = nodeIterableList41.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor46 = nodeIterableList41.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = nodeIterableList41.asList();
        java.lang.Object[] objArray48 = nodeIterableList41.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = nodeIterableList0.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor45);
        org.junit.Assert.assertNotNull(nodeIterableItor46);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
    }

    @Test
    public void test15698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15698");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor3 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.isExterns();
        com.google.javascript.rhino.Node node6 = jSDocInfo4.getAssociatedNode();
        boolean boolean7 = jSDocInfo4.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getType();
        boolean boolean9 = jSDocInfo4.hasReturnType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo4.getModifies();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean21 = nodeIterableList20.add(nodeIterable19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray37 = nodeIterableList36.toArray();
        boolean boolean38 = strSet33.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList36);
        java.lang.Object[] objArray39 = nodeIterableList36.toArray();
        boolean boolean40 = nodeIterableList36.isEmpty();
        boolean boolean41 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList36);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor42 = nodeIterableList20.iterator();
        boolean boolean43 = strSet10.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor44 = nodeIterableList20.iterator();
        boolean boolean45 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags46 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags46.setMutatesArguments();
        sideEffectFlags46.setReturnsTainted();
        sideEffectFlags46.setReturnsTainted();
        sideEffectFlags46.setThrows();
        sideEffectFlags46.clearAllFlags();
        sideEffectFlags46.setReturnsTainted();
        boolean boolean53 = nodeIterableList20.equals((java.lang.Object) sideEffectFlags46);
        boolean boolean54 = sideEffectFlags46.areAllFlagsSet();
        int int55 = sideEffectFlags46.valueOf();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableItor3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 15 + "'", int55 == 15);
    }

    @Test
    public void test15699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15699");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean12 = jSDocInfoBuilder1.recordMeaning("{...}");
        boolean boolean13 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node17, "");
        boolean boolean20 = jSTypeExpression19.isVarArgs();
        boolean boolean21 = jSDocInfoBuilder1.recordThisType(jSTypeExpression19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression19);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor34 = nodeIterableList23.iterator();
        java.lang.Object[] objArray35 = nodeIterableList23.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList23.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray38 = nodeIterableList37.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = nodeIterableList37.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray46 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition40, typePosition41, typePosition42, typePosition43, typePosition44, typePosition45 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray47 = nodeIterableList37.toArray(typePositionArray46);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder49.addAuthor("");
        boolean boolean52 = jSDocInfoBuilder49.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = null;
        boolean boolean54 = jSDocInfoBuilder49.recordReturnType(jSTypeExpression53);
        int int55 = nodeIterableList37.lastIndexOf((java.lang.Object) jSTypeExpression53);
        boolean boolean56 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.lang.Object[] objArray57 = nodeIterableList37.toArray();
        boolean boolean58 = jSTypeExpression19.equals((java.lang.Object) nodeIterableList37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertNotNull(nodeIterableItor34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(typePositionArray46);
        org.junit.Assert.assertNotNull(typePositionArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test15700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15700");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node41 = node26.srcref(node36);
        int int42 = node26.getCharno();
        boolean boolean43 = node26.isQuotedString();
        boolean boolean44 = node26.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.Node node56 = node26.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node62.cloneTree();
        java.lang.Object obj70 = node68.getProp((int) (byte) 0);
        int int71 = node68.getChildCount();
        node56.addChildrenToFront(node68);
        boolean boolean73 = strSet11.contains((java.lang.Object) node56);
        boolean boolean74 = node56.isCase();
        boolean boolean75 = node56.isDebugger();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test15701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15701");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean16 = node11.isEquivalentToTyped(node15);
        com.google.javascript.rhino.Node node17 = node11.cloneNode();
        com.google.javascript.rhino.InputId inputId18 = node11.getInputId();
        boolean boolean19 = node11.isLabelName();
        com.google.javascript.rhino.Node node20 = node2.srcref(node11);
        boolean boolean21 = node2.isInc();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        boolean boolean27 = jSDocInfoBuilder23.recordHiddenness();
        boolean boolean28 = jSDocInfoBuilder23.recordExpose();
        boolean boolean29 = jSDocInfoBuilder23.recordIdGenerator();
        boolean boolean31 = jSDocInfoBuilder23.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression32);
        jSDocInfoBuilder23.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean36 = jSDocInfoBuilder23.recordImplicitCast();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        node40.putBooleanProp(0, false);
        node40.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean57 = node40.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node40.getStaticSourceFile();
        int int60 = staticSourceFile58.getLineOfOffset(53);
        jSDocInfoBuilder23.markName("TYPEOF hi!", staticSourceFile58, 52, 0);
        java.lang.String str64 = staticSourceFile58.getName();
        node2.setStaticSourceFile(staticSourceFile58);
        int int67 = staticSourceFile58.getLineOfOffset((int) (byte) 0);
        int int69 = staticSourceFile58.getLineOffset(46);
        int int71 = staticSourceFile58.getLineOfOffset(53);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str64, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-2147483648) + "'", int69 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test15702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15702");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test15703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15703");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        boolean boolean10 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean11 = jSDocInfoBuilder1.recordExpose();
        boolean boolean12 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder1.addReference("{59500334}");
        boolean boolean15 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15704");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        boolean boolean9 = jSDocInfo0.isExport();
        boolean boolean10 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        boolean boolean13 = jSDocInfo0.hasParameter("Not declared as a type name");
        java.lang.String str14 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(jSTypeExpression15);
    }

    @Test
    public void test15705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15705");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        java.lang.String str40 = staticSourceFile31.getName();
        int int42 = staticSourceFile31.getLineOfOffset((int) (short) 100);
        boolean boolean43 = staticSourceFile31.isExtern();
        int int45 = staticSourceFile31.getLineOfOffset(19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str40, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test15706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15706");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean20 = jSDocInfoBuilder18.recordPreserveTry();
        boolean boolean21 = jSDocInfoBuilder18.isJavaDispatch();
        boolean boolean22 = jSDocInfoBuilder18.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        boolean boolean28 = jSDocInfoBuilder24.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder24.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder24.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder24.recordReturnType(jSTypeExpression32);
        boolean boolean35 = jSDocInfoBuilder24.recordDeprecationReason("Not declared as a constructor");
        boolean boolean36 = jSDocInfoBuilder24.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.addAuthor("");
        boolean boolean41 = jSDocInfoBuilder38.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder38.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder46.addAuthor("");
        boolean boolean49 = jSDocInfoBuilder46.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = null;
        boolean boolean51 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression50);
        boolean boolean52 = jSDocInfoBuilder46.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder46.markName("", staticSourceFile54, 29, 50);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node60.isDebugger();
        boolean boolean67 = node60.isSyntheticBlock();
        boolean boolean68 = node60.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node60, "Unknown class name");
        boolean boolean72 = jSDocInfoBuilder46.recordThrowDescription(jSTypeExpression70, "?");
        boolean boolean73 = jSDocInfoBuilder38.recordExtendedInterface(jSTypeExpression70);
        boolean boolean74 = jSDocInfoBuilder24.recordDefineType(jSTypeExpression70);
        boolean boolean76 = jSDocInfoBuilder18.recordThrowDescription(jSTypeExpression70, "?");
        boolean boolean77 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression70);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression70);
        boolean boolean79 = jSTypeExpression70.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test15707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15707");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean6 = jSDocInfoBuilder1.addReference("");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isDebugger();
        com.google.javascript.rhino.InputId inputId12 = new com.google.javascript.rhino.InputId("");
        java.lang.String str13 = inputId12.getIdName();
        node9.setInputId(inputId12);
        boolean boolean15 = node9.isTypeOf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        boolean boolean20 = node18.isDelProp();
        int int21 = node18.getChildCount();
        boolean boolean22 = node18.isComma();
        boolean boolean23 = node18.isNoSideEffectsCall();
        boolean boolean24 = node18.isSetterDef();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node30 = node29.cloneNode();
        com.google.javascript.rhino.Node node31 = node30.removeChildren();
        com.google.javascript.rhino.Node node32 = node18.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node33 = node9.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        node36.putBooleanProp(0, false);
        node36.setVarArgs(false);
        boolean boolean53 = node36.isOnlyModifiesThisCall();
        node36.setString("{1517329911}");
        node33.addChildrenToFront(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder1.build(node36);
        java.lang.String str58 = jSDocInfo57.toString();
        java.lang.String str59 = jSDocInfo57.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "JSDocInfo" + "'", str58, "JSDocInfo");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test15708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15708");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.util.Iterator<java.lang.String> strItor14 = strSet11.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray16 = nodeIterableList15.toArray();
        java.lang.Object[] objArray17 = nodeIterableList15.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getType();
        boolean boolean21 = nodeIterableList15.contains((java.lang.Object) jSTypeExpression20);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor22 = nodeIterableList15.iterator();
        boolean boolean23 = strSet11.contains((java.lang.Object) nodeIterableList15);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList15.asList();
        int int25 = nodeIterableList24.size();
        java.lang.Object[] objArray26 = nodeIterableList24.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean32 = jSDocInfoBuilder29.recordDescription("hi!");
        boolean boolean33 = jSDocInfoBuilder29.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder29.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder29.recordReturnType(jSTypeExpression37);
        boolean boolean40 = jSDocInfoBuilder29.hasParameter("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node43.siblings();
        node43.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        node57.setOptionalArg(false);
        com.google.javascript.rhino.Node node62 = node43.srcref(node57);
        jSDocInfoBuilder29.markTypeNode(node57, 51, (int) (short) 100, 0, (int) (short) 0, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = node57.getJSDocInfo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable70 = node57.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList24.add(8, (java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(jSDocInfo69);
        org.junit.Assert.assertNotNull(ancestorIterable70);
    }

    @Test
    public void test15709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15709");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = objectType14.isEnumType();
        boolean boolean18 = objectType14.isNoObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        boolean boolean26 = objectType25.matchesInt32Context();
        boolean boolean27 = objectType25.isStringValueType();
        boolean boolean28 = objectType25.canBeCalled();
        boolean boolean29 = objectType25.isAllType();
        boolean boolean30 = objectType25.isStringObjectType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = objectType14.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType25);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = objectType14.dereference();
        boolean boolean33 = objectType14.isFunctionType();
        boolean boolean34 = objectType14.isRegexpType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot36 = objectType14.getOwnSlot("{1099410013}");
        boolean boolean37 = objectType14.isCheckedUnknownType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15710");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition18 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker20.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker20.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList24 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker7, marker11, marker15, marker16, marker20);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition25 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker26 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition27 = marker26.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition28 = marker26.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition29 = marker26.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker30 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition31 = marker30.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition32 = marker30.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker33 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = marker33.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition35 = marker33.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition36 = marker33.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker37 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition38 = marker37.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition39 = marker37.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition40 = marker37.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker41 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker42 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition43 = marker42.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition44 = marker42.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition45 = marker42.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker46 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition47 = marker46.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition48 = marker46.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = marker46.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList50 = com.google.common.collect.ImmutableList.of(marker26, marker30, marker33, marker37, marker41, marker42, marker46);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList51 = com.google.common.collect.ImmutableList.of(marker16, marker46);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition52 = marker46.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition53 = marker46.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(nodeSourcePosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNotNull(markerList24);
        org.junit.Assert.assertNull(nodeSourcePosition25);
        org.junit.Assert.assertNull(nodeSourcePosition27);
        org.junit.Assert.assertNull(nodeSourcePosition28);
        org.junit.Assert.assertNull(nodeSourcePosition29);
        org.junit.Assert.assertNull(nodeSourcePosition31);
        org.junit.Assert.assertNull(nodeSourcePosition32);
        org.junit.Assert.assertNull(stringPosition34);
        org.junit.Assert.assertNull(stringPosition35);
        org.junit.Assert.assertNull(stringPosition36);
        org.junit.Assert.assertNull(nodeSourcePosition38);
        org.junit.Assert.assertNull(nodeSourcePosition39);
        org.junit.Assert.assertNull(nodeSourcePosition40);
        org.junit.Assert.assertNull(nodeSourcePosition43);
        org.junit.Assert.assertNull(nodeSourcePosition44);
        org.junit.Assert.assertNull(nodeSourcePosition45);
        org.junit.Assert.assertNull(nodeSourcePosition47);
        org.junit.Assert.assertNull(nodeSourcePosition48);
        org.junit.Assert.assertNull(stringPosition49);
        org.junit.Assert.assertNotNull(markerList50);
        org.junit.Assert.assertNotNull(markerList51);
        org.junit.Assert.assertNull(nodeSourcePosition52);
        org.junit.Assert.assertNull(nodeSourcePosition53);
    }

    @Test
    public void test15711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15711");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry25.createAnonymousObjectType();
        objectType33.clearResolved();
        node17.setJSType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        boolean boolean46 = node38.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType33, node38);
        boolean boolean48 = jSTypeRegistry1.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry50.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry58.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean67 = node62.isEquivalentToTyped(node66);
        com.google.javascript.rhino.Node node68 = node62.cloneNode();
        java.lang.Object obj70 = node62.getProp((int) (short) 1);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry72.createAnonymousObjectType();
        objectType80.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType80.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean84 = objectType80.isNullType();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry1.createObjectType("[]", node62, objectType80);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot87 = objectType85.getSlot("OR []");
        boolean boolean88 = objectType85.hasAnyTemplate();
        boolean boolean89 = objectType85.isString();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot91 = objectType85.getOwnSlot("{1430950009}");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(functionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(jSTypeStaticSlot87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot91);
    }

    @Test
    public void test15712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15712");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        boolean boolean10 = objectType6.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry12.createAnonymousObjectType();
        objectType20.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType23 = objectType20.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean24 = objectType20.isNoResolvedType();
        boolean boolean25 = objectType6.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType20);
        boolean boolean26 = objectType20.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType28 = objectType20.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node29 = objectType20.getRootNode();
        com.google.javascript.rhino.Node node30 = objectType20.getRootNode();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSType28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test15713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15713");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 37);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test15714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15714");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node11.setJSType(jSType12);
        boolean boolean14 = node11.isString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        boolean boolean37 = node32.isAdd();
        boolean boolean38 = node26.hasChild(node32);
        boolean boolean39 = node32.isDefaultCase();
        int int40 = node32.getSourcePosition();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isTypeOf();
        boolean boolean45 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = node32.copyInformationFromForTree(node43);
        boolean boolean47 = node11.isEquivalentToTyped(node43);
        boolean boolean48 = node43.isStringKey();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        boolean boolean56 = jSTypeRegistry51.canPropertyBeDefined(jSType54, "Unknown class name");
        jSTypeRegistry51.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry51.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType64, "");
        com.google.javascript.rhino.jstype.JSType jSType68 = objectType64.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean69 = jSType68.isUnionType();
        boolean boolean70 = jSType68.isInterface();
        node43.putProp(83, (java.lang.Object) boolean70);
        boolean boolean72 = node43.isGetProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test15715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15715");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean11 = jSDocInfoBuilder1.recordMeaning("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        node14.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node28.isNot();
        int int32 = node28.getLineno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        com.google.javascript.rhino.Node node43 = node28.srcref(node38);
        int int44 = node28.getCharno();
        com.google.javascript.rhino.Node node45 = node14.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node51 = node50.cloneNode();
        boolean boolean52 = node51.isAssignAdd();
        int int53 = node14.getIndexOfChild(node51);
        boolean boolean54 = node51.isAnd();
        boolean boolean55 = node51.isScript();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(40);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isLabelName();
        node57.putBooleanProp(46, false);
        boolean boolean63 = node57.isLocalResultCall();
        com.google.javascript.rhino.Node node64 = node51.srcrefTree(node57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = jSDocInfoBuilder1.build(node57);
        boolean boolean66 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test15716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15716");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 16);
        boolean boolean2 = node1.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15717");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test15718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15718");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean16 = node11.isEquivalentToTyped(node15);
        com.google.javascript.rhino.Node node17 = node11.cloneNode();
        com.google.javascript.rhino.InputId inputId18 = node11.getInputId();
        boolean boolean19 = node11.isLabelName();
        com.google.javascript.rhino.Node node20 = node2.srcref(node11);
        boolean boolean21 = node2.isTrue();
        boolean boolean22 = node2.isScript();
        boolean boolean23 = node2.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test15719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15719");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        objectType18.clearResolved();
        node2.setJSType((com.google.javascript.rhino.jstype.JSType) objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = node2.getJSType();
        java.lang.String str22 = jSType21.toString();
        java.lang.String str23 = jSType21.toDebugHashCodeString();
        boolean boolean24 = jSType21.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{1498207944}" + "'", str23, "{1498207944}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15720");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean5 = nodeIterableList0.contains((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = nodeIterableList6.reverse();
        boolean boolean8 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList6);
        boolean boolean9 = nodeIterableList6.isEmpty();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test15721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15721");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList8 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList8, jSTypeArray7);
        com.google.javascript.rhino.Node node10 = jSTypeRegistry6.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList8);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry12.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        jSTypeRegistry23.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot33 = objectType30.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry23.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType30);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType41 = objectType40.toMaybeEnumElementType();
        boolean boolean42 = jSTypeRegistry12.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType30, objectType40);
        com.google.javascript.rhino.jstype.JSType jSType44 = objectType30.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node45 = objectType30.getRootNode();
        boolean boolean46 = objectType30.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry48.createObjectType(objectType51);
        boolean boolean53 = objectType52.isNominalConstructor();
        boolean boolean54 = jSTypeRegistry6.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType30, objectType52);
        jSTypeRegistry1.unregisterPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType52);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable57 = jSTypeRegistry1.getTypesWithProperty("{650497}");
        jSTypeRegistry1.resetForTypeCheck();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNull(jSTypeStaticSlot33);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNull(enumElementType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jSTypeIterable57);
    }

    @Test
    public void test15722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15722");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(44, "InputId: {51547601}", 15, 43);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15723");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isGetElem();
        jSDocInfoBuilder1.markTypeNode(node7, (int) '#', (int) (short) -1, (int) '4', 2, false);
        boolean boolean15 = node7.isInc();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15724");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry25.createAnonymousObjectType();
        objectType33.clearResolved();
        node17.setJSType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        boolean boolean46 = node38.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType33, node38);
        boolean boolean48 = jSTypeRegistry1.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry50.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry58.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean67 = node62.isEquivalentToTyped(node66);
        com.google.javascript.rhino.Node node68 = node62.cloneNode();
        java.lang.Object obj70 = node62.getProp((int) (short) 1);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry72.createAnonymousObjectType();
        objectType80.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType80.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean84 = objectType80.isNullType();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry1.createObjectType("[]", node62, objectType80);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot87 = objectType85.getSlot("OR []");
        boolean boolean88 = objectType85.hasAnyTemplate();
        boolean boolean89 = objectType85.isTemplateType();
        boolean boolean90 = objectType85.isEmptyType();
        java.lang.String str91 = objectType85.toDebugHashCodeString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(functionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNull(jSTypeStaticSlot87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "{882295584}" + "'", str91, "{882295584}");
    }

    @Test
    public void test15725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15725");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        java.lang.String str6 = node2.toStringTree();
        int int7 = node2.getCharno();
        boolean boolean8 = node2.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR hi!\n" + "'", str6, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15726");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry25.createAnonymousObjectType();
        objectType33.clearResolved();
        node17.setJSType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        boolean boolean46 = node38.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType33, node38);
        boolean boolean48 = jSTypeRegistry1.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry50.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry58.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean67 = node62.isEquivalentToTyped(node66);
        com.google.javascript.rhino.Node node68 = node62.cloneNode();
        java.lang.Object obj70 = node62.getProp((int) (short) 1);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry72.createAnonymousObjectType();
        objectType80.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType80.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean84 = objectType80.isNullType();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry1.createObjectType("[]", node62, objectType80);
        boolean boolean86 = objectType85.isTemplateType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType87 = objectType85.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot89 = objectType85.getSlot("{1996871228}");
        boolean boolean90 = objectType85.hasAnyTemplate();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(functionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(enumElementType87);
        org.junit.Assert.assertNull(jSTypeStaticSlot89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test15727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15727");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        boolean boolean6 = node2.isComma();
        boolean boolean7 = node2.isNoSideEffectsCall();
        boolean boolean8 = node2.isSetterDef();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node16 = node2.copyInformationFromForTree(node14);
        boolean boolean17 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        com.google.javascript.rhino.Node node38 = node23.srcref(node33);
        boolean boolean39 = node33.isComma();
        node33.setVarArgs(true);
        java.lang.String str42 = node33.toString();
        boolean boolean43 = node33.isNot();
        com.google.javascript.rhino.Node node44 = node14.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean45 = node14.isRegExp();
        boolean boolean46 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node49.isDebugger();
        boolean boolean56 = node49.isVoid();
        boolean boolean57 = node49.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node49.getJSDocInfo();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition59 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition60 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition61 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition62 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList63 = com.google.common.collect.ImmutableList.of(namePosition62);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList65 = com.google.common.collect.ImmutableList.of(namePosition64);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition67 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition69 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition70 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList71 = com.google.common.collect.ImmutableList.of(namePosition70);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition72 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList73 = com.google.common.collect.ImmutableList.of(namePosition59, namePosition60, namePosition61, namePosition62, namePosition64, namePosition66, namePosition67, namePosition68, namePosition69, namePosition70, namePosition72);
        int int74 = namePosition62.getEndLine();
        int int75 = namePosition62.getStartLine();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean82 = node81.isThis();
        node78.addChildToBack(node81);
        boolean boolean84 = node81.isNot();
        int int85 = node81.getLineno();
        boolean boolean86 = node81.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType87 = null;
        node81.setJSType(jSType87);
        namePosition62.setItem(node81);
        com.google.javascript.rhino.Node node90 = node81.removeChildren();
        int int91 = node81.getLength();
        int int92 = node81.getSourcePosition();
        com.google.javascript.rhino.Node node93 = node49.srcref(node81);
        com.google.javascript.rhino.Node node94 = node14.copyInformationFromForTree(node93);
        boolean boolean95 = node94.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi! [var_args_name: 1]" + "'", str42, "OR hi! [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertNotNull(namePositionList63);
        org.junit.Assert.assertNotNull(namePositionList65);
        org.junit.Assert.assertNotNull(namePositionList71);
        org.junit.Assert.assertNotNull(namePositionList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test15728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15728");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.jstype.JSType jSType43 = objectType29.autobox();
        boolean boolean44 = jSType43.isVoidType();
        boolean boolean45 = jSType43.isEnumType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15729");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        boolean boolean81 = jSDocInfo62.hasEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test15730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15730");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList9.reverse();
        boolean boolean11 = nodeIterableList10.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15731");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        boolean boolean40 = node39.isAssignAdd();
        int int41 = node2.getIndexOfChild(node39);
        boolean boolean42 = node39.isAnd();
        boolean boolean43 = node39.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(40);
        java.lang.String str46 = node45.getQualifiedName();
        boolean boolean47 = node45.isLabelName();
        node45.putBooleanProp(46, false);
        boolean boolean51 = node45.isLocalResultCall();
        com.google.javascript.rhino.Node node52 = node39.srcrefTree(node45);
        boolean boolean53 = node45.isTry();
        boolean boolean54 = node45.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15732");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 38, (int) (byte) 1, (int) (byte) 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(31, 15, 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node7.children();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDebugger();
        com.google.javascript.rhino.Node node19 = node12.getFirstChild();
        boolean boolean20 = node12.isNot();
        boolean boolean21 = node12.isIn();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isAssign();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(51, node25, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node35.getAncestors();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(1, node12, node35, 54, 10);
        boolean boolean40 = node12.isInc();
        com.google.javascript.rhino.Node node41 = node7.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node42 = node3.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node43 = node42.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = node43.getIntProp(41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test15733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15733");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("OR hi! [directives: []]\n", staticSourceFile31, 8, 41);
        java.lang.String str38 = staticSourceFile31.getName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str38, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test15734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15734");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        node2.detachChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node16.isDebugger();
        boolean boolean23 = node16.isVoid();
        boolean boolean24 = node16.hasOneChild();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry26.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean35 = node30.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isWhile();
        node16.addChildToBack(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDebugger();
        com.google.javascript.rhino.Node node47 = node40.getFirstChild();
        boolean boolean48 = node40.isNot();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node51.siblings();
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet60);
        node51.putBooleanProp(0, false);
        node51.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean68 = node51.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node51.getStaticSourceFile();
        boolean boolean70 = staticSourceFile69.isExtern();
        java.lang.String str71 = staticSourceFile69.getName();
        node40.setStaticSourceFile(staticSourceFile69);
        int int74 = staticSourceFile69.getColumnOfOffset((int) (byte) 10);
        int int76 = staticSourceFile69.getLineOffset(31);
        int int78 = staticSourceFile69.getLineOffset((int) (byte) 100);
        node34.setStaticSourceFile(staticSourceFile69);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = node2.getChildBefore(node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(staticSourceFile69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str71, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-2147483648) + "'", int76 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-2147483648) + "'", int78 == (-2147483648));
    }

    @Test
    public void test15735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15735");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.String str12 = node11.toStringTree();
        boolean boolean13 = node11.isNE();
        boolean boolean14 = node11.isLocalResultCall();
        int int16 = node11.getIntProp(46);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(31);
        com.google.javascript.rhino.Node node19 = node11.srcref(node18);
        boolean boolean20 = node11.isHook();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node23.isDebugger();
        boolean boolean30 = node23.isVoid();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isTypeOf();
        com.google.javascript.rhino.Node node35 = node23.srcrefTree(node33);
        com.google.javascript.rhino.Node node36 = node23.getLastSibling();
        boolean boolean37 = node23.isNew();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.recordInterface();
        boolean boolean42 = jSDocInfoBuilder39.recordDescription("hi!");
        boolean boolean43 = jSDocInfoBuilder39.recordHiddenness();
        boolean boolean44 = jSDocInfoBuilder39.recordExpose();
        boolean boolean45 = jSDocInfoBuilder39.recordNoCompile();
        boolean boolean46 = jSDocInfoBuilder39.isPopulatedWithFileOverview();
        boolean boolean47 = jSDocInfoBuilder39.isPopulated();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node51.siblings();
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet60);
        node51.putBooleanProp(0, false);
        node51.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean68 = node51.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node51.getStaticSourceFile();
        boolean boolean70 = staticSourceFile69.isExtern();
        int int72 = staticSourceFile69.getLineOffset(16);
        jSDocInfoBuilder39.markName("None", staticSourceFile69, (int) (byte) 1, 43);
        int int77 = staticSourceFile69.getColumnOfOffset(4);
        int int79 = staticSourceFile69.getColumnOfOffset(2);
        node23.setStaticSourceFile(staticSourceFile69);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(47, "Unknown class name", (int) (byte) 100, (int) ' ');
        boolean boolean86 = node85.isThrow();
        com.google.javascript.rhino.Node node87 = node23.useSourceInfoIfMissingFrom(node85);
        com.google.javascript.rhino.Node node88 = node11.useSourceInfoFromForTree(node87);
        boolean boolean89 = node87.isQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR hi!\n" + "'", str12, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(staticSourceFile69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-2147483648) + "'", int72 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15736");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray4 = nodeIterableList3.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList9.reverse();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList11, 52, node18 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = nodeIterableList25.reverse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList27, 52, node34 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray42 = nodeIterableList41.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = nodeIterableList41.reverse();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList43, 52, node50 };
        java.lang.Object[][] objArray54 = new java.lang.Object[][] { objArray21, objArray37, objArray53 };
        java.lang.Object[][] objArray55 = nodeIterableList5.toArray(objArray54);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray57 = nodeIterableList56.toArray();
        int int59 = nodeIterableList56.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray60 = nodeIterableList56.toArray();
        boolean boolean61 = nodeIterableList5.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList56);
        boolean boolean63 = nodeIterableList5.equals((java.lang.Object) (short) 1);
        int int64 = nodeIterableList5.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream65 = nodeIterableList5.stream();
        boolean boolean66 = nodeIterableList5.isEmpty();
        boolean boolean67 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList70 = visibilityEnumBuilder69.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection71 = visibilityEnumBuilder69.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean75 = jSDocInfoBuilder73.recordVisibility(visibility74);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility74);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder80 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean82 = jSDocInfoBuilder80.recordVisibility(visibility81);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility84 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder83.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility84);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder86 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder88 = visibilityEnumBuilder86.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility87);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray89 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility77, visibility78, visibility81, visibility84, visibility87 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList90 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray89);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder91 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray89);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList92 = visibilityEnumBuilder69.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList93 = visibilityEnumBuilder69.build();
        int int94 = nodeIterableList0.lastIndexOf((java.lang.Object) visibilityEnumBuilder69);
        boolean boolean95 = nodeIterableList0.isEmpty();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(nodeIterableList56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor68);
        org.junit.Assert.assertNotNull(visibilityEnumList70);
        org.junit.Assert.assertNotNull(visibilityEnumCollection71);
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertTrue("'" + visibility77 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility77.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility81 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility81.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + visibility84 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility84.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder88);
        org.junit.Assert.assertNotNull(visibilityArray89);
        org.junit.Assert.assertNotNull(visibilityEnumList90);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder91);
        org.junit.Assert.assertNotNull(visibilityEnumList92);
        org.junit.Assert.assertNotNull(visibilityEnumList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test15737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15737");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isImplicitCast();
        boolean boolean11 = jSDocInfo7.isExport();
        boolean boolean12 = jSDocInfo7.isNoShadow();
        boolean boolean14 = jSDocInfo7.hasParameter("Unknown class name");
        java.lang.String str15 = jSDocInfo7.getDescription();
        java.lang.String str16 = jSDocInfo7.getFileOverview();
        boolean boolean17 = jSDocInfo7.hasFileOverview();
        boolean boolean18 = nodeIterableList0.equals((java.lang.Object) jSDocInfo7);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node21.siblings();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray34 = nodeIterableList33.toArray();
        boolean boolean35 = strSet30.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        java.lang.Object[] objArray36 = nodeIterableList33.toArray();
        java.lang.Object[] objArray37 = nodeIterableList33.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node41.isDebugger();
        boolean boolean48 = node41.isAssign();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(51, node41, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable52 = node51.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator53 = ancestorIterable52.spliterator();
        int int54 = nodeIterableList33.lastIndexOf((java.lang.Object) ancestorIterable52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isNE();
        boolean boolean59 = node57.isInstanceOf();
        boolean boolean60 = node57.isThrow();
        node57.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node57.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable63);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator65 = ancestorIterable63.spliterator();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node68.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean76 = nodeIterableList75.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable52);
        boolean boolean77 = nodeIterableList75.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable63);
        boolean boolean78 = nodeIterableList75.add(nodeIterable74);
        java.lang.Object[] objArray79 = nodeIterableList75.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor80 = nodeIterableList75.listIterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor81 = nodeIterableList75.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream82 = nodeIterableList75.stream();
        java.lang.Object[] objArray83 = nodeIterableList75.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo84.getSuppressions();
        boolean boolean86 = jSDocInfo84.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList87 = jSDocInfo84.getImplementedInterfaces();
        boolean boolean88 = jSDocInfo84.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection89 = jSDocInfo84.getTypeNodes();
        boolean boolean90 = nodeIterableList75.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = nodeIterableList0.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable52);
        org.junit.Assert.assertNotNull(nodeSpliterator53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(nodeSpliterator65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(nodeIterableItor80);
        org.junit.Assert.assertNotNull(nodeIterableItor81);
        org.junit.Assert.assertNotNull(nodeIterableStream82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeCollection89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test15738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15738");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node15.isComma();
        node15.setVarArgs(true);
        boolean boolean24 = node15.isThrow();
        java.lang.Object obj26 = node15.getProp(41);
        boolean boolean27 = node15.isFromExterns();
        java.lang.String str28 = node15.toStringTree();
        boolean boolean29 = node15.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR hi! [var_args_name: 1]\n" + "'", str28, "OR hi! [var_args_name: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15739");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node2.getJsDocBuilderForNode();
        fileLevelJsDocBuilder6.append("java.io.IOException: OR hi! [directives: []]\n");
        fileLevelJsDocBuilder6.append("{51547601}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
    }

    @Test
    public void test15740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15740");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.recordExterns();
        boolean boolean6 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder8.addAuthor("");
        boolean boolean11 = jSDocInfoBuilder8.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder8.recordThrowType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder8.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        jSDocInfoBuilder8.markName("", staticSourceFile16, 29, 50);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isSyntheticBlock();
        boolean boolean30 = node22.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = new com.google.javascript.rhino.JSTypeExpression(node22, "Unknown class name");
        boolean boolean34 = jSDocInfoBuilder8.recordThrowDescription(jSTypeExpression32, "?");
        com.google.javascript.rhino.Node node35 = jSTypeExpression32.getRoot();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        boolean boolean40 = node38.isDelProp();
        boolean boolean41 = node38.isNoSideEffectsCall();
        java.lang.String str45 = node38.toString(true, false, true);
        boolean boolean46 = node38.isCase();
        boolean boolean47 = node38.isString();
        boolean boolean48 = jSTypeExpression32.equals((java.lang.Object) boolean47);
        boolean boolean49 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression32);
        com.google.javascript.rhino.Node node50 = jSTypeExpression32.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = node50.getExistingIntProp(409647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 409647");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR hi!" + "'", str45, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test15741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15741");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isAssign();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(51, node14, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node25 = node24.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node24.children();
        com.google.javascript.rhino.Node node27 = node2.useSourceInfoIfMissingFrom(node24);
        boolean boolean28 = node2.isName();
        boolean boolean29 = node2.isStringKey();
        com.google.javascript.rhino.Node node30 = node2.cloneNode();
        boolean boolean31 = node2.isFunction();
        node2.setString("Node tree inequality:\nTree1:\nTYPEOF hi!\n\n\nTree2:\nOR hi! [synthetic: 1]\n\n\nSubtree1: TYPEOF hi!\n\n\nSubtree2: OR hi! [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15742");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        int int5 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        int int7 = typePosition0.getStartLine();
        typePosition0.setPositionInformation((int) (short) 10, 46, 38, 3);
        int int13 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node14 = typePosition0.getItem();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 38 + "'", int13 == 38);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test15743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15743");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setReturnsTainted();
        int int59 = nodeIterableList51.lastIndexOf((java.lang.Object) sideEffectFlags56);
        boolean boolean60 = sideEffectFlags56.areAllFlagsSet();
        sideEffectFlags56.clearSideEffectFlags();
        sideEffectFlags56.clearSideEffectFlags();
        sideEffectFlags56.clearSideEffectFlags();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test15744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15744");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node20.isFalse();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        com.google.javascript.rhino.Node node32 = node26.cloneNode();
        node20.addChildrenToBack(node26);
        boolean boolean34 = node26.isIf();
        node26.setSourceFileForTesting("(null|{...})");
        boolean boolean37 = node26.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15745");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node14 = node13.getLastChild();
        node14.detachChildren();
        boolean boolean16 = node14.isBreak();
        boolean boolean17 = node14.isReturn();
        boolean boolean18 = node14.isAssign();
        boolean boolean19 = node14.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15746");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test15747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15747");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node15.isComma();
        node15.setVarArgs(true);
        boolean boolean24 = node15.isThrow();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        boolean boolean32 = objectType31.matchesInt32Context();
        boolean boolean33 = objectType31.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType34 = objectType31.collapseUnion();
        node15.setJSType((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        node38.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder47 = node38.getJsDocBuilderForNode();
        node38.setQuotedString();
        com.google.javascript.rhino.Node node49 = node15.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean50 = node15.isGetterDef();
        boolean boolean51 = node15.isArrayLit();
        int int52 = node15.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test15748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15748");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList9.listIterator();
        int int11 = nodeIterableItor10.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test15749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15749");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        com.google.javascript.rhino.Node node38 = node31.getFirstChild();
        boolean boolean39 = node31.isNot();
        typePosition0.setItem(node31);
        java.lang.String str41 = node31.getString();
        boolean boolean42 = node31.isStringKey();
        node31.setOptionalArg(false);
        boolean boolean45 = node31.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15750");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        java.lang.Object[] objArray22 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean33 = nodeIterableList32.add(nodeIterable31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        java.lang.Object[] objArray51 = nodeIterableList48.toArray();
        boolean boolean52 = nodeIterableList48.isEmpty();
        boolean boolean53 = nodeIterableList32.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray69 = nodeIterableList68.toArray();
        boolean boolean70 = strSet65.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        java.lang.Object[] objArray71 = nodeIterableList68.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList68.listIterator();
        boolean boolean73 = nodeIterableList68.isEmpty();
        boolean boolean74 = nodeIterableList32.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        boolean boolean75 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor76 = nodeIterableList68.listIterator();
        boolean boolean77 = nodeIterableItor76.hasPrevious();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test15751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15751");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        int int61 = nodeIterableList53.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList62 = nodeIterableList53.asList();
        boolean boolean63 = nodeIterableList53.isEmpty();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor64 = nodeIterableList53.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor64.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor64);
    }

    @Test
    public void test15752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15752");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        boolean boolean53 = nodeIterableList2.isEmpty();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor54 = nodeIterableList2.listIterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor54);
    }

    @Test
    public void test15753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15753");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        java.lang.String str25 = node5.toString(true, true, true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isNot();
        int int35 = node31.getLineno();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        com.google.javascript.rhino.Node node46 = node31.srcref(node41);
        int int47 = node31.getCharno();
        boolean boolean48 = node31.isQuotedString();
        boolean boolean49 = node31.isIf();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node55.isNot();
        int int59 = node55.getLineno();
        boolean boolean60 = node55.isAdd();
        com.google.javascript.rhino.Node node61 = node31.useSourceInfoFromForTree(node55);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node67.isNot();
        int int71 = node67.getLineno();
        boolean boolean72 = node67.isAdd();
        com.google.javascript.rhino.Node node73 = node67.cloneTree();
        java.lang.Object obj75 = node73.getProp((int) (byte) 0);
        int int76 = node73.getChildCount();
        node61.addChildrenToFront(node73);
        boolean boolean78 = node5.isEquivalentToTyped(node61);
        boolean boolean79 = node5.isWith();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node5, "");
        node5.removeProp(8202);
        int int84 = node5.getLineno();
        boolean boolean85 = node5.isWhile();
        node5.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR hi!" + "'", str25, "OR hi!");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15754");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1L));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test15755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15755");
        java.io.IOException iOException1 = new java.io.IOException("STRING Not declared as a constructor 43 : {}");
    }

    @Test
    public void test15756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15756");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node18.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor20 = ancestorIterable19.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor21 = ancestorIterable19.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeItor21);
    }

    @Test
    public void test15757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15757");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isCatch();
        boolean boolean12 = node5.getBooleanProp((int) '#');
        node5.removeProp(47);
        boolean boolean15 = node5.isAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        int int30 = strSet27.size();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isAdd();
        boolean boolean40 = node36.isAnd();
        boolean boolean41 = strSet27.remove((java.lang.Object) node36);
        com.google.javascript.rhino.Node node42 = node5.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node43 = node36.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            node36.setDouble((double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR hi! is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test15758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15758");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordParameter("OR hi! [directives: []]\n", jSTypeExpression9);
        jSDocInfoBuilder1.markName("None", 39, 46);
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        jSDocInfoBuilder1.recordOriginalCommentString("function (this:me, {1707356915}): me");
        boolean boolean18 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15759");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesArguments();
    }

    @Test
    public void test15760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15760");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry4.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean13 = node8.isEquivalentToTyped(node12);
        boolean boolean14 = node8.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node30.isNot();
        int int34 = node30.getLineno();
        com.google.javascript.rhino.Node node35 = node20.srcref(node30);
        int int36 = node20.getCharno();
        boolean boolean37 = node20.isQuotedString();
        boolean boolean38 = node20.isIf();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        boolean boolean49 = node44.isAdd();
        com.google.javascript.rhino.Node node50 = node20.useSourceInfoFromForTree(node44);
        boolean boolean51 = node8.hasChild(node44);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        node54.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node68.isNot();
        int int72 = node68.getLineno();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        boolean boolean81 = node78.isNot();
        int int82 = node78.getLineno();
        com.google.javascript.rhino.Node node83 = node68.srcref(node78);
        int int84 = node68.getCharno();
        com.google.javascript.rhino.Node node85 = node54.copyInformationFrom(node68);
        boolean boolean86 = node54.isTrue();
        boolean boolean87 = node54.isCase();
        boolean boolean88 = node54.isObjectLit();
        com.google.javascript.rhino.Node node89 = node44.clonePropsFrom(node54);
        boolean boolean90 = node89.isGetProp();
        boolean boolean91 = node89.isThrow();
        int int92 = node89.getType();
        com.google.javascript.rhino.Node node93 = node89.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(0, node2, node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test15761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15761");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(46, "java.io.IOException: java.io.IOException: java.io.IOException");
        int int4 = node2.getIntProp((int) (short) -1);
        boolean boolean5 = node2.isRegExp();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        boolean boolean14 = node8.isDec();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isVoid();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isTypeOf();
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node27);
        int int30 = node8.getIndexOfChild(node27);
        boolean boolean31 = node27.isThis();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node27.getJSDocInfo();
        boolean boolean33 = node2.isEquivalentTo(node27);
        node2.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node36 = node2.getLastSibling();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test15762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15762");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '4', 217100, 29);
    }

    @Test
    public void test15763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15763");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(54);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15764");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        node2.detachChildren();
        node2.setString("PARAM_LIST");
        com.google.javascript.rhino.Node node16 = node2.getLastSibling();
        node16.setSourceFileForTesting("function (this:me, {1941198319}): me");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test15765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15765");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("{1078264502}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        boolean boolean6 = jSTypeRegistry5.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable8 = jSTypeRegistry5.getTypesWithProperty("");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry10.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType23, "");
        com.google.javascript.rhino.jstype.UnionType unionType26 = objectType23.toMaybeUnionType();
        boolean boolean27 = objectType23.matchesObjectContext();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        boolean boolean35 = jSTypeRegistry30.canPropertyBeDefined(jSType33, "Unknown class name");
        jSTypeRegistry30.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode40 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry39.setResolveMode(resolveMode40);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        boolean boolean44 = jSTypeRegistry39.canPropertyBeDefined(jSType42, "Unknown class name");
        jSTypeRegistry39.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable48 = jSTypeRegistry39.getTypesWithProperty("hi!");
        jSTypeRegistry39.resetForTypeCheck();
        jSTypeRegistry39.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        boolean boolean58 = jSTypeRegistry53.canPropertyBeDefined(jSType56, "Unknown class name");
        jSTypeRegistry53.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = objectType66.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] { objectType66 };
        com.google.javascript.rhino.Node node69 = jSTypeRegistry53.createParametersWithVarArgs(jSTypeArray68);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry39.createUnionType(jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry30.createOptionalParameters(jSTypeArray68);
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry5.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType23, false, jSTypeArray68);
        boolean boolean73 = functionType72.isInstanceType();
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry1.createAnonymousObjectType();
        boolean boolean76 = objectType75.matchesObjectContext();
        boolean boolean77 = objectType75.isNoObjectType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable8);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertNull(unionType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode40 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode40.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable48);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test15766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15766");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        java.lang.Object obj49 = node47.getProp((int) (byte) 0);
        int int50 = node47.getChildCount();
        node35.addChildrenToFront(node47);
        boolean boolean52 = node47.isDelProp();
        boolean boolean53 = node47.isRegExp();
        com.google.javascript.rhino.Node node54 = node47.detachFromParent();
        int int55 = node54.getChildCount();
        boolean boolean56 = node54.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15767");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0.0f);
        boolean boolean2 = node1.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15768");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("{1573690694}", 23, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15769");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        node16.setOptionalArg(false);
        com.google.javascript.rhino.Node node21 = node2.srcref(node16);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        boolean boolean24 = nodeIterableList22.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor25 = nodeIterableList22.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable36 = jSTypeRegistry27.getTypesWithProperty("hi!");
        jSTypeRegistry27.resetForTypeCheck();
        boolean boolean39 = jSTypeRegistry27.hasNamespace("Not declared as a type name");
        boolean boolean41 = jSTypeRegistry27.isForwardDeclaredType("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node48.isNot();
        int int52 = node48.getLineno();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        com.google.javascript.rhino.Node node63 = node48.srcref(node58);
        int int64 = node48.getCharno();
        boolean boolean65 = node48.isQuotedString();
        boolean boolean66 = node48.isBreak();
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry27.createFunctionType(jSType42, node48);
        boolean boolean68 = node48.hasOneChild();
        boolean boolean69 = nodeIterableList22.contains((java.lang.Object) node48);
        com.google.javascript.rhino.Node node70 = node48.getFirstChild();
        boolean boolean71 = node48.isFor();
        com.google.javascript.rhino.Node node72 = node21.useSourceInfoFrom(node48);
        boolean boolean73 = node21.isFunction();
        boolean boolean74 = node21.isTrue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test15770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15770");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        int int14 = strSet11.size();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isAdd();
        boolean boolean24 = node20.isAnd();
        boolean boolean25 = strSet11.remove((java.lang.Object) node20);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        boolean boolean40 = node35.isCatch();
        boolean boolean41 = node29.hasChild(node35);
        java.lang.String str42 = node35.toStringTree();
        boolean boolean43 = node20.isEquivalentToTyped(node35);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!\n" + "'", str42, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test15771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15771");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        jSDocInfoBuilder1.recordOriginalCommentString("{1432101815}");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("{1833515481}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo14.getSuppressions();
        boolean boolean16 = jSDocInfo14.isNoSideEffects();
        java.lang.String str17 = jSDocInfo14.getReturnDescription();
        boolean boolean19 = jSDocInfo14.hasDescriptionForParameter("{...}");
        java.lang.String str20 = jSDocInfo14.getSourceName();
        boolean boolean21 = jSDocInfo14.isConstructor();
        boolean boolean23 = jSDocInfo14.hasDescriptionForParameter("{633142433}");
        java.util.Set<java.lang.String> strSet24 = jSDocInfo14.getParameterNames();
        java.lang.Object[] objArray25 = strSet24.toArray();
        boolean boolean26 = jSDocInfoBuilder1.recordSuppressions(strSet24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test15772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15772");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        com.google.javascript.rhino.Node node38 = node31.getFirstChild();
        boolean boolean39 = node31.isNot();
        typePosition0.setItem(node31);
        int int41 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node42 = typePosition0.getItem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test15773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15773");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = nodeIterableList63.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList63.reverse();
        java.lang.String str66 = nodeIterableList63.toString();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList67 = nodeIterableList63.asList();
        int int68 = nodeIterableList63.size();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(nodeIterableList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test15774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15774");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15775");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.Object obj13 = node11.getProp((int) (byte) 0);
        int int14 = node11.getChildCount();
        node11.setString("{1078264502}");
        boolean boolean17 = node11.isSyntheticBlock();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        com.google.javascript.rhino.Node node38 = node23.srcref(node33);
        boolean boolean39 = node23.isString();
        boolean boolean40 = node23.isTry();
        boolean boolean41 = node23.isHook();
        boolean boolean42 = node23.isFromExterns();
        java.lang.String str43 = node23.toStringTree();
        boolean boolean44 = node23.isCall();
        com.google.javascript.rhino.Node node45 = node11.srcref(node23);
        int int46 = node11.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR hi!\n" + "'", str43, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test15776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15776");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        jSTypeRegistry21.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType38.toMaybeEnumElementType();
        boolean boolean40 = jSTypeRegistry10.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType28, objectType38);
        boolean boolean42 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType28, "OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot44 = objectType28.getOwnSlot("OR hi!\n    OR hi!\n");
        boolean boolean45 = objectType28.isTemplateType();
        java.lang.String str46 = objectType28.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = objectType28.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{1016191863}" + "'", str46, "{1016191863}");
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test15777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15777");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        java.lang.Object[] objArray61 = nodeIterableList53.toArray();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor62 = nodeIterableList53.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray64 = nodeIterableList63.toArray();
        boolean boolean65 = nodeIterableList63.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList63.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream67 = nodeIterableList63.parallelStream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList63.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor69 = nodeIterableList63.iterator();
        java.lang.Object[] objArray70 = nodeIterableList63.toArray();
        boolean boolean71 = nodeIterableList53.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList63);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertNotNull(nodeIterableStream67);
        org.junit.Assert.assertNotNull(nodeIterableItor68);
        org.junit.Assert.assertNotNull(nodeIterableItor69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test15778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15778");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        java.lang.String str32 = objectType29.toAnnotationString();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        boolean boolean50 = jSTypeRegistry45.canPropertyBeDefined(jSType48, "Unknown class name");
        jSTypeRegistry45.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry45.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        jSTypeRegistry56.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry59.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = objectType63.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot66 = objectType63.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode70 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry69.setResolveMode(resolveMode70);
        com.google.javascript.rhino.jstype.ObjectType objectType72 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType73 = jSTypeRegistry69.createObjectType(objectType72);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType74 = objectType73.toMaybeEnumElementType();
        boolean boolean75 = jSTypeRegistry45.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType63, objectType73);
        com.google.javascript.rhino.jstype.JSType jSType77 = objectType63.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node78 = objectType63.getRootNode();
        boolean boolean79 = objectType63.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        boolean boolean86 = objectType85.isNominalConstructor();
        boolean boolean87 = jSTypeRegistry39.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType63, objectType85);
        jSTypeRegistry34.unregisterPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType85);
        boolean boolean89 = objectType85.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType90 = objectType85.getTypeOfThis();
        objectType29.matchConstraint(objectType85);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "?" + "'", str32, "?");
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNull(jSTypeStaticSlot66);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertTrue("'" + resolveMode70 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode70.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNull(enumElementType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSType90);
    }

    @Test
    public void test15779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15779");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        boolean boolean50 = jSTypeRegistry45.canPropertyBeDefined(jSType48, "Unknown class name");
        jSTypeRegistry45.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = objectType58.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        boolean boolean66 = jSTypeRegistry61.canPropertyBeDefined(jSType64, "Unknown class name");
        jSTypeRegistry61.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry70.createObjectType(objectType73);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry61.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType74, "");
        boolean boolean77 = jSType76.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = objectType59.testForEquality(jSType76);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSType76.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry45.createNullableType(jSType76);
        boolean boolean81 = jSType76.isTemplateType();
        java.lang.String str82 = jSType76.toString();
        boolean boolean83 = jSType76.isNoType();
        boolean boolean84 = jSType76.isParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType85 = jSType76.autoboxesTo();
        boolean boolean86 = jSTypeRegistry1.declareType("None", jSType85);
        jSTypeRegistry1.identifyNonNullableName("IN");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "None" + "'", str82, "None");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test15780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15780");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        boolean boolean12 = node5.isWith();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        int int27 = strSet24.size();
        strSet24.clear();
        node5.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        boolean boolean32 = jSDocInfo30.hasModifies();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo30.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        boolean boolean35 = strSet33.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList34.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList34.iterator();
        java.lang.Object[] objArray38 = nodeIterableList34.toArray();
        boolean boolean39 = strSet24.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList41 = visibilityEnumBuilder40.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean43 = jSDocInfo42.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo42.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = jSDocInfo42.getVisibility();
        boolean boolean46 = jSDocInfo42.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo42.setVisibility(visibility47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder50.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo53.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = jSDocInfo53.getVisibility();
        boolean boolean57 = jSDocInfo53.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo53.setVisibility(visibility58);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray60 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility58 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray60);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray60);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList64 = visibilityEnumBuilder63.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo65.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = jSDocInfo65.getVisibility();
        boolean boolean69 = jSDocInfo65.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo65.setVisibility(visibility70);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = visibilityEnumBuilder63.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility70);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility70);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection74 = visibilityEnumBuilder73.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection75 = visibilityEnumBuilder73.build();
        int int76 = nodeIterableList34.indexOf((java.lang.Object) visibilityEnumCollection75);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor77 = nodeIterableList34.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor77.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(visibilityEnumList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNull(visibility45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertNull(visibility56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray60);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder61);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertNotNull(visibilityEnumList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNull(visibility68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder72);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertNotNull(visibilityEnumCollection74);
        org.junit.Assert.assertNotNull(visibilityEnumCollection75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor77);
    }

    @Test
    public void test15781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15781");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.String str12 = node11.toStringTree();
        boolean boolean13 = node11.isNE();
        boolean boolean14 = node11.isLocalResultCall();
        int int16 = node11.getIntProp(46);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(31);
        com.google.javascript.rhino.Node node19 = node11.srcref(node18);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        boolean boolean30 = node25.isAdd();
        com.google.javascript.rhino.Node node31 = node25.cloneTree();
        java.lang.String str32 = node31.toStringTree();
        boolean boolean33 = node31.isNE();
        boolean boolean34 = node31.isLocalResultCall();
        int int36 = node31.getIntProp(46);
        node19.addChildToBack(node31);
        boolean boolean38 = node19.isSwitch();
        boolean boolean39 = node19.isScript();
        node19.setType(217100);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR hi!\n" + "'", str12, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR hi!\n" + "'", str32, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15782");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        int int12 = nodeIterableList0.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList0.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList0.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
    }

    @Test
    public void test15783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15783");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        node8.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        boolean boolean21 = node19.isDelProp();
        boolean boolean22 = node19.hasChildren();
        boolean boolean23 = node19.isOr();
        java.lang.String str24 = node8.checkTreeEquals(node19);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(51, node28, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node38.getAncestors();
        com.google.javascript.rhino.Node node40 = node19.copyInformationFrom(node38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = new com.google.javascript.rhino.JSTypeExpression(node38, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node43 = jSTypeExpression42.getRoot();
        jSDocInfoBuilder1.markTypeNode(node43, (int) (short) 0, 40, (int) (short) 0, 0, true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean66 = node61.isEquivalentToTyped(node65);
        com.google.javascript.rhino.Node node67 = node61.cloneNode();
        com.google.javascript.rhino.InputId inputId68 = node61.getInputId();
        boolean boolean69 = node61.isLabelName();
        com.google.javascript.rhino.Node node70 = node52.srcref(node61);
        node52.setIsSyntheticBlock(true);
        node52.detachChildren();
        jSDocInfoBuilder1.markTypeNode(node52, 4095, 15, 42, 52, true);
        com.google.javascript.rhino.Node node80 = node52.getParent();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str24, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(inputId68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test15784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15784");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        java.lang.String str34 = node2.getQualifiedName();
        boolean boolean35 = node2.isDec();
        boolean boolean36 = node2.isGetterDef();
        boolean boolean37 = node2.isFalse();
        node2.setWasEmptyNode(true);
        java.lang.String str43 = node2.toString(true, true, true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR hi! [empty_block: 1] [source_file: ]" + "'", str43, "OR hi! [empty_block: 1] [source_file: ]");
    }

    @Test
    public void test15785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15785");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        int int14 = strSet11.size();
        strSet11.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry26.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = objectType30.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry33.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType46, "");
        boolean boolean49 = jSType48.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = objectType31.testForEquality(jSType48);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType48.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry17.createNullableType(jSType48);
        boolean boolean53 = strSet11.equals((java.lang.Object) jSTypeRegistry17);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry17.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        boolean boolean61 = jSTypeRegistry56.canPropertyBeDefined(jSType59, "Unknown class name");
        jSTypeRegistry56.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType69 = jSTypeRegistry65.createObjectType(objectType68);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry56.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType69, "");
        com.google.javascript.rhino.jstype.JSType jSType73 = objectType69.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node74 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry17.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType69, node74);
        jSTypeRegistry17.identifyNonNullableName("{1833515481}");
        boolean boolean78 = jSTypeRegistry17.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry17.createNamedType("function (this:me, {423152000}): me", "InputId: Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n", 53, 32);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSType83);
    }

    @Test
    public void test15786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15786");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isExterns();
        jSDocInfo0.setDeprecated(false);
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        boolean boolean11 = jSDocInfo0.hasParameter("{1303262583}");
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("STRING INSTANCEOF 50");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test15787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15787");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean8 = jSDocInfoBuilder1.recordLends("OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("{1078264502}");
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry15.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        jSTypeRegistry26.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = objectType33.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot36 = objectType33.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode40 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry39.setResolveMode(resolveMode40);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry39.createObjectType(objectType42);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType44 = objectType43.toMaybeEnumElementType();
        boolean boolean45 = jSTypeRegistry15.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType33, objectType43);
        boolean boolean47 = jSTypeRegistry11.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType33, "JSDocInfo");
        jSTypeRegistry11.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry11.getType("OR hi!\n");
        jSTypeRegistry11.forwardDeclareType("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo53.getType();
        boolean boolean56 = jSDocInfo53.isImplicitCast();
        boolean boolean57 = jSDocInfo53.isExport();
        java.lang.String str58 = jSDocInfo53.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo53.getType();
        java.lang.String str60 = jSDocInfo53.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = jSDocInfo53.getTemplateTypeNames();
        jSTypeRegistry11.setTemplateTypeNames((java.util.List<java.lang.String>) strList61);
        boolean boolean63 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList61);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder65.recordVersion("hi!");
        boolean boolean68 = jSDocInfoBuilder65.isJavaDispatch();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        boolean boolean75 = jSTypeRegistry70.canPropertyBeDefined(jSType73, "Unknown class name");
        jSTypeRegistry70.forwardDeclareType("OR hi!\n    OR hi!\n");
        jSTypeRegistry70.identifyNonNullableName("{...}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable81 = jSTypeRegistry70.getTypesWithProperty("{353548028}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean83 = jSDocInfo82.isExterns();
        boolean boolean84 = jSDocInfo82.hasReturnType();
        jSDocInfo82.setLicense("hi!");
        int int87 = jSDocInfo82.getImplementedInterfaceCount();
        boolean boolean88 = jSDocInfo82.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList89 = jSDocInfo82.getTemplateTypeNames();
        jSTypeRegistry70.setTemplateTypeNames((java.util.List<java.lang.String>) strList89);
        boolean boolean91 = jSDocInfoBuilder65.recordTemplateTypeNames((java.util.List<java.lang.String>) strList89);
        boolean boolean92 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList89);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNull(jSTypeStaticSlot36);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + resolveMode40 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode40.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNull(enumElementType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "JSDocInfo" + "'", str58, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test15788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15788");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot8 = objectType5.getSlot("OR hi! [directives: []]\n");
        boolean boolean9 = objectType5.isStringValueType();
        boolean boolean10 = objectType5.isFunctionType();
        boolean boolean11 = objectType5.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.TemplateType templateType12 = objectType5.toMaybeTemplateType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertNull(jSTypeStaticSlot8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(templateType12);
    }

    @Test
    public void test15789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15789");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node2.siblings();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node19, "");
        boolean boolean22 = node19.isGetterDef();
        com.google.javascript.rhino.Node node23 = node2.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node25 = node23.getAncestor(131172);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test15790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15790");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean19 = strSet17.isEmpty();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node22.siblings();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList51 = com.google.common.collect.ImmutableList.of(strSet17, strSet31, strSet45);
        boolean boolean52 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet45);
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet45.spliterator();
        boolean boolean55 = strSet45.add("{75475336}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSetList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test15791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15791");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray6 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList7 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList7, jSTypeArray6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry5.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList7);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType43 = objectType29.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node44 = objectType29.getRootNode();
        boolean boolean45 = objectType29.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        boolean boolean52 = objectType51.isNominalConstructor();
        boolean boolean53 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType51);
        boolean boolean54 = objectType51.isFunctionType();
        boolean boolean55 = objectType51.isNoType();
        boolean boolean56 = strSet3.remove((java.lang.Object) boolean55);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList57 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray58 = nodeIterableList57.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = nodeIterableList57.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream60 = nodeIterableList57.stream();
        java.lang.String[] strArray62 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray63 = nodeIterableList57.toArray(strArray62);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator64 = nodeIterableList57.spliterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor65 = nodeIterableList57.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList57.listIterator();
        boolean boolean67 = strSet3.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList57);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator68 = nodeIterableList57.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterableList57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(nodeIterableStream60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator64);
        org.junit.Assert.assertNotNull(nodeIterableItor65);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator68);
    }

    @Test
    public void test15792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15792");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        java.lang.Object obj17 = node2.getProp((int) ' ');
        boolean boolean18 = node2.isDelProp();
        boolean boolean19 = node2.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15793");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isInstanceOf();
        boolean boolean6 = node3.isThrow();
        node3.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node3.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        objectType19.clearResolved();
        node3.setJSType((com.google.javascript.rhino.jstype.JSType) objectType19);
        boolean boolean22 = node3.isTrue();
        node3.setLength(40);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        node27.detachChildren();
        java.lang.String str40 = node27.toStringTree();
        java.lang.String str41 = node27.getString();
        int int42 = node27.getLength();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(49, node3, node27, 49, 39);
        boolean boolean46 = node3.isOnlyModifiesThisCall();
        boolean boolean47 = node3.isDo();
        boolean boolean48 = node3.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi! [directives: []]\n" + "'", str40, "OR hi! [directives: []]\n");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15794");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = null;
        jSDocInfo0.setVisibility(visibility4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isSyntheticBlock();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(46);
        boolean boolean27 = node26.isCall();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        node30.detachChildren();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(45, node9, node17, node26, node30, (int) (short) 10, 8);
        node9.setLength(1);
        jSDocInfo0.setAssociatedNode(node9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.recordInterface();
        boolean boolean53 = jSDocInfoBuilder50.recordDescription("hi!");
        boolean boolean54 = jSDocInfoBuilder50.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder50.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder50.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder50.recordReturnType(jSTypeExpression58);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder50.markTypeNode(node61, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        boolean boolean76 = node73.isNot();
        int int77 = node73.getLineno();
        boolean boolean78 = node73.isAdd();
        com.google.javascript.rhino.Node node79 = node73.cloneTree();
        java.lang.String str80 = node79.toStringTree();
        boolean boolean81 = node79.isNE();
        boolean boolean82 = node79.isSwitch();
        com.google.javascript.rhino.Node node83 = node61.srcref(node79);
        boolean boolean84 = node83.isBlock();
        com.google.javascript.rhino.Node node85 = node9.copyInformationFromForTree(node83);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("INSTANCEOF");
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = node85.useSourceInfoIfMissingFrom(node87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "OR hi!\n" + "'", str80, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test15795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15795");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean4 = node3.isObjectLit();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(36, "hi!", 38, 48);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        node12.putBooleanProp(0, false);
        node12.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean29 = node12.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node12.getStaticSourceFile();
        int int32 = staticSourceFile30.getLineOffset(40);
        node9.setStaticSourceFile(staticSourceFile30);
        node3.setStaticSourceFile(staticSourceFile30);
        boolean boolean35 = staticSourceFile30.isExtern();
        boolean boolean36 = staticSourceFile30.isExtern();
        boolean boolean37 = staticSourceFile30.isExtern();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2147483648) + "'", int32 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15796");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        jSDocInfoBuilder1.markName("Unknown class name", staticSourceFile6, 48, 5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder11.recordThrowType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder11.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder11.recordReturnType(jSTypeExpression19);
        boolean boolean22 = jSDocInfoBuilder11.recordDeprecationReason("Not declared as a constructor");
        boolean boolean23 = jSDocInfoBuilder11.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.addAuthor("");
        boolean boolean28 = jSDocInfoBuilder25.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder25.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.addAuthor("");
        boolean boolean36 = jSDocInfoBuilder33.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression37);
        boolean boolean39 = jSDocInfoBuilder33.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder33.markName("", staticSourceFile41, 29, 50);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isSyntheticBlock();
        boolean boolean55 = node47.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node47, "Unknown class name");
        boolean boolean59 = jSDocInfoBuilder33.recordThrowDescription(jSTypeExpression57, "?");
        boolean boolean60 = jSDocInfoBuilder25.recordExtendedInterface(jSTypeExpression57);
        boolean boolean61 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression57);
        boolean boolean62 = jSDocInfoBuilder1.recordThisType(jSTypeExpression57);
        boolean boolean63 = jSTypeExpression57.isOptionalArg();
        boolean boolean64 = jSTypeExpression57.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15797");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo6.hasEnumParameterType();
        boolean boolean14 = jSDocInfo6.isDefine();
        java.lang.String str15 = jSDocInfo6.getLendsName();
        boolean boolean16 = jSDocInfo6.hasModifies();
        boolean boolean17 = jSDocInfo6.isNoSideEffects();
        boolean boolean18 = strSet3.equals((java.lang.Object) boolean17);
        boolean boolean20 = strSet3.add("{637073315}");
        java.util.Iterator<java.lang.String> strItor21 = strSet3.iterator();
        java.util.Iterator<java.lang.String> strItor22 = strSet3.iterator();
        java.util.Iterator<java.lang.String> strItor23 = strSet3.iterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
    }

    @Test
    public void test15798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15798");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry12.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = objectType16.toObjectType();
        boolean boolean18 = objectType17.matchesInt32Context();
        boolean boolean19 = objectType17.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry21.createObjectType(objectType24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = objectType25.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = objectType32.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry35.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType48, "");
        boolean boolean51 = jSType50.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = objectType33.testForEquality(jSType50);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType50.collapseUnion();
        boolean boolean54 = objectType26.differsFrom(jSType50);
        boolean boolean55 = jSType50.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType56 = objectType17.getGreatestSubtype(jSType50);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType56.findPropertyType("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry1.createOptionalType(jSType58);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        boolean boolean66 = objectType65.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        boolean boolean73 = jSTypeRegistry68.canPropertyBeDefined(jSType71, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry75.createObjectType(objectType78);
        com.google.javascript.rhino.jstype.ObjectType objectType80 = objectType79.toObjectType();
        boolean boolean81 = objectType80.matchesInt32Context();
        boolean boolean82 = objectType80.isStringValueType();
        boolean boolean83 = objectType80.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter84 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry85 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter84);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode86 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry85.setResolveMode(resolveMode86);
        com.google.javascript.rhino.jstype.ObjectType objectType88 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry85.createObjectType(objectType88);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair90 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType80, (com.google.javascript.rhino.jstype.JSType) objectType89);
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry68.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType80);
        com.google.javascript.rhino.jstype.FunctionType functionType92 = jSType91.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair93 = objectType65.getTypesUnderInequality(jSType91);
        boolean boolean94 = objectType65.isNumberObjectType();
        boolean boolean95 = jSType59.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType65);
        boolean boolean96 = objectType65.isUnionType();
        boolean boolean97 = objectType65.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + resolveMode86 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode86.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNull(functionType92);
        org.junit.Assert.assertNotNull(typePair93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test15799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15799");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isBreak();
        boolean boolean24 = node5.wasEmptyNode();
        boolean boolean25 = node5.isEmpty();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isVoid();
        boolean boolean36 = node28.hasOneChild();
        com.google.javascript.rhino.InputId inputId37 = node28.getInputId();
        java.lang.String str38 = node28.toStringTree();
        com.google.javascript.rhino.Node node39 = node28.removeFirstChild();
        boolean boolean40 = node28.isVarArgs();
        node28.setWasEmptyNode(false);
        boolean boolean43 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node44 = node5.copyInformationFromForTree(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node44.siblings();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str38, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeIterable45);
    }

    @Test
    public void test15800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15800");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope8 = objectType6.getParentScope();
        boolean boolean9 = objectType6.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = objectType47.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = objectType54.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        boolean boolean62 = jSTypeRegistry57.canPropertyBeDefined(jSType60, "Unknown class name");
        jSTypeRegistry57.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry66.createObjectType(objectType69);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry57.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType70, "");
        boolean boolean73 = jSType72.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = objectType55.testForEquality(jSType72);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSType72.collapseUnion();
        boolean boolean76 = objectType48.differsFrom(jSType72);
        boolean boolean77 = jSType72.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry11.createOptionalType(jSType72);
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = objectType85.toObjectType();
        boolean boolean87 = objectType86.matchesInt32Context();
        boolean boolean88 = objectType86.isBooleanValueType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot90 = objectType86.getOwnSlot("{1078264502}");
        com.google.javascript.rhino.jstype.JSType jSType91 = jSType78.forceResolve(errorReporter79, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType86);
        boolean boolean92 = jSType91.canBeCalled();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = jSType91.toObjectType();
        com.google.javascript.rhino.jstype.JSType jSType94 = objectType6.getLeastSupertype(jSType91);
        com.google.javascript.rhino.jstype.JSType jSType95 = jSType91.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.JSType jSType96 = jSType95.collapseUnion();
        boolean boolean97 = jSType95.isVoidType();
        boolean boolean98 = jSType95.canBeCalled();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot90);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(objectType93);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test15801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15801");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        boolean boolean6 = objectType5.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        boolean boolean21 = objectType20.matchesInt32Context();
        boolean boolean22 = objectType20.isStringValueType();
        boolean boolean23 = objectType20.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType20, (com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry8.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.FunctionType functionType32 = jSType31.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair33 = objectType5.getTypesUnderInequality(jSType31);
        boolean boolean34 = objectType5.matchesNumberContext();
        java.lang.String str35 = objectType5.toAnnotationString();
        boolean boolean36 = objectType5.isBooleanValueType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(functionType32);
        org.junit.Assert.assertNotNull(typePair33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "?" + "'", str35, "?");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15802");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isConstant();
        java.lang.String str8 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
    }

    @Test
    public void test15803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15803");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isString();
        boolean boolean24 = node5.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15804");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15805");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode7 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry6.setResolveMode(resolveMode7);
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = jSTypeRegistry6.createObjectType(objectType9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = objectType10.toObjectType();
        boolean boolean12 = objectType11.matchesInt32Context();
        boolean boolean13 = objectType11.isStringValueType();
        boolean boolean14 = objectType11.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType11, (com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.JSType jSType22 = objectType20.restrictByNotNullOrUndefined();
        java.lang.String str23 = objectType20.toAnnotationString();
        boolean boolean24 = nodeIterableList0.equals((java.lang.Object) objectType20);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator25 = nodeIterableList0.spliterator();
        int int26 = nodeIterableList0.size();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + resolveMode7 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode7.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "?" + "'", str23, "?");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test15806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15806");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node7.isNot();
        int int11 = node7.getLineno();
        boolean boolean12 = node7.isAdd();
        com.google.javascript.rhino.Node node13 = node7.cloneTree();
        java.lang.String str14 = node13.toStringTree();
        boolean boolean15 = node13.isNE();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 1, node13);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node22.isNot();
        int int26 = node22.getLineno();
        boolean boolean27 = node22.isAdd();
        com.google.javascript.rhino.Node node28 = node22.cloneTree();
        java.lang.String str29 = node28.toStringTree();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        boolean boolean34 = node32.isDelProp();
        boolean boolean35 = node32.hasChildren();
        boolean boolean36 = node32.isOr();
        boolean boolean37 = node32.isAnd();
        com.google.javascript.rhino.Node node38 = node28.srcref(node32);
        boolean boolean39 = node38.isTry();
        boolean boolean40 = node38.isStringKey();
        boolean boolean41 = node16.isEquivalentTo(node38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(96, node16, 131075, (int) (byte) 10);
        com.google.javascript.rhino.InputId inputId45 = node16.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR hi!\n" + "'", str14, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR hi!\n" + "'", str29, "OR hi!\n");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(inputId45);
    }

    @Test
    public void test15807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15807");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.lang.Object[] objArray18 = nodeIterableList14.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isAssign();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(51, node22, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node32.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator34 = ancestorIterable33.spliterator();
        int int35 = nodeIterableList14.lastIndexOf((java.lang.Object) ancestorIterable33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isNE();
        boolean boolean40 = node38.isInstanceOf();
        boolean boolean41 = node38.isThrow();
        node38.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node38.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable44);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator46 = ancestorIterable44.spliterator();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node49.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean57 = nodeIterableList56.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable33);
        boolean boolean58 = nodeIterableList56.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable44);
        boolean boolean59 = nodeIterableList56.add(nodeIterable55);
        java.lang.Object[] objArray60 = nodeIterableList56.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList56.listIterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor62 = nodeIterableList56.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream63 = nodeIterableList56.stream();
        java.lang.Object[] objArray64 = nodeIterableList56.toArray();
        nodeIterableList56.clear();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(nodeIterableItor62);
        org.junit.Assert.assertNotNull(nodeIterableStream63);
        org.junit.Assert.assertNotNull(objArray64);
    }

    @Test
    public void test15808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15808");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test15809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15809");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        typePosition0.setPositionInformation((int) (short) 1, (int) (short) 0, (int) '4', 100);
        int int8 = typePosition0.getPositionOnEndLine();
        int int9 = typePosition0.getStartLine();
        boolean boolean10 = typePosition0.hasBrackets();
        boolean boolean11 = typePosition0.hasBrackets();
        int int12 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test15810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15810");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        boolean boolean9 = jSTypeRegistry4.canPropertyBeDefined(jSType7, "Unknown class name");
        jSTypeRegistry4.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType17, "");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry21.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType34, "");
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        boolean boolean43 = jSTypeRegistry38.canPropertyBeDefined(jSType41, "Unknown class name");
        jSTypeRegistry38.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry38.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType51, "");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        boolean boolean60 = jSTypeRegistry55.canPropertyBeDefined(jSType58, "Unknown class name");
        jSTypeRegistry55.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType68 = jSTypeRegistry64.createObjectType(objectType67);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry55.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType68, "");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry72.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType85, "");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray88 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, objectType51, objectType68, objectType85 };
        com.google.javascript.rhino.jstype.FunctionType functionType89 = jSTypeRegistry2.createFunctionTypeWithVarArgs(jSType19, jSTypeArray88);
        boolean boolean90 = jSType19.isNullable();
        boolean boolean91 = jSType19.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.JSType jSType92 = jSType19.autobox();
        boolean boolean93 = jSType92.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(jSTypeArray88);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jSType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test15811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15811");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        boolean boolean17 = node16.isTrue();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        node20.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        boolean boolean33 = node31.isDelProp();
        boolean boolean34 = node31.hasChildren();
        boolean boolean35 = node31.isOr();
        java.lang.String str36 = node20.checkTreeEquals(node31);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node42.isNot();
        int int46 = node42.getLineno();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node52.isNot();
        int int56 = node52.getLineno();
        com.google.javascript.rhino.Node node57 = node42.srcref(node52);
        boolean boolean58 = node57.isDelProp();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        boolean boolean60 = node57.isOptionalArg();
        boolean boolean61 = node20.isEquivalentTo(node57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(3, node16, node20);
        int int64 = node16.getIntProp(43);
        boolean boolean65 = node16.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str36, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15812");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = node2.cloneNode();
        boolean boolean7 = node2.isGetElem();
        node2.setSourceFileForTesting("java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15813");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node41 = node26.srcref(node36);
        int int42 = node26.getCharno();
        boolean boolean43 = node26.isQuotedString();
        boolean boolean44 = node26.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.Node node56 = node26.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node62.cloneTree();
        java.lang.Object obj70 = node68.getProp((int) (byte) 0);
        int int71 = node68.getChildCount();
        node56.addChildrenToFront(node68);
        boolean boolean73 = strSet11.contains((java.lang.Object) node56);
        boolean boolean74 = node56.isCase();
        node56.setSourceFileForTesting("");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test15814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15814");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isSyntheticBlock();
        node2.setWasEmptyNode(false);
        boolean boolean12 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 23, 13, 131075);
        boolean boolean17 = node16.isTry();
        com.google.javascript.rhino.Node node18 = node2.useSourceInfoFrom(node16);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test15815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15815");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream53 = nodeIterableList2.parallelStream();
        boolean boolean54 = nodeIterableList2.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor55 = nodeIterableList2.listIterator();
        int int56 = nodeIterableList2.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo57.getSuppressions();
        boolean boolean59 = jSDocInfo57.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo57.getEnumParameterType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = nodeIterableList2.remove((java.lang.Object) jSTypeExpression60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSTypeExpression60);
    }

    @Test
    public void test15816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15816");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test15817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15817");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        boolean boolean16 = node10.isDec();
        boolean boolean17 = node10.isBlock();
        boolean boolean18 = node10.isTrue();
        com.google.javascript.rhino.Node node19 = node10.cloneNode();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = node25.srcref(node35);
        int int41 = node25.getCharno();
        boolean boolean42 = node25.isQuotedString();
        boolean boolean43 = node25.isIf();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        boolean boolean54 = node49.isAdd();
        com.google.javascript.rhino.Node node55 = node25.useSourceInfoFromForTree(node49);
        com.google.javascript.rhino.Node node56 = node10.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder1.build(node10);
        boolean boolean58 = jSDocInfoBuilder1.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test15818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15818");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        boolean boolean12 = node5.isWith();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        int int27 = strSet24.size();
        strSet24.clear();
        node5.setDirectives((java.util.Set<java.lang.String>) strSet24);
        boolean boolean30 = node5.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15819");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException("{247883875}", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException("{1388990590}", (java.lang.Throwable) iOException3);
        java.io.IOException iOException8 = new java.io.IOException("None");
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        iOException8.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException16 = new java.io.IOException("None");
        java.io.IOException iOException18 = new java.io.IOException();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        iOException16.addSuppressed((java.lang.Throwable) iOException21);
        java.io.IOException iOException24 = new java.io.IOException();
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException25);
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException29);
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.lang.Throwable[] throwableArray37 = iOException35.getSuppressed();
        java.io.IOException iOException38 = new java.io.IOException();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException38);
        iOException35.addSuppressed((java.lang.Throwable) iOException38);
        java.io.IOException iOException42 = new java.io.IOException();
        java.io.IOException iOException43 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException43);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList45 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException8, (java.lang.Throwable) iOException16, (java.lang.Throwable) iOException25, (java.lang.Throwable) iOException30, (java.lang.Throwable) iOException34, (java.lang.Throwable) iOException38, (java.lang.Throwable) iOException43);
        java.io.IOException iOException47 = new java.io.IOException("None");
        java.io.IOException iOException49 = new java.io.IOException();
        java.io.IOException iOException50 = new java.io.IOException((java.lang.Throwable) iOException49);
        java.io.IOException iOException51 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException51);
        iOException47.addSuppressed((java.lang.Throwable) iOException52);
        java.io.IOException iOException55 = new java.io.IOException("None");
        java.io.IOException iOException57 = new java.io.IOException();
        java.io.IOException iOException58 = new java.io.IOException((java.lang.Throwable) iOException57);
        java.io.IOException iOException59 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException58);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException59);
        iOException55.addSuppressed((java.lang.Throwable) iOException60);
        java.io.IOException iOException63 = new java.io.IOException();
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) iOException63);
        java.io.IOException iOException65 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException64);
        java.io.IOException iOException67 = new java.io.IOException();
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException69 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException68);
        java.io.IOException iOException71 = new java.io.IOException();
        java.io.IOException iOException72 = new java.io.IOException((java.lang.Throwable) iOException71);
        java.io.IOException iOException73 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException72);
        java.io.IOException iOException74 = new java.io.IOException();
        java.io.IOException iOException75 = new java.io.IOException((java.lang.Throwable) iOException74);
        java.lang.Throwable[] throwableArray76 = iOException74.getSuppressed();
        java.io.IOException iOException77 = new java.io.IOException();
        java.io.IOException iOException78 = new java.io.IOException((java.lang.Throwable) iOException77);
        iOException74.addSuppressed((java.lang.Throwable) iOException77);
        java.io.IOException iOException81 = new java.io.IOException();
        java.io.IOException iOException82 = new java.io.IOException((java.lang.Throwable) iOException81);
        java.io.IOException iOException83 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException82);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList84 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException47, (java.lang.Throwable) iOException55, (java.lang.Throwable) iOException64, (java.lang.Throwable) iOException69, (java.lang.Throwable) iOException73, (java.lang.Throwable) iOException77, (java.lang.Throwable) iOException82);
        iOException43.addSuppressed((java.lang.Throwable) iOException55);
        java.io.IOException iOException86 = new java.io.IOException("java.io.IOException: ", (java.lang.Throwable) iOException43);
        iOException5.addSuppressed((java.lang.Throwable) iOException43);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableList45);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableList84);
    }

    @Test
    public void test15820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15820");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean34 = jSType33.isBooleanValueType();
        boolean boolean35 = jSType33.isNoObjectType();
        boolean boolean36 = jSType33.hasDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        boolean boolean57 = jSTypeRegistry52.canPropertyBeDefined(jSType55, "Unknown class name");
        jSTypeRegistry52.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry52.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType65, "");
        boolean boolean68 = jSType67.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = objectType50.testForEquality(jSType67);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType67.collapseUnion();
        boolean boolean71 = objectType43.differsFrom(jSType67);
        boolean boolean72 = jSType67.matchesStringContext();
        boolean boolean73 = jSType67.matchesStringContext();
        java.lang.String str74 = jSType67.toAnnotationString();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope76 = null;
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType67.resolve(errorReporter75, jSTypeStaticScope76);
        boolean boolean78 = jSType33.differsFrom(jSType77);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSType33.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = jSType79.isEmptyType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "?" + "'", str74, "?");
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(jSType79);
    }

    @Test
    public void test15821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15821");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        com.google.javascript.rhino.Node node5 = null;
        typePosition0.setItem(node5);
        int int7 = typePosition0.getEndLine();
        int int8 = typePosition0.getPositionOnStartLine();
        typePosition0.setPositionInformation(41, 97, 97, (int) '4');
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test15822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15822");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        jSTypeRegistry9.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry12.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = objectType16.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot19 = objectType16.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry9.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean21 = jSType20.isEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType22 = jSType20.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = jSType20.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry1.createOptionalNullableType(jSType20);
        jSTypeRegistry1.identifyNonNullableName("");
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        boolean boolean39 = objectType38.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = objectType45.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair47 = objectType38.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType45);
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType48 = jSTypeRegistry1.createParameterizedType(objectType32, (com.google.javascript.rhino.jstype.JSType) objectType45);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = objectType32.dereference();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNull(jSTypeStaticSlot19);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(typePair47);
        org.junit.Assert.assertNotNull(parameterizedType48);
        org.junit.Assert.assertNotNull(objectType49);
    }

    @Test
    public void test15823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15823");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        boolean boolean5 = jSTypeRegistry1.isForwardDeclaredType("");
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry7.createObjectType(objectType10);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = objectType11.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        boolean boolean19 = jSTypeRegistry14.canPropertyBeDefined(jSType17, "Unknown class name");
        jSTypeRegistry14.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry14.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType27, "");
        boolean boolean30 = jSType29.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = objectType12.testForEquality(jSType29);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSType29.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry1.createOptionalType(jSType32);
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = jSTypeRegistry1.getErrorReporter();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNull(errorReporter35);
    }

    @Test
    public void test15824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15824");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15825");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node63.siblings();
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet72);
        java.lang.Object[] objArray75 = strSet72.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isExterns();
        boolean boolean78 = jSDocInfo76.hasReturnType();
        boolean boolean79 = jSDocInfo76.isOverride();
        jSDocInfo76.setLicense("hi!");
        boolean boolean82 = strSet72.contains((java.lang.Object) jSDocInfo76);
        boolean boolean83 = strSet72.isEmpty();
        boolean boolean84 = nodeIterableList53.contains((java.lang.Object) strSet72);
        com.google.javascript.rhino.Node[][] nodeArray85 = new com.google.javascript.rhino.Node[][] {};
        com.google.javascript.rhino.Node[][] nodeArray86 = nodeIterableList53.toArray(nodeArray85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet88 = jSDocInfo87.getSuppressions();
        boolean boolean89 = jSDocInfo87.isNoSideEffects();
        boolean boolean90 = jSDocInfo87.isInterface();
        boolean boolean91 = jSDocInfo87.isJavaDispatch();
        boolean boolean92 = jSDocInfo87.isDefine();
        boolean boolean93 = jSDocInfo87.isDefine();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection94 = jSDocInfo87.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = nodeIterableList53.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeCollection94);
    }

    @Test
    public void test15826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        jSDocInfo0.addSuppression("{1839453468}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test15827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15827");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = objectType39.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        boolean boolean47 = jSTypeRegistry42.canPropertyBeDefined(jSType45, "Unknown class name");
        jSTypeRegistry42.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry42.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType55, "");
        boolean boolean58 = jSType57.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = objectType40.testForEquality(jSType57);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair60 = jSType33.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) objectType40);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = objectType66.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode70 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry69.setResolveMode(resolveMode70);
        com.google.javascript.rhino.jstype.JSType jSType72 = null;
        boolean boolean74 = jSTypeRegistry69.canPropertyBeDefined(jSType72, "Unknown class name");
        jSTypeRegistry69.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode79 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry78.setResolveMode(resolveMode79);
        com.google.javascript.rhino.jstype.ObjectType objectType81 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType82 = jSTypeRegistry78.createObjectType(objectType81);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry69.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType82, "");
        boolean boolean85 = jSType84.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = objectType67.testForEquality(jSType84);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair87 = objectType40.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType) objectType67);
        boolean boolean88 = objectType40.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope89 = objectType40.getParentScope();
        com.google.javascript.rhino.Node node90 = jSTypeStaticScope89.getRootNode();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope91 = jSTypeStaticScope89.getParentScope();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(typePair60);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + resolveMode70 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode70.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + resolveMode79 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode79.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(typePair87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope89);
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertNotNull(jSTypeStaticScope91);
    }

    @Test
    public void test15828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15828");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair16 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, (com.google.javascript.rhino.jstype.JSType) objectType15);
        com.google.javascript.rhino.jstype.JSType jSType17 = objectType15.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        boolean boolean24 = jSTypeRegistry19.canPropertyBeDefined(jSType22, "Unknown class name");
        jSTypeRegistry19.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry19.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        jSTypeRegistry30.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot40 = objectType37.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry30.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType37);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = objectType47.toMaybeEnumElementType();
        boolean boolean49 = jSTypeRegistry19.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType37, objectType47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = objectType47.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = objectType56.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        jSTypeRegistry59.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry59.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType72, "");
        boolean boolean75 = jSType74.isInstanceType();
        boolean boolean76 = jSType74.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType74.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSType74.dereference();
        boolean boolean79 = jSType74.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType57, jSType74);
        boolean boolean81 = jSType74.isEnumType();
        boolean boolean82 = objectType47.isSubtype(jSType74);
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType47.autobox();
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType17.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType47);
        boolean boolean85 = objectType47.isNoObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(jSType17);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(jSTypeStaticSlot40);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15829");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = objectType14.isEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        boolean boolean25 = objectType14.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType24);
        java.lang.String str26 = objectType14.toAnnotationString();
        boolean boolean27 = objectType14.isStringObjectType();
        boolean boolean28 = objectType14.isFunctionType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "?" + "'", str26, "?");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15830");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str7 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("OR hi! [source_file: []]\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test15831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15831");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node34 = objectType19.getRootNode();
        boolean boolean35 = objectType19.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType42 = objectType41.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = objectType48.toObjectType();
        boolean boolean50 = objectType41.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType48);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType57 = objectType56.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry59.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = objectType63.toObjectType();
        boolean boolean65 = objectType56.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair66 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType41, (com.google.javascript.rhino.jstype.JSType) objectType56);
        com.google.javascript.rhino.jstype.JSType jSType67 = objectType19.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType41);
        boolean boolean68 = objectType41.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType69 = objectType41.unboxesTo();
        boolean boolean70 = objectType41.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNull(enumElementType42);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNull(enumElementType57);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test15832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15832");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        boolean boolean43 = jSType42.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = objectType25.testForEquality(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType42.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry11.createNullableType(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createOptionalType(jSType46);
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        jSTypeRegistry50.forwardDeclareType("Unknown class name");
        jSTypeRegistry50.incrementGeneration();
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry50.createNamedType("{1923315740}", "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", 15, (int) (short) 0);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        boolean boolean67 = jSTypeRegistry62.canPropertyBeDefined(jSType65, "Unknown class name");
        jSTypeRegistry62.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode72 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry71.setResolveMode(resolveMode72);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry71.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry62.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType75, "");
        boolean boolean78 = jSType77.isInstanceType();
        boolean boolean79 = jSType77.isUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry50.createOptionalType(jSType77);
        boolean boolean81 = jSType80.isNominalType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = jSType80.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry1.createOptionalType(jSType80);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType80.autobox();
        boolean boolean85 = jSType80.matchesUint32Context();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + resolveMode72 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode72.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15833");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node10 = node6.useSourceInfoFromForTree(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(staticSourceFile8);
    }

    @Test
    public void test15834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15834");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        boolean boolean14 = node13.isIn();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 100, 10);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isNot();
        int int28 = node24.getLineno();
        boolean boolean29 = node24.isAdd();
        node24.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean32 = node24.isDec();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(51, node36, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node47 = node24.srcrefTree(node46);
        int int48 = node47.getLength();
        com.google.javascript.rhino.Node node49 = node18.useSourceInfoFromForTree(node47);
        boolean boolean50 = node18.isWith();
        com.google.javascript.rhino.Node node51 = node18.cloneNode();
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node node53 = node13.useSourceInfoFrom(node51);
        boolean boolean54 = node53.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15835");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        java.lang.String str6 = node2.toStringTree();
        boolean boolean7 = node2.isQualifiedName();
        boolean boolean8 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        boolean boolean13 = node11.isDelProp();
        int int14 = node11.getChildCount();
        java.lang.String str15 = node11.toStringTree();
        boolean boolean16 = node11.isQualifiedName();
        boolean boolean17 = node11.isFalse();
        boolean boolean18 = node11.isObjectLit();
        boolean boolean19 = node11.isCall();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoIfMissingFromForTree(node11);
        boolean boolean21 = node11.isLabel();
        boolean boolean22 = node11.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR hi!\n" + "'", str6, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR hi!\n" + "'", str15, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test15836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15836");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("OR hi!", 1, 2);
        com.google.javascript.rhino.Node node7 = node2.useSourceInfoIfMissingFrom(node6);
        com.google.javascript.rhino.Node node8 = node6.cloneNode();
        node6.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test15837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15837");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isDebugger();
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("");
        java.lang.String str6 = inputId5.getIdName();
        node2.setInputId(inputId5);
        boolean boolean8 = node2.isThrow();
        com.google.javascript.rhino.Node node9 = node2.getFirstChild();
        int int10 = node2.getLineno();
        boolean boolean11 = node2.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15838");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean2 = node1.isBreak();
        node1.setSourceEncodedPosition(15);
        int int5 = node1.getLength();
        boolean boolean6 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15839");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(4095, "STRING INSTANCEOF 50", 45, (int) (byte) 10);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        com.google.javascript.rhino.Node node7 = node4.copyInformationFrom(node6);
        boolean boolean8 = node4.isVar();
        node4.putBooleanProp(15, true);
        int int12 = node4.getChildCount();
        boolean boolean13 = node4.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15840");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isNE();
        boolean boolean32 = node30.isGetterDef();
        boolean boolean33 = node30.isGetProp();
        boolean boolean34 = node30.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node30);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15841");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair16 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, (com.google.javascript.rhino.jstype.JSType) objectType15);
        boolean boolean17 = objectType6.isAllType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = objectType6.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        boolean boolean25 = jSTypeRegistry20.canPropertyBeDefined(jSType23, "Unknown class name");
        jSTypeRegistry20.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = objectType33.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        boolean boolean41 = jSTypeRegistry36.canPropertyBeDefined(jSType39, "Unknown class name");
        jSTypeRegistry36.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry36.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType49, "");
        boolean boolean52 = jSType51.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = objectType34.testForEquality(jSType51);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType51.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry20.createNullableType(jSType51);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair56 = objectType6.getTypesUnderShallowInequality(jSType55);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = objectType62.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        boolean boolean70 = jSTypeRegistry65.canPropertyBeDefined(jSType68, "Unknown class name");
        jSTypeRegistry65.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode75 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry74.setResolveMode(resolveMode75);
        com.google.javascript.rhino.jstype.ObjectType objectType77 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry74.createObjectType(objectType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry65.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType78, "");
        boolean boolean81 = jSType80.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = objectType63.testForEquality(jSType80);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSType80.collapseUnion();
        boolean boolean84 = jSType55.isSubtype(jSType80);
        java.lang.String str85 = jSType80.toDebugHashCodeString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNotNull(typePair56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + resolveMode75 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode75.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "function (this:me, {1229179449}): me" + "'", str85, "function (this:me, {1229179449}): me");
    }

    @Test
    public void test15842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15842");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        jSTypeRegistry1.forwardDeclareType("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        boolean boolean25 = jSType23.isNumber();
        jSTypeRegistry1.unregisterPropertyOnType("{1078264502}", jSType23);
        com.google.javascript.rhino.jstype.JSType jSType28 = jSTypeRegistry1.getType("{1517329911}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable30 = jSTypeRegistry1.getEachReferenceTypeWithProperty("java.io.IOException: None");
        jSTypeRegistry1.identifyNonNullableName("{633142433}");
        jSTypeRegistry1.clearTemplateTypeNames();
        jSTypeRegistry1.identifyNonNullableName("{608950151}");
        jSTypeRegistry1.incrementGeneration();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNotNull(objectTypeIterable30);
    }

    @Test
    public void test15843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15843");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList1 = visibilityEnumBuilder0.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection2 = visibilityEnumBuilder0.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean6 = jSDocInfoBuilder4.recordVisibility(visibility5);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder7 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility5);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean13 = jSDocInfoBuilder11.recordVisibility(visibility12);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility15);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility18);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray20 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8, visibility9, visibility12, visibility15, visibility18 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList21 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList26 = visibilityEnumBuilder25.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList28 = visibilityEnumBuilder27.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo32.getVisibility();
        boolean boolean36 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo32.setVisibility(visibility37);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray39 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = jSDocInfo44.getVisibility();
        boolean boolean48 = jSDocInfo44.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo44.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility49 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList54 = visibilityEnumBuilder40.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>> visibilityEnumBuilderList55 = com.google.common.collect.ImmutableList.of(visibilityEnumBuilder0, visibilityEnumBuilder25, visibilityEnumBuilder27, visibilityEnumBuilder40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getType();
        boolean boolean59 = jSDocInfo56.isImplicitCast();
        boolean boolean60 = jSDocInfo56.isExport();
        boolean boolean61 = jSDocInfo56.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo56.getReturnType();
        boolean boolean63 = jSDocInfo56.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = visibilityEnumBuilder64.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility65);
        jSDocInfo56.setVisibility(visibility65);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder27.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility65);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList69 = visibilityEnumBuilder27.build();
        org.junit.Assert.assertNotNull(visibilityEnumList1);
        org.junit.Assert.assertNotNull(visibilityEnumCollection2);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder16);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder19);
        org.junit.Assert.assertNotNull(visibilityArray20);
        org.junit.Assert.assertNotNull(visibilityEnumList21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertNotNull(visibilityEnumList26);
        org.junit.Assert.assertNotNull(visibilityEnumList28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray39);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(visibility47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder53);
        org.junit.Assert.assertNotNull(visibilityEnumList54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilderList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + visibility65 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility65.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder66);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertNotNull(visibilityEnumList69);
    }

    @Test
    public void test15844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15844");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        boolean boolean36 = node29.isDo();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean47 = node42.isEquivalentToTyped(node46);
        com.google.javascript.rhino.Node node48 = node42.cloneNode();
        boolean boolean49 = node42.isEmpty();
        com.google.javascript.rhino.Node node50 = node29.useSourceInfoFromForTree(node42);
        boolean boolean51 = node29.hasOneChild();
        boolean boolean52 = node29.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15845");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isDebugger();
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("");
        java.lang.String str6 = inputId5.getIdName();
        node2.setInputId(inputId5);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode10);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        boolean boolean14 = jSTypeRegistry9.canPropertyBeDefined(jSType12, "Unknown class name");
        jSTypeRegistry9.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry25.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType38, "");
        boolean boolean41 = jSType40.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = objectType23.testForEquality(jSType40);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSType40.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry9.createNullableType(jSType40);
        boolean boolean45 = jSType40.isTemplateType();
        boolean boolean46 = jSType40.isBooleanObjectType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = jSType40.getPossibleToBooleanOutcomes();
        boolean boolean48 = inputId5.equals((java.lang.Object) jSType40);
        boolean boolean49 = jSType40.isNominalConstructor();
        boolean boolean50 = jSType40.hasAnyTemplate();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isNE();
        boolean boolean59 = node57.isInstanceOf();
        boolean boolean60 = node57.isThrow();
        node57.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node57.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        boolean boolean70 = jSTypeRegistry65.canPropertyBeDefined(jSType68, "Unknown class name");
        jSTypeRegistry65.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType73 = jSTypeRegistry65.createAnonymousObjectType();
        objectType73.clearResolved();
        node57.setJSType((com.google.javascript.rhino.jstype.JSType) objectType73);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean82 = node81.isThis();
        node78.addChildToBack(node81);
        boolean boolean84 = node78.isDebugger();
        com.google.javascript.rhino.Node node85 = node78.getFirstChild();
        boolean boolean86 = node78.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType87 = jSTypeRegistry52.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType73, node78);
        boolean boolean88 = com.google.javascript.rhino.jstype.JSType.isEquivalent(jSType40, (com.google.javascript.rhino.jstype.JSType) functionType87);
        boolean boolean89 = jSType40.matchesNumberContext();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = jSType40.setValidator(jSTypePredicate90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(functionType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test15846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15846");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isNE();
        boolean boolean8 = node6.isInstanceOf();
        boolean boolean9 = node6.isThrow();
        node6.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node6.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        boolean boolean19 = jSTypeRegistry14.canPropertyBeDefined(jSType17, "Unknown class name");
        jSTypeRegistry14.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry14.createAnonymousObjectType();
        objectType22.clearResolved();
        node6.setJSType((com.google.javascript.rhino.jstype.JSType) objectType22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node34 = node27.getFirstChild();
        boolean boolean35 = node27.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType36 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType22, node27);
        boolean boolean37 = objectType22.isArrayType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = objectType22.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        boolean boolean45 = jSTypeRegistry40.canPropertyBeDefined(jSType43, "Unknown class name");
        jSTypeRegistry40.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry40.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        jSTypeRegistry51.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = objectType58.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot61 = objectType58.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry51.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType58);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType68 = jSTypeRegistry64.createObjectType(objectType67);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType69 = objectType68.toMaybeEnumElementType();
        boolean boolean70 = jSTypeRegistry40.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType58, objectType68);
        com.google.javascript.rhino.jstype.JSType jSType72 = objectType58.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.autobox();
        boolean boolean74 = objectType22.canTestForEqualityWith(jSType73);
        boolean boolean75 = objectType22.isObject();
        boolean boolean76 = objectType22.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType77 = objectType22.autobox();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope78 = objectType22.getParentScope();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(functionType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNull(jSTypeStaticSlot61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertNull(enumElementType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertNotNull(jSTypeStaticScope78);
    }

    @Test
    public void test15847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15847");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean5 = nodeIterableList0.contains((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray15 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition9, typePosition10, typePosition11, typePosition12, typePosition13, typePosition14 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray16 = nodeIterableList6.toArray(typePositionArray15);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList6.iterator();
        java.lang.Object[] objArray18 = nodeIterableList6.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream19 = nodeIterableList6.parallelStream();
        java.lang.Object[] objArray20 = nodeIterableList6.toArray();
        boolean boolean21 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList6);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator22 = nodeIterableList0.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor23 = nodeIterableList0.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(typePositionArray15);
        org.junit.Assert.assertNotNull(typePositionArray16);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator22);
        org.junit.Assert.assertNotNull(nodeIterableItor23);
    }

    @Test
    public void test15848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15848");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.markAnnotation("java.io.IOException: OR hi! [directives: []]\n", (int) (short) 1, 50);
        boolean boolean15 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test15849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15849");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker11.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker11.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition18 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition21 = marker20.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker20.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList24 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker7, marker11, marker15, marker16, marker20);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition25 = marker16.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition26 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = marker16.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker28 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = marker28.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker31 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition32 = marker31.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition33 = marker31.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition34 = marker31.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker35 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition36 = marker35.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition37 = marker35.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker38 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = marker38.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = marker38.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker38.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker42 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition43 = marker42.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition44 = marker42.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition45 = marker42.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker46 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker47 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition48 = marker47.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition49 = marker47.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition50 = marker47.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker51 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition52 = marker51.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition53 = marker51.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition54 = marker51.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList55 = com.google.common.collect.ImmutableList.of(marker31, marker35, marker38, marker42, marker46, marker47, marker51);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition56 = marker42.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = marker42.getAnnotation();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList58 = com.google.common.collect.ImmutableList.of(marker16, marker28, marker42);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = marker42.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition60 = marker42.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition61 = marker42.getAnnotation();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition12);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(nodeSourcePosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(nodeSourcePosition21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNotNull(markerList24);
        org.junit.Assert.assertNull(nodeSourcePosition25);
        org.junit.Assert.assertNull(nodeSourcePosition26);
        org.junit.Assert.assertNull(typePosition27);
        org.junit.Assert.assertNull(stringPosition29);
        org.junit.Assert.assertNull(typePosition30);
        org.junit.Assert.assertNull(nodeSourcePosition32);
        org.junit.Assert.assertNull(nodeSourcePosition33);
        org.junit.Assert.assertNull(nodeSourcePosition34);
        org.junit.Assert.assertNull(nodeSourcePosition36);
        org.junit.Assert.assertNull(nodeSourcePosition37);
        org.junit.Assert.assertNull(stringPosition39);
        org.junit.Assert.assertNull(stringPosition40);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(nodeSourcePosition43);
        org.junit.Assert.assertNull(nodeSourcePosition44);
        org.junit.Assert.assertNull(nodeSourcePosition45);
        org.junit.Assert.assertNull(nodeSourcePosition48);
        org.junit.Assert.assertNull(nodeSourcePosition49);
        org.junit.Assert.assertNull(nodeSourcePosition50);
        org.junit.Assert.assertNull(nodeSourcePosition52);
        org.junit.Assert.assertNull(nodeSourcePosition53);
        org.junit.Assert.assertNull(stringPosition54);
        org.junit.Assert.assertNotNull(markerList55);
        org.junit.Assert.assertNull(stringPosition56);
        org.junit.Assert.assertNull(stringPosition57);
        org.junit.Assert.assertNotNull(markerList58);
        org.junit.Assert.assertNull(typePosition59);
        org.junit.Assert.assertNull(stringPosition60);
        org.junit.Assert.assertNull(stringPosition61);
    }

    @Test
    public void test15850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15850");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        boolean boolean22 = node17.isAdd();
        boolean boolean23 = node11.hasChild(node17);
        boolean boolean24 = node17.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15851");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isSetterDef();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean28 = node27.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType29 = node27.getJSType();
        node22.addChildrenToBack(node27);
        boolean boolean31 = node22.isCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node22.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator33 = nodeIterable32.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
    }

    @Test
    public void test15852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15852");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.isExterns();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15853");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR hi! [var_args_name: 1]", (int) (short) 100, 0);
        boolean boolean4 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15854");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        boolean boolean40 = node39.isAssignAdd();
        int int41 = node2.getIndexOfChild(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node39.siblings();
        boolean boolean43 = node39.isObjectLit();
        boolean boolean44 = node39.isAdd();
        node39.detachChildren();
        boolean boolean46 = node39.isWith();
        java.lang.String str47 = node39.getSourceFileName();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isAdd();
        boolean boolean57 = node53.isExprResult();
        boolean boolean58 = node53.isThrow();
        boolean boolean59 = node53.isVarArgs();
        boolean boolean60 = node53.isGetProp();
        boolean boolean61 = node53.isReturn();
        boolean boolean62 = node53.isInstanceOf();
        boolean boolean63 = node53.isComma();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoFromForTree(node53);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test15855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15855");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isDebugger();
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("");
        java.lang.String str6 = inputId5.getIdName();
        node2.setInputId(inputId5);
        boolean boolean8 = node2.isTypeOf();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        boolean boolean13 = node11.isDelProp();
        int int14 = node11.getChildCount();
        boolean boolean15 = node11.isComma();
        boolean boolean16 = node11.isNoSideEffectsCall();
        boolean boolean17 = node11.isSetterDef();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        com.google.javascript.rhino.Node node24 = node23.removeChildren();
        com.google.javascript.rhino.Node node25 = node11.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node26 = node2.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        boolean boolean45 = strSet38.remove((java.lang.Object) boolean44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo46.getSuppressions();
        boolean boolean48 = jSDocInfo46.isNoSideEffects();
        boolean boolean49 = jSDocInfo46.isConsistentIdGenerator();
        boolean boolean50 = strSet38.contains((java.lang.Object) jSDocInfo46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node53.isDebugger();
        boolean boolean60 = node53.isVoid();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isTypeOf();
        com.google.javascript.rhino.Node node65 = node53.srcrefTree(node63);
        com.google.javascript.rhino.Node node66 = node53.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        node66.setStaticSourceFile(staticSourceFile67);
        boolean boolean69 = strSet38.remove((java.lang.Object) node66);
        java.util.Iterator<java.lang.String> strItor70 = strSet38.iterator();
        node23.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((-1), "{764597585}");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node74.new FileLevelJsDocBuilder();
        boolean boolean76 = strSet38.contains((java.lang.Object) node74);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test15856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15856");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean17 = nodeIterableList16.add(nodeIterable15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        boolean boolean34 = strSet29.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.lang.Object[] objArray35 = nodeIterableList32.toArray();
        boolean boolean36 = nodeIterableList32.isEmpty();
        boolean boolean37 = nodeIterableList16.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor38 = nodeIterableList16.iterator();
        boolean boolean39 = strSet6.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList16);
        java.lang.Object[] objArray40 = strSet6.toArray();
        java.util.Iterator<java.lang.String> strItor41 = strSet6.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(strItor41);
    }

    @Test
    public void test15857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!");
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("{1016191863}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test15858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15858");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        boolean boolean68 = jSDocInfoBuilder1.hasParameter("OR hi! 0\n");
        boolean boolean69 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean70 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node76 = node74.getLastSibling();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(40, node74, (int) (byte) 10, (int) (byte) 100);
        node74.putIntProp(46, 16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder1.build(node74);
        boolean boolean84 = node74.isContinue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test15859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15859");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = jSType16.getPossibleToBooleanOutcomes();
        boolean boolean18 = jSType16.isBooleanValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        boolean boolean26 = objectType25.matchesInt32Context();
        boolean boolean27 = objectType25.isStringValueType();
        boolean boolean28 = objectType25.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        boolean boolean35 = jSTypeRegistry30.canPropertyBeDefined(jSType33, "Unknown class name");
        jSTypeRegistry30.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry30.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isNE();
        boolean boolean48 = node46.isInstanceOf();
        boolean boolean49 = node46.isThrow();
        node46.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable52 = node46.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        boolean boolean59 = jSTypeRegistry54.canPropertyBeDefined(jSType57, "Unknown class name");
        jSTypeRegistry54.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry54.createAnonymousObjectType();
        objectType62.clearResolved();
        node46.setJSType((com.google.javascript.rhino.jstype.JSType) objectType62);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        com.google.javascript.rhino.Node node74 = node67.getFirstChild();
        boolean boolean75 = node67.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry41.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType62, node67);
        boolean boolean77 = jSTypeRegistry30.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair78 = objectType25.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType62);
        com.google.javascript.rhino.jstype.JSType jSType79 = objectType25.collapseUnion();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = jSType16.getTypesUnderShallowEquality(jSType79);
        boolean boolean81 = jSType16.isFunctionType();
        boolean boolean82 = jSType16.isNoObjectType();
        boolean boolean83 = jSType16.isAllType();
        boolean boolean84 = jSType16.isCheckedUnknownType();
        boolean boolean85 = jSType16.isFunctionType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ancestorIterable52);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(typePair78);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNotNull(typePair80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15860");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        java.lang.Object obj49 = node47.getProp((int) (byte) 0);
        int int50 = node47.getChildCount();
        node35.addChildrenToFront(node47);
        boolean boolean52 = node47.isDelProp();
        boolean boolean53 = node47.isRegExp();
        boolean boolean54 = node47.isOr();
        boolean boolean56 = node47.getBooleanProp(37);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = node47.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR hi! is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15861");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        jSDocInfoBuilder1.markName("{640911743}", 47, 10);
        jSDocInfoBuilder1.markText("SHNE 49\n", 10, 47, (int) (short) -1, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test15862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15862");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("PARAM_LIST");
        boolean boolean15 = jSDocInfoBuilder1.recordBlockDescription("{776423123}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test15863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15863");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isAdd();
        boolean boolean13 = node9.isExprResult();
        boolean boolean14 = node9.isThrow();
        boolean boolean15 = node9.isVarArgs();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node18 = node9.useSourceInfoFrom(node17);
        node9.setLineno(5);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node24.isDebugger();
        com.google.javascript.rhino.Node node31 = node24.getFirstChild();
        boolean boolean32 = node24.isNot();
        boolean boolean33 = node24.isIn();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isAssign();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(51, node37, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable48 = node47.getAncestors();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(1, node24, node47, 54, 10);
        int int52 = node9.getIndexOfChild(node51);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        boolean boolean63 = node58.isAdd();
        com.google.javascript.rhino.Node node64 = node58.cloneTree();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node70.isNot();
        int int74 = node70.getLineno();
        boolean boolean75 = node70.isAdd();
        boolean boolean76 = node64.hasChild(node70);
        boolean boolean77 = node70.isDefaultCase();
        int int78 = node70.getSourcePosition();
        com.google.javascript.rhino.Node node79 = node51.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable80 = node70.getAncestors();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile81 = node70.getStaticSourceFile();
        boolean boolean82 = node3.isEquivalentTo(node70);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = node70.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(ancestorIterable48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(ancestorIterable80);
        org.junit.Assert.assertNull(staticSourceFile81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(staticSourceFile83);
    }

    @Test
    public void test15864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15864");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean16 = node11.isEquivalentToTyped(node15);
        com.google.javascript.rhino.Node node17 = node11.cloneNode();
        com.google.javascript.rhino.InputId inputId18 = node11.getInputId();
        boolean boolean19 = node11.isLabelName();
        com.google.javascript.rhino.Node node20 = node2.srcref(node11);
        boolean boolean21 = node2.isInc();
        int int22 = node2.getType();
        boolean boolean23 = node2.isBlock();
        boolean boolean24 = node2.isExprResult();
        boolean boolean25 = node2.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15865");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15866");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node5.setJSType(jSType11);
        boolean boolean13 = node5.isOptionalArg();
        boolean boolean14 = node5.isOr();
        boolean boolean15 = node5.isVar();
        java.lang.String str16 = node5.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR hi!" + "'", str16, "OR hi!");
    }

    @Test
    public void test15867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15867");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        boolean boolean16 = node2.isNew();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean23 = jSDocInfoBuilder18.recordExpose();
        boolean boolean24 = jSDocInfoBuilder18.recordNoCompile();
        boolean boolean25 = jSDocInfoBuilder18.isPopulatedWithFileOverview();
        boolean boolean26 = jSDocInfoBuilder18.isPopulated();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        node30.putBooleanProp(0, false);
        node30.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean47 = node30.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node30.getStaticSourceFile();
        boolean boolean49 = staticSourceFile48.isExtern();
        int int51 = staticSourceFile48.getLineOffset(16);
        jSDocInfoBuilder18.markName("None", staticSourceFile48, (int) (byte) 1, 43);
        int int56 = staticSourceFile48.getColumnOfOffset(4);
        int int58 = staticSourceFile48.getColumnOfOffset(2);
        node2.setStaticSourceFile(staticSourceFile48);
        int int61 = staticSourceFile48.getLineOfOffset((int) (short) 0);
        int int63 = staticSourceFile48.getLineOffset(45);
        int int65 = staticSourceFile48.getLineOffset(3);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-2147483648) + "'", int51 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-2147483648) + "'", int63 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-2147483648) + "'", int65 == (-2147483648));
    }

    @Test
    public void test15868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15868");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isTypeOf();
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node21);
        com.google.javascript.rhino.Node node24 = node11.getLastSibling();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node34 = node27.getFirstChild();
        boolean boolean35 = node11.hasChild(node34);
        typePosition8.setItem(node34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        com.google.javascript.rhino.Node node46 = node39.getFirstChild();
        boolean boolean47 = node39.isNot();
        typePosition8.setItem(node39);
        java.lang.String str49 = node39.getString();
        node39.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node52 = node6.copyInformationFromForTree(node39);
        java.lang.String str53 = node52.getSourceFileName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node52.getAncestors();
        com.google.javascript.rhino.Node node56 = node52.getChildAtIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = node56.isCatch();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test15869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15869");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isAdd();
        boolean boolean13 = node9.isExprResult();
        boolean boolean14 = node9.isThrow();
        boolean boolean15 = node9.isVarArgs();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node18 = node9.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isVoid();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isTypeOf();
        com.google.javascript.rhino.Node node33 = node21.srcrefTree(node31);
        com.google.javascript.rhino.Node node34 = node21.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node34.setStaticSourceFile(staticSourceFile35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry38.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean47 = node42.isEquivalentToTyped(node46);
        com.google.javascript.rhino.Node node48 = node42.cloneNode();
        boolean boolean49 = node42.isEmpty();
        com.google.javascript.rhino.Node node50 = node34.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node node51 = node9.useSourceInfoIfMissingFrom(node50);
        boolean boolean52 = strSet3.equals((java.lang.Object) node9);
        boolean boolean53 = node9.isComma();
        boolean boolean54 = node9.isHook();
        boolean boolean55 = node9.isNot();
        boolean boolean56 = node9.isOr();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test15870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15870");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry1.createAnonymousObjectType();
        boolean boolean12 = objectType11.isNullable();
        boolean boolean13 = objectType11.isNullType();
        boolean boolean14 = objectType11.isResolved();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15871");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("java.io.IOException: None");
        java.lang.String str2 = inputId1.getIdName();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean5 = jSDocInfoBuilder4.recordInterface();
        boolean boolean7 = jSDocInfoBuilder4.recordDescription("hi!");
        boolean boolean8 = jSDocInfoBuilder4.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder4.recordThrowType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder4.recordConstancy();
        boolean boolean12 = jSDocInfoBuilder4.recordOverride();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "None", "{1078264502}", "OR hi! [directives: []]\n", "{1078264502}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        boolean boolean25 = jSDocInfoBuilder4.recordTemplateTypeNames((java.util.List<java.lang.String>) strList23);
        boolean boolean26 = jSDocInfoBuilder4.isDescriptionRecorded();
        boolean boolean27 = jSDocInfoBuilder4.isConstructorRecorded();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isExport();
        boolean boolean41 = jSDocInfo36.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo36.getReturnType();
        boolean boolean43 = jSDocInfo36.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        jSDocInfo36.setVisibility(visibility45);
        jSDocInfo33.setVisibility(visibility45);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        boolean boolean50 = jSDocInfoBuilder4.recordVisibility(visibility45);
        boolean boolean51 = inputId1.equals((java.lang.Object) jSDocInfoBuilder4);
        com.google.javascript.rhino.Node node52 = null;
        jSDocInfoBuilder4.markTypeNode(node52, 53, 46, 131172, 0, false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: None" + "'", str2, "java.io.IOException: None");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test15872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15872");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean16 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean18 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder21.recordVersion("hi!");
        boolean boolean24 = jSDocInfoBuilder21.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        jSDocInfoBuilder21.markName("Unknown class name", staticSourceFile26, 48, 5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        boolean boolean42 = jSDocInfoBuilder31.recordDeprecationReason("Not declared as a constructor");
        boolean boolean43 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.addAuthor("");
        boolean boolean48 = jSDocInfoBuilder45.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder45.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder53.addAuthor("");
        boolean boolean56 = jSDocInfoBuilder53.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression57);
        boolean boolean59 = jSDocInfoBuilder53.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder53.markName("", staticSourceFile61, 29, 50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        boolean boolean74 = node67.isSyntheticBlock();
        boolean boolean75 = node67.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node67, "Unknown class name");
        boolean boolean79 = jSDocInfoBuilder53.recordThrowDescription(jSTypeExpression77, "?");
        boolean boolean80 = jSDocInfoBuilder45.recordExtendedInterface(jSTypeExpression77);
        boolean boolean81 = jSDocInfoBuilder31.recordDefineType(jSTypeExpression77);
        boolean boolean82 = jSDocInfoBuilder21.recordThisType(jSTypeExpression77);
        boolean boolean83 = jSDocInfoBuilder1.recordParameter("OR hi!\n", jSTypeExpression77);
        boolean boolean85 = jSDocInfoBuilder1.recordMeaning("{2122885848}");
        boolean boolean86 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test15873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15873");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test15874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15874");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15875");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15876");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node2.getJsDocBuilderForNode();
        java.lang.String str7 = node2.getString();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean12 = node11.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isNE();
        boolean boolean17 = node15.isInstanceOf();
        boolean boolean18 = node15.isThrow();
        node15.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node15.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry23.createAnonymousObjectType();
        objectType31.clearResolved();
        node15.setJSType((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.jstype.JSType jSType34 = node15.getJSType();
        boolean boolean35 = jSType34.isNominalConstructor();
        node11.setJSType(jSType34);
        boolean boolean37 = jSType34.isEmptyType();
        node2.setJSType(jSType34);
        boolean boolean39 = node2.isNot();
        int int40 = node2.getType();
        boolean boolean41 = node2.isTrue();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node2.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable42);
    }

    @Test
    public void test15877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15877");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        boolean boolean13 = node2.isReturn();
        java.lang.String str14 = node2.toStringTree();
        boolean boolean15 = node2.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str14, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15878");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        java.lang.String str14 = node5.toStringTree();
        com.google.javascript.rhino.Node node15 = node5.getLastSibling();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node18.isDebugger();
        node18.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node42.isNot();
        int int46 = node42.getLineno();
        com.google.javascript.rhino.Node node47 = node32.srcref(node42);
        int int48 = node32.getCharno();
        com.google.javascript.rhino.Node node49 = node18.copyInformationFrom(node32);
        boolean boolean50 = node49.isAdd();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node49, "{1559619413}");
        node49.setLength(3);
        com.google.javascript.rhino.Node node55 = node49.getFirstChild();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(40);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean60 = node57.getBooleanProp((int) (short) 0);
        com.google.javascript.rhino.Node node61 = node55.clonePropsFrom(node57);
        com.google.javascript.rhino.Node node62 = node5.clonePropsFrom(node55);
        boolean boolean63 = node55.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR hi! 0\n" + "'", str14, "OR hi! 0\n");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test15879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15879");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder63.recordDeprecationReason("TYPEOF OR hi!\n");
        boolean boolean78 = jSDocInfoBuilder63.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test15880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15880");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        com.google.javascript.rhino.Node node9 = node2.getNext();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDebugger();
        boolean boolean19 = node12.isVoid();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isTypeOf();
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node22);
        boolean boolean25 = node24.hasMoreThanOneChild();
        int int26 = node24.getCharno();
        node24.setString("?");
        node2.addChildrenToBack(node24);
        boolean boolean30 = node24.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15881");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node11.siblings();
        node11.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        boolean boolean24 = node22.isDelProp();
        boolean boolean25 = node22.hasChildren();
        boolean boolean26 = node22.isOr();
        java.lang.String str27 = node11.checkTreeEquals(node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node43.isNot();
        int int47 = node43.getLineno();
        com.google.javascript.rhino.Node node48 = node33.srcref(node43);
        boolean boolean49 = node48.isDelProp();
        com.google.javascript.rhino.Node node50 = node48.getLastSibling();
        boolean boolean51 = node48.isOptionalArg();
        boolean boolean52 = node11.isEquivalentTo(node48);
        boolean boolean53 = strSet8.remove((java.lang.Object) node48);
        java.lang.Object obj55 = node48.getProp((int) (byte) -1);
        java.lang.String str56 = node48.getString();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(36, "{1604895782}");
        boolean boolean60 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoFrom(node59);
        boolean boolean62 = node61.isTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str27, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test15882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15882");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node11.setJSType(jSType12);
        boolean boolean14 = node11.isString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        boolean boolean37 = node32.isAdd();
        boolean boolean38 = node26.hasChild(node32);
        boolean boolean39 = node32.isDefaultCase();
        int int40 = node32.getSourcePosition();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isTypeOf();
        boolean boolean45 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = node32.copyInformationFromForTree(node43);
        boolean boolean47 = node11.isEquivalentToTyped(node43);
        com.google.javascript.rhino.Node node48 = node43.removeFirstChild();
        boolean boolean49 = node43.isWhile();
        node43.setLineno((int) (byte) -1);
        node43.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15883");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnEndLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getEndLine();
        stringPosition0.setItem("InputId: ");
        int int6 = stringPosition0.getPositionOnStartLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(29, 2, (int) '4', 47);
        stringPosition0.setItem("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test15884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15884");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(5, "GETELEM 2 [jsdoc_info: JSDocInfo]", 48, 39);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15885");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test15886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15886");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot8 = objectType5.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node9 = objectType5.getRootNode();
        com.google.javascript.rhino.Node node10 = objectType5.getRootNode();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = objectType5.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType12 = objectType5.toMaybeParameterizedType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = parameterizedType12.matchesInt32Context();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertNull(jSTypeStaticSlot8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(parameterizedType12);
    }

    @Test
    public void test15887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15887");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        com.google.javascript.rhino.Node node8 = node2.cloneNode();
        java.lang.String str9 = node8.toStringTree();
        boolean boolean10 = node8.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR hi!\n" + "'", str9, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15889");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("INSTANCEOF");
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        node12.putBooleanProp(0, false);
        node12.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean29 = node12.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node12.getStaticSourceFile();
        boolean boolean31 = staticSourceFile30.isExtern();
        java.lang.String str32 = staticSourceFile30.getName();
        int int34 = staticSourceFile30.getLineOfOffset(8);
        jSDocInfoBuilder1.markName("OR hi! [source_file: ]\n    OR hi!\n", staticSourceFile30, 143360, 48);
        java.lang.String str38 = staticSourceFile30.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str32, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str38, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test15890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15890");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder13.recordDefineType(jSTypeExpression17);
        boolean boolean20 = jSDocInfoBuilder13.recordMeaning("hi!");
        boolean boolean22 = jSDocInfoBuilder13.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean49 = jSDocInfoBuilder43.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        boolean boolean78 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression75);
        boolean boolean79 = jSDocInfoBuilder24.recordEnumParameterType(jSTypeExpression75);
        boolean boolean80 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression75);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression75);
        boolean boolean82 = jSDocInfoBuilder1.recordType(jSTypeExpression75);
        boolean boolean84 = jSDocInfoBuilder1.addReference("{1685056169}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test15891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15891");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        boolean boolean34 = strSet27.remove((java.lang.Object) boolean33);
        java.util.Iterator<java.lang.String> strItor35 = strSet27.iterator();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        com.google.javascript.rhino.Node node44 = node38.cloneNode();
        boolean boolean45 = node38.hasOneChild();
        boolean boolean46 = strSet27.remove((java.lang.Object) boolean45);
        boolean boolean47 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet27);
        boolean boolean48 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isThis();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean17 = node12.isEquivalentToTyped(node16);
        com.google.javascript.rhino.Node node18 = node12.cloneNode();
        com.google.javascript.rhino.InputId inputId19 = node12.getInputId();
        boolean boolean20 = node12.isLabelName();
        com.google.javascript.rhino.Node node21 = node3.srcref(node12);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node12 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(0, nodeArray22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean28 = node27.isOptionalArg();
        int int29 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node32.siblings();
        java.lang.Object obj40 = node32.getProp(32);
        com.google.javascript.rhino.Node node41 = node32.cloneTree();
        com.google.javascript.rhino.Node node42 = node27.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node43 = node23.copyInformationFrom(node32);
        boolean boolean44 = node23.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15893");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = nodeIterableList2.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor60 = nodeIterableList59.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = nodeIterableList59.remove((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(nodeIterableItor60);
    }

    @Test
    public void test15894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15894");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        jSDocInfo0.setLicense("hi!");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        java.lang.String str8 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test15895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15895");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(46, 30, (int) (short) -1);
        boolean boolean4 = node3.isLabel();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15896");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder35.recordTypedef(jSTypeExpression76);
        boolean boolean79 = jSDocInfoBuilder35.recordFileOverview("{860835950}");
        boolean boolean80 = jSDocInfoBuilder35.recordImplicitCast();
        boolean boolean81 = jSDocInfoBuilder35.recordImplicitCast();
        boolean boolean83 = jSDocInfoBuilder35.recordDescription("STRING hi! [synthetic: 1]\n");
        boolean boolean84 = jSDocInfoBuilder35.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test15897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15897");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node5.setJSType(jSType11);
        com.google.javascript.rhino.Node node13 = node5.cloneNode();
        com.google.javascript.rhino.Node node14 = node13.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node26.setJSType(jSType27);
        boolean boolean29 = node26.isString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        boolean boolean40 = node35.isAdd();
        com.google.javascript.rhino.Node node41 = node35.cloneTree();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node47.isNot();
        int int51 = node47.getLineno();
        boolean boolean52 = node47.isAdd();
        boolean boolean53 = node41.hasChild(node47);
        boolean boolean54 = node47.isDefaultCase();
        int int55 = node47.getSourcePosition();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isTypeOf();
        boolean boolean60 = node58.isRegExp();
        com.google.javascript.rhino.Node node61 = node47.copyInformationFromForTree(node58);
        boolean boolean62 = node26.isEquivalentToTyped(node58);
        com.google.javascript.rhino.Node node63 = node14.copyInformationFrom(node58);
        boolean boolean64 = node14.isAssignAdd();
        node14.setWasEmptyNode(true);
        int int67 = node14.getLineno();
        node14.setType(30);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = new com.google.javascript.rhino.JSTypeExpression(node14, "{776423123}");
        boolean boolean72 = jSTypeExpression71.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test15898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15898");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        boolean boolean34 = nodeIterableList0.equals((java.lang.Object) nodeIterableList23);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor35 = nodeIterableList23.iterator();
        boolean boolean36 = nodeIterableList23.isEmpty();
        int int37 = nodeIterableList23.size();
        boolean boolean38 = nodeIterableList23.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor39 = nodeIterableList23.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor39);
    }

    @Test
    public void test15899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15899");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression1 = jSDocInfo0.getEnumParameterType();
        java.lang.String str2 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = jSDocInfo3.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo3.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo3.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo3.getBaseType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean16 = jSDocInfo10.hasDescriptionForParameter("Unknown class name");
        boolean boolean17 = jSDocInfo10.hasReturnType();
        boolean boolean19 = jSDocInfo10.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        boolean boolean23 = jSDocInfo20.isImplicitCast();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getReturnType();
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        int int28 = jSDocInfo20.getParameterCount();
        java.lang.String str29 = jSDocInfo20.getVersion();
        jSDocInfo20.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        int int33 = jSDocInfo32.getExtendedInterfacesCount();
        boolean boolean34 = jSDocInfo32.isInterface();
        boolean boolean36 = jSDocInfo32.hasParameter("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.isExterns();
        boolean boolean39 = jSDocInfo37.hasReturnType();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo37.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo41.getType();
        boolean boolean44 = jSDocInfo41.isImplicitCast();
        boolean boolean45 = jSDocInfo41.isOverride();
        boolean boolean46 = jSDocInfo41.isNoSideEffects();
        boolean boolean48 = jSDocInfo41.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet49 = jSDocInfo41.getModifies();
        java.lang.String str50 = jSDocInfo41.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isExterns();
        boolean boolean53 = jSDocInfo51.hasReturnType();
        boolean boolean54 = jSDocInfo51.isOverride();
        jSDocInfo51.setLicense("hi!");
        java.lang.String str57 = jSDocInfo51.getDeprecationReason();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo51.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.lang.String str62 = jSDocInfo59.getReturnDescription();
        boolean boolean64 = jSDocInfo59.hasParameter("Not declared as a constructor");
        java.lang.String str65 = jSDocInfo59.getMeaning();
        boolean boolean66 = jSDocInfo59.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.isExterns();
        boolean boolean69 = jSDocInfo67.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo70.getSuppressions();
        boolean boolean72 = jSDocInfo70.isNoSideEffects();
        java.lang.String str73 = jSDocInfo70.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo74.getType();
        boolean boolean77 = jSDocInfo74.isNoTypeCheck();
        boolean boolean78 = jSDocInfo74.isHidden();
        boolean boolean79 = jSDocInfo74.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo37, jSDocInfo41, jSDocInfo51, jSDocInfo59, jSDocInfo67, jSDocInfo70, jSDocInfo74);
        boolean boolean81 = jSDocInfo41.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean83 = jSDocInfo82.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo82.getType();
        boolean boolean85 = jSDocInfo82.isImplicitCast();
        boolean boolean86 = jSDocInfo82.isInterface();
        boolean boolean88 = jSDocInfo82.hasParameterType("{1078264502}");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo82.getReturnType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList90 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo3, jSDocInfo10, jSDocInfo20, jSDocInfo32, jSDocInfo41, jSDocInfo82);
        int int91 = jSDocInfo3.getExtendedInterfacesCount();
        boolean boolean92 = jSDocInfo3.isOverride();
        org.junit.Assert.assertNull(jSTypeExpression1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertNotNull(jSDocInfoList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test15900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15900");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node6.siblings();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node21.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = ancestorIterable22.spliterator();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean34 = nodeIterableList33.add(nodeIterable7);
        boolean boolean35 = nodeIterableList33.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable22);
        boolean boolean36 = nodeIterableList33.add(nodeIterable32);
        java.lang.Object[] objArray37 = nodeIterableList33.toArray();
        java.lang.Object[] objArray38 = nodeIterableList33.toArray();
        boolean boolean39 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        int int40 = nodeIterableList0.size();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor41 = nodeIterableList0.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor41.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor41);
    }

    @Test
    public void test15901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15901");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean6 = jSDocInfoBuilder1.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        boolean boolean10 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("{1585015770}", 40, 30, 97, (int) ' ');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test15902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15902");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        int int21 = nodeIterableList20.size();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor22 = nodeIterableList20.iterator();
        boolean boolean23 = nodeIterableList20.isEmpty();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor24 = nodeIterableList20.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor24);
    }

    @Test
    public void test15903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15903");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>> jSTypeStaticScopeList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(jSTypeStaticScopeList0);
    }

    @Test
    public void test15904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15904");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean2 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry1.getTypesWithProperty("");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode7 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry6.setResolveMode(resolveMode7);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        boolean boolean11 = jSTypeRegistry6.canPropertyBeDefined(jSType9, "Unknown class name");
        jSTypeRegistry6.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry6.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType19, "");
        com.google.javascript.rhino.jstype.UnionType unionType22 = objectType19.toMaybeUnionType();
        boolean boolean23 = objectType19.matchesObjectContext();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        boolean boolean31 = jSTypeRegistry26.canPropertyBeDefined(jSType29, "Unknown class name");
        jSTypeRegistry26.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable44 = jSTypeRegistry35.getTypesWithProperty("hi!");
        jSTypeRegistry35.resetForTypeCheck();
        jSTypeRegistry35.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = objectType62.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] { objectType62 };
        com.google.javascript.rhino.Node node65 = jSTypeRegistry49.createParametersWithVarArgs(jSTypeArray64);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry35.createUnionType(jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry26.createOptionalParameters(jSTypeArray64);
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType19, false, jSTypeArray64);
        jSTypeRegistry1.forwardDeclareType("{(function ({1547043233}): {237450110},{1870712507},{108599123})}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + resolveMode7 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode7.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertNull(unionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable44);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(functionType68);
    }

    @Test
    public void test15905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15905");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType10 = jSTypeRegistry1.getType("[]");
        jSTypeRegistry1.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        boolean boolean19 = jSTypeRegistry14.canPropertyBeDefined(jSType17, "Unknown class name");
        jSTypeRegistry14.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry14.getType("[]");
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry25.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        boolean boolean36 = jSTypeRegistry31.canPropertyBeDefined(jSType34, "Unknown class name");
        jSTypeRegistry31.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry31.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        jSTypeRegistry42.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot52 = objectType49.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType60 = objectType59.toMaybeEnumElementType();
        boolean boolean61 = jSTypeRegistry31.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType59);
        com.google.javascript.rhino.jstype.JSType jSType63 = objectType49.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node64 = objectType49.getRootNode();
        boolean boolean65 = objectType49.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode68 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry67.setResolveMode(resolveMode68);
        com.google.javascript.rhino.jstype.ObjectType objectType70 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry67.createObjectType(objectType70);
        boolean boolean72 = objectType71.isNominalConstructor();
        boolean boolean73 = jSTypeRegistry25.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType71);
        boolean boolean74 = objectType71.isFunctionType();
        boolean boolean75 = objectType71.isBooleanObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode79 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry78.setResolveMode(resolveMode79);
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        boolean boolean83 = jSTypeRegistry78.canPropertyBeDefined(jSType81, "Unknown class name");
        jSTypeRegistry78.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter86 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry87 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter86);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode88 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry87.setResolveMode(resolveMode88);
        com.google.javascript.rhino.jstype.ObjectType objectType90 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType91 = jSTypeRegistry87.createObjectType(objectType90);
        com.google.javascript.rhino.jstype.ObjectType objectType92 = objectType91.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray93 = new com.google.javascript.rhino.jstype.JSType[] { objectType91 };
        com.google.javascript.rhino.Node node94 = jSTypeRegistry78.createParametersWithVarArgs(jSTypeArray93);
        com.google.javascript.rhino.jstype.FunctionType functionType95 = jSTypeRegistry14.createConstructorType((com.google.javascript.rhino.jstype.JSType) objectType71, false, jSTypeArray93);
        com.google.javascript.rhino.Node node96 = jSTypeRegistry1.createOptionalParameters(jSTypeArray93);
        boolean boolean97 = node96.isContinue();
        java.util.Set<java.lang.String> strSet98 = node96.getDirectives();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSType23);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNull(jSTypeStaticSlot52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNull(enumElementType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + resolveMode68 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode68.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + resolveMode79 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode79.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + resolveMode88 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode88.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(objectType92);
        org.junit.Assert.assertNotNull(jSTypeArray93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(functionType95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(strSet98);
    }

    @Test
    public void test15906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15906");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "{961225312}");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test15907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15907");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(40, "OR hi!\n    OR hi!\n", 16, 40);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(36, node5, (-1), (int) (byte) 1);
        boolean boolean9 = node5.isVarArgs();
        boolean boolean10 = node5.isDebugger();
        boolean boolean11 = node5.isAnd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node5.children();
        java.lang.String str13 = node5.toStringTree();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING OR hi!\n    OR hi!\n 16\n" + "'", str13, "STRING OR hi!\n    OR hi!\n 16\n");
    }

    @Test
    public void test15908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15908");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeRegistry1.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        jSTypeRegistry1.resetForTypeCheck();
        jSTypeRegistry1.setLastGeneration(false);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDec();
        boolean boolean21 = node14.isBlock();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        int int36 = strSet33.size();
        strSet33.clear();
        node14.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        boolean boolean45 = jSTypeRegistry40.canPropertyBeDefined(jSType43, "Unknown class name");
        jSTypeRegistry40.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry40.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType53, "");
        com.google.javascript.rhino.jstype.JSType jSType57 = objectType53.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean58 = objectType53.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType60 = objectType53.getRestrictedTypeGivenToBooleanOutcome(false);
        node14.setJSType((com.google.javascript.rhino.jstype.JSType) objectType53);
        boolean boolean62 = objectType53.matchesObjectContext();
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry1.createObjectType(objectType53);
        boolean boolean64 = objectType63.canBeCalled();
        org.junit.Assert.assertNotNull(jSType8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15909");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        boolean boolean39 = jSTypeRegistry34.canPropertyBeDefined(jSType37, "Unknown class name");
        jSTypeRegistry34.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry34.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        jSTypeRegistry45.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry48.createObjectType(objectType51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = objectType52.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot55 = objectType52.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType52);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType63 = objectType62.toMaybeEnumElementType();
        boolean boolean64 = jSTypeRegistry34.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType52, objectType62);
        com.google.javascript.rhino.jstype.JSType jSType66 = objectType52.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean67 = jSTypeRegistry1.declareType("Not declared as a constructor", (com.google.javascript.rhino.jstype.JSType) objectType52);
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        boolean boolean75 = jSTypeRegistry70.canPropertyBeDefined(jSType73, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode78 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry77.setResolveMode(resolveMode78);
        com.google.javascript.rhino.jstype.ObjectType objectType80 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType81 = jSTypeRegistry77.createObjectType(objectType80);
        com.google.javascript.rhino.jstype.ObjectType objectType82 = objectType81.toObjectType();
        boolean boolean83 = objectType82.matchesInt32Context();
        boolean boolean84 = objectType82.isStringValueType();
        boolean boolean85 = objectType82.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter86 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry87 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter86);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode88 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry87.setResolveMode(resolveMode88);
        com.google.javascript.rhino.jstype.ObjectType objectType90 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType91 = jSTypeRegistry87.createObjectType(objectType90);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair92 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType82, (com.google.javascript.rhino.jstype.JSType) objectType91);
        com.google.javascript.rhino.jstype.JSType jSType93 = jSTypeRegistry70.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType82);
        com.google.javascript.rhino.jstype.JSType jSType94 = jSTypeRegistry1.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType82);
        com.google.javascript.rhino.jstype.TemplateType templateType95 = objectType82.toMaybeTemplateType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNull(jSTypeStaticSlot55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNull(enumElementType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + resolveMode78 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode78.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + resolveMode88 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode88.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType91);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNull(templateType95);
    }

    @Test
    public void test15910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15910");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        node2.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        boolean boolean32 = node31.isDelProp();
        com.google.javascript.rhino.Node node33 = node31.getLastSibling();
        int int35 = node31.getIntProp(16);
        boolean boolean36 = node2.isEquivalentTo(node31);
        boolean boolean37 = node2.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15911");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        jSDocInfo0.setLicense("OR hi! [var_args_name: 1]");
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        boolean boolean13 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15912");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        boolean boolean12 = jSDocInfoBuilder1.recordExport();
        boolean boolean13 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test15913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15913");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isNE();
        java.lang.String str25 = node20.toString(true, false, false);
        boolean boolean26 = node20.isLocalResultCall();
        boolean boolean27 = node20.isBreak();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        boolean boolean38 = node33.isAdd();
        com.google.javascript.rhino.Node node39 = node33.cloneTree();
        node39.setSourceFileForTesting("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.Node node42 = node20.copyInformationFrom(node39);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR hi!" + "'", str25, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test15914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15914");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        boolean boolean43 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        boolean boolean44 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15915");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        java.lang.String str23 = node22.toStringTree();
        com.google.javascript.rhino.jstype.JSType jSType24 = node22.getJSType();
        boolean boolean25 = node22.isScript();
        node22.setCharno((int) (byte) 1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR hi!\n" + "'", str23, "OR hi!\n");
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15916");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        boolean boolean9 = strSet8.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strSet8.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test15917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15917");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.lang.String str81 = jSDocInfo22.getFileOverview();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test15918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15918");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.isTrue();
        com.google.javascript.rhino.Node node11 = node2.cloneNode();
        boolean boolean12 = node2.isAdd();
        int int14 = node2.getIntProp((int) (byte) 100);
        boolean boolean15 = node2.hasChildren();
        boolean boolean16 = node2.isInstanceOf();
        boolean boolean17 = node2.isDo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15919");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(4095, "STRING INSTANCEOF 50", 45, (int) (byte) 10);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        com.google.javascript.rhino.Node node7 = node4.copyInformationFrom(node6);
        boolean boolean8 = node4.isVar();
        boolean boolean9 = node4.isNew();
        node4.setCharno((int) (short) 1);
        boolean boolean12 = node4.isAssign();
        node4.setCharno(23);
        java.lang.Object obj16 = node4.getProp(8);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test15920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15920");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(31);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test15921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15921");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getStartLine();
        int int4 = typePosition0.getStartLine();
        boolean boolean5 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        int int7 = typePosition0.getEndLine();
        int int8 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test15922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15922");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isNE();
        boolean boolean8 = node6.isInstanceOf();
        boolean boolean9 = node6.isThrow();
        node6.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node6.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode15 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry14.setResolveMode(resolveMode15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        boolean boolean19 = jSTypeRegistry14.canPropertyBeDefined(jSType17, "Unknown class name");
        jSTypeRegistry14.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry14.createAnonymousObjectType();
        objectType22.clearResolved();
        node6.setJSType((com.google.javascript.rhino.jstype.JSType) objectType22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node34 = node27.getFirstChild();
        boolean boolean35 = node27.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType36 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType22, node27);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        boolean boolean43 = jSTypeRegistry38.canPropertyBeDefined(jSType41, "Unknown class name");
        jSTypeRegistry38.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = objectType51.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        boolean boolean59 = jSTypeRegistry54.canPropertyBeDefined(jSType57, "Unknown class name");
        jSTypeRegistry54.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry54.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType67, "");
        boolean boolean70 = jSType69.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = objectType52.testForEquality(jSType69);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSType69.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry38.createNullableType(jSType69);
        boolean boolean74 = functionType36.canAssignTo(jSType73);
        boolean boolean75 = functionType36.matchesNumberContext();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = functionType36.getPossibleToBooleanOutcomes();
        boolean boolean77 = functionType36.isNumber();
        boolean boolean78 = functionType36.isInstanceType();
        java.lang.String str79 = functionType36.getDisplayName();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertTrue("'" + resolveMode15 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode15.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(functionType36);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test15923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15923");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isExterns();
        boolean boolean17 = jSDocInfo15.hasReturnType();
        boolean boolean18 = jSDocInfo15.isOverride();
        jSDocInfo15.setLicense("hi!");
        boolean boolean21 = strSet11.contains((java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair24 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType22, jSType23);
        boolean boolean25 = strSet11.equals((java.lang.Object) jSType23);
        boolean boolean27 = strSet11.add("hi!");
        boolean boolean29 = strSet11.add("{75475336}");
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        boolean boolean36 = jSTypeRegistry31.canPropertyBeDefined(jSType34, "Unknown class name");
        jSTypeRegistry31.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry31.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType44, "");
        boolean boolean47 = jSType46.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry49.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType62, "");
        boolean boolean65 = jSType64.isInstanceType();
        boolean boolean66 = jSType64.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType67 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType68 = jSType64.dereference();
        boolean boolean69 = jSType64.isFunctionType();
        boolean boolean70 = jSType46.canTestForShallowEqualityWith(jSType64);
        boolean boolean71 = strSet11.contains((java.lang.Object) jSType46);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test15924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15924");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 38, 37);
        boolean boolean4 = node3.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        boolean boolean6 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15925");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        java.lang.Object obj49 = node47.getProp((int) (byte) 0);
        int int50 = node47.getChildCount();
        node35.addChildrenToFront(node47);
        node47.setSourceFileForTesting("Not declared as a constructor");
        boolean boolean54 = node47.isInstanceOf();
        boolean boolean55 = node47.isCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15926");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("{1517329911}");
        int int4 = stringPosition0.getPositionOnStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getPositionOnEndLine();
        int int7 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test15927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15927");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        node6.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        boolean boolean19 = node17.isDelProp();
        boolean boolean20 = node17.hasChildren();
        boolean boolean21 = node17.isOr();
        java.lang.String str22 = node6.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDebugger();
        boolean boolean33 = node26.isAssign();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(51, node26, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node36.getAncestors();
        com.google.javascript.rhino.Node node38 = node17.copyInformationFrom(node36);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node36, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node56.isNot();
        int int60 = node56.getLineno();
        com.google.javascript.rhino.Node node61 = node46.srcref(node56);
        boolean boolean62 = node61.isDelProp();
        com.google.javascript.rhino.Node node63 = node61.getLastSibling();
        com.google.javascript.rhino.Node node64 = node36.clonePropsFrom(node61);
        boolean boolean65 = node36.isNoSideEffectsCall();
        node3.addChildToFront(node36);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node36.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str22, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
    }

    @Test
    public void test15928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15928");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node5 = node4.cloneNode();
        boolean boolean6 = node5.isAssignAdd();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isBlock();
        boolean boolean9 = node5.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15929");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType19 = jSType16.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSType16.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType21 = objectType20.dereference();
        boolean boolean22 = objectType21.isStringObjectType();
        java.lang.String str23 = objectType21.toDebugHashCodeString();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        boolean boolean31 = objectType29.isTemplateType();
        boolean boolean32 = objectType29.isNoType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair33 = objectType21.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) objectType29);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "function (this:me, {1974242953}): me" + "'", str23, "function (this:me, {1974242953}): me");
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(typePair33);
    }

    @Test
    public void test15930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15930");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry23.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry33.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        jSTypeRegistry44.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = objectType51.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot54 = objectType51.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry44.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType62 = objectType61.toMaybeEnumElementType();
        boolean boolean63 = jSTypeRegistry33.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType51, objectType61);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry23.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType51);
        boolean boolean65 = nodeIterableList0.equals((java.lang.Object) jSTypeRegistry23);
        int int66 = nodeIterableList0.size();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList0.listIterator(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (6) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNull(jSTypeStaticSlot54);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNull(enumElementType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test15931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15931");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test15932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15932");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node11.siblings();
        node11.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        boolean boolean24 = node22.isDelProp();
        boolean boolean25 = node22.hasChildren();
        boolean boolean26 = node22.isOr();
        java.lang.String str27 = node11.checkTreeEquals(node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node43.isNot();
        int int47 = node43.getLineno();
        com.google.javascript.rhino.Node node48 = node33.srcref(node43);
        boolean boolean49 = node48.isDelProp();
        com.google.javascript.rhino.Node node50 = node48.getLastSibling();
        boolean boolean51 = node48.isOptionalArg();
        boolean boolean52 = node11.isEquivalentTo(node48);
        boolean boolean53 = strSet8.remove((java.lang.Object) node48);
        node48.setWasEmptyNode(true);
        java.lang.String str56 = node48.getString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str27, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
    }

    @Test
    public void test15933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15933");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.isTrue();
        com.google.javascript.rhino.Node node11 = node2.cloneNode();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isIf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node17.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node2.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node49 = node17.getParent();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable50 = node17.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(ancestorIterable50);
    }

    @Test
    public void test15934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15934");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isAssign();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(51, node14, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node25 = node24.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node24.children();
        com.google.javascript.rhino.Node node27 = node2.useSourceInfoIfMissingFrom(node24);
        boolean boolean28 = node2.isName();
        boolean boolean29 = node2.isStringKey();
        com.google.javascript.rhino.Node node30 = node2.cloneNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        node33.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node42 = node33.getLastChild();
        boolean boolean43 = node33.isCall();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node46.siblings();
        node46.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node55 = node46.getLastChild();
        boolean boolean56 = node46.isCall();
        com.google.javascript.rhino.Node node57 = node33.copyInformationFrom(node46);
        boolean boolean58 = node46.isGetElem();
        node46.setQuotedString();
        int int60 = node46.getType();
        node2.addChildrenToBack(node46);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node67.isNot();
        int int71 = node67.getLineno();
        boolean boolean72 = node67.isAdd();
        com.google.javascript.rhino.Node node73 = node67.cloneTree();
        com.google.javascript.rhino.Node node74 = node2.useSourceInfoFrom(node73);
        boolean boolean75 = node73.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test15935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15935");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry33.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType46, "");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = jSType48.getPossibleToBooleanOutcomes();
        boolean boolean50 = jSType48.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry1.getGreatestSubtypeWithProperty(jSType48, "{}");
        boolean boolean54 = jSTypeRegistry1.hasNamespace("java.io.IOException: java.io.IOException: Unknown class name");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15936");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isAssign();
        boolean boolean10 = node2.isBlock();
        int int12 = node2.getIntProp(30);
        boolean boolean13 = node2.isFalse();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        com.google.javascript.rhino.Node node24 = node17.getFirstChild();
        boolean boolean25 = node17.isNot();
        boolean boolean26 = node17.isIn();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node30.isDebugger();
        boolean boolean37 = node30.isAssign();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(51, node30, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node40.getAncestors();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(1, node17, node40, 54, 10);
        boolean boolean45 = node40.isArrayLit();
        java.util.Set<java.lang.String> strSet46 = node40.getDirectives();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node52.isNot();
        int int56 = node52.getLineno();
        boolean boolean57 = node52.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node52.setJSType(jSType58);
        boolean boolean60 = node52.isOptionalArg();
        java.util.Set<java.lang.String> strSet61 = node52.getDirectives();
        boolean boolean62 = node52.isHook();
        com.google.javascript.rhino.Node node63 = node40.useSourceInfoFrom(node52);
        node40.putBooleanProp(52, false);
        com.google.javascript.rhino.Node node67 = node2.clonePropsFrom(node40);
        boolean boolean68 = node67.isWhile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test15937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15937");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 23, 13, 131075);
        boolean boolean4 = node3.isTry();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray6 = nodeIterableList5.toArray();
        boolean boolean7 = nodeIterableList5.isEmpty();
        boolean boolean8 = nodeIterableList5.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor9 = nodeIterableList5.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList5.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList5.asList();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        jSTypeRegistry14.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = objectType21.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot24 = objectType21.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType21);
        boolean boolean26 = jSType25.hasDisplayName();
        jSType25.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean29 = jSType25.isEquivalentTo(jSType28);
        boolean boolean30 = nodeIterableList5.contains((java.lang.Object) boolean29);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node33 = node32.getLastChild();
        boolean boolean34 = node32.isNumber();
        boolean boolean35 = node32.isNull();
        boolean boolean36 = node32.isCall();
        node32.setVarArgs(false);
        boolean boolean39 = nodeIterableList5.contains((java.lang.Object) node32);
        com.google.javascript.rhino.Node node40 = node3.srcrefTree(node32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor9);
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNull(jSTypeStaticSlot24);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test15938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15938");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        boolean boolean15 = node14.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean26 = node21.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node27 = node21.cloneNode();
        com.google.javascript.rhino.InputId inputId28 = node21.getInputId();
        boolean boolean29 = node14.hasChild(node21);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isVoid();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isTypeOf();
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node42);
        com.google.javascript.rhino.Node node45 = node32.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        node45.setStaticSourceFile(staticSourceFile46);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry49.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean58 = node53.isEquivalentToTyped(node57);
        com.google.javascript.rhino.Node node59 = node53.cloneNode();
        boolean boolean60 = node53.isEmpty();
        com.google.javascript.rhino.Node node61 = node45.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry63.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean72 = node67.isEquivalentToTyped(node71);
        com.google.javascript.rhino.Node node73 = node67.cloneNode();
        java.lang.Object obj75 = node67.getProp((int) (short) 1);
        com.google.javascript.rhino.Node node76 = node53.useSourceInfoFrom(node67);
        java.lang.String str77 = node14.checkTreeEquals(node67);
        boolean boolean78 = node14.isDo();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node81.isDec();
        boolean boolean88 = node81.isString();
        boolean boolean89 = node81.isSwitch();
        node81.setIsSyntheticBlock(false);
        boolean boolean92 = node81.isContinue();
        boolean boolean93 = node81.isLabelName();
        node81.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node96 = node14.clonePropsFrom(node81);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n" + "'", str77, "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test15939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15939");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.wasEmptyNode();
        com.google.javascript.rhino.Node node5 = node2.getFirstChild();
        boolean boolean6 = node2.isArrayLit();
        boolean boolean7 = node2.isLocalResultCall();
        boolean boolean8 = node2.isGetProp();
        node2.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15940");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(40);
        java.lang.String str2 = node1.getQualifiedName();
        boolean boolean3 = node1.isLabelName();
        boolean boolean4 = node1.hasMoreThanOneChild();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.isFor();
        boolean boolean7 = node1.isTry();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        boolean boolean16 = node13.isNot();
        int int17 = node13.getLineno();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node28 = node13.srcref(node23);
        boolean boolean29 = node13.isString();
        boolean boolean30 = node13.isTry();
        boolean boolean31 = node13.isHook();
        boolean boolean32 = node13.isFromExterns();
        java.lang.String str33 = node13.toStringTree();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordInterface();
        boolean boolean37 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordIdGenerator();
        boolean boolean40 = jSDocInfoBuilder35.recordLends("None");
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.isExterns();
        int int43 = jSDocInfo41.getParameterCount();
        boolean boolean44 = jSDocInfo41.isIdGenerator();
        boolean boolean45 = jSDocInfo41.isInterface();
        boolean boolean46 = jSDocInfo41.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo41.getThrownTypes();
        java.lang.String str48 = jSDocInfo41.getLendsName();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo41.getParameterNames();
        boolean boolean50 = jSDocInfoBuilder35.recordSuppressions(strSet49);
        node13.setDirectives(strSet49);
        com.google.javascript.rhino.Node node52 = node1.useSourceInfoIfMissingFrom(node13);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR hi!\n" + "'", str33, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test15941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15941");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        boolean boolean34 = node2.isTrue();
        boolean boolean35 = node2.isCase();
        boolean boolean36 = node2.isNumber();
        node2.setQuotedString();
        node2.putBooleanProp(16, false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15942");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter2 = jSTypeRegistry1.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        boolean boolean9 = jSTypeRegistry4.canPropertyBeDefined(jSType7, "Unknown class name");
        jSTypeRegistry4.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType17, "");
        com.google.javascript.rhino.jstype.JSType jSType21 = objectType17.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType21.clearResolved();
        boolean boolean23 = jSType21.matchesUint32Context();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node39.isNot();
        int int43 = node39.getLineno();
        com.google.javascript.rhino.Node node44 = node29.srcref(node39);
        boolean boolean45 = node39.isComma();
        node39.setVarArgs(true);
        boolean boolean48 = node39.isThrow();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = objectType54.toObjectType();
        boolean boolean56 = objectType55.matchesInt32Context();
        boolean boolean57 = objectType55.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType58 = objectType55.collapseUnion();
        node39.setJSType((com.google.javascript.rhino.jstype.JSType) objectType55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node62.siblings();
        node62.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node62.getJsDocBuilderForNode();
        node62.setQuotedString();
        com.google.javascript.rhino.Node node73 = node39.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean74 = node39.isGetterDef();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry1.createFunctionType(jSType21, node39);
        jSTypeRegistry1.forwardDeclareType("java.io.IOException: None");
        org.junit.Assert.assertNull(errorReporter2);
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(functionType75);
    }

    @Test
    public void test15943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15943");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node6.isAdd();
        boolean boolean10 = node6.isAnd();
        typePosition0.setItem(node6);
        boolean boolean12 = node6.hasOneChild();
        com.google.javascript.rhino.Node node13 = node6.detachFromParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node19.isNot();
        int int23 = node19.getLineno();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        com.google.javascript.rhino.Node node34 = node19.srcref(node29);
        boolean boolean35 = node34.isDelProp();
        com.google.javascript.rhino.Node node36 = node34.getLastSibling();
        boolean boolean37 = node36.isFunction();
        boolean boolean38 = node36.isComma();
        java.lang.String str42 = node36.toString(false, true, false);
        com.google.javascript.rhino.Node node43 = node36.removeFirstChild();
        int int44 = node6.getIndexOfChild(node36);
        node36.setIsSyntheticBlock(true);
        int int47 = node36.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!" + "'", str42, "OR hi!");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test15944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15944");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 44, 47, 200716);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15945");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        boolean boolean39 = jSTypeRegistry34.canPropertyBeDefined(jSType37, "Unknown class name");
        jSTypeRegistry34.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry34.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        jSTypeRegistry45.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode49 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry48.setResolveMode(resolveMode49);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry48.createObjectType(objectType51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = objectType52.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot55 = objectType52.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType52);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType63 = objectType62.toMaybeEnumElementType();
        boolean boolean64 = jSTypeRegistry34.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType52, objectType62);
        com.google.javascript.rhino.jstype.JSType jSType66 = objectType52.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean67 = jSTypeRegistry1.declareType("Not declared as a constructor", (com.google.javascript.rhino.jstype.JSType) objectType52);
        jSTypeRegistry1.incrementGeneration();
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry1.createObjectType(objectType69);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        boolean boolean77 = jSTypeRegistry72.canPropertyBeDefined(jSType75, "Unknown class name");
        jSTypeRegistry72.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry72.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType85, "");
        com.google.javascript.rhino.jstype.JSType jSType89 = objectType85.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean90 = jSType89.isUnionType();
        boolean boolean92 = jSTypeRegistry1.canPropertyBeDefined(jSType89, "{1559619413}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable94 = jSTypeRegistry1.getEachReferenceTypeWithProperty("{1559619413}");
        jSTypeRegistry1.resetForTypeCheck();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + resolveMode49 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode49.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNull(jSTypeStaticSlot55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNull(enumElementType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable94);
    }

    @Test
    public void test15946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15946");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node2 = node1.getLastChild();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        boolean boolean11 = node5.isDebugger();
        com.google.javascript.rhino.Node node12 = node5.getFirstChild();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFrom(node12);
        node1.setSourceEncodedPositionForTree(5);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        boolean boolean26 = node21.isAdd();
        com.google.javascript.rhino.Node node27 = node21.cloneTree();
        java.lang.Object obj29 = node27.getProp((int) (byte) 0);
        node1.addChildrenToFront(node27);
        boolean boolean31 = node1.isTry();
        java.lang.String str35 = node1.toString(false, true, false);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        node38.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node52.isNot();
        int int56 = node52.getLineno();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        com.google.javascript.rhino.Node node67 = node52.srcref(node62);
        int int68 = node52.getCharno();
        com.google.javascript.rhino.Node node69 = node38.copyInformationFrom(node52);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node75 = node74.cloneNode();
        boolean boolean76 = node75.isAssignAdd();
        int int77 = node38.getIndexOfChild(node75);
        node75.setLength((int) (byte) 100);
        boolean boolean80 = node75.isIn();
        com.google.javascript.rhino.Node node81 = node1.copyInformationFrom(node75);
        boolean boolean82 = node75.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 100.0" + "'", str35, "NUMBER 100.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test15947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15947");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        objectType18.clearResolved();
        node2.setJSType((com.google.javascript.rhino.jstype.JSType) objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = node2.getJSType();
        java.lang.String str22 = jSType21.toString();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSType21.collapseUnion();
        boolean boolean24 = jSType21.isNullType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15948");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node11 = node2.getLastChild();
        java.lang.String str12 = node11.getString();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node18.isNot();
        int int22 = node18.getLineno();
        boolean boolean23 = node18.isAdd();
        com.google.javascript.rhino.Node node24 = node18.cloneTree();
        com.google.javascript.rhino.Node node25 = node11.clonePropsFrom(node18);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry27.createObjectType(objectType30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = objectType31.toObjectType();
        boolean boolean33 = objectType32.matchesInt32Context();
        com.google.javascript.rhino.jstype.JSType jSType34 = objectType32.autobox();
        node25.setJSType((com.google.javascript.rhino.jstype.JSType) objectType32);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        boolean boolean42 = jSTypeRegistry37.canPropertyBeDefined(jSType40, "Unknown class name");
        jSTypeRegistry37.identifyNonNullableName("Unknown class name");
        jSTypeRegistry37.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = objectType51.toObjectType();
        boolean boolean53 = objectType52.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope54 = objectType52.getParentScope();
        boolean boolean56 = jSTypeRegistry37.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType52, "INSTANCEOF");
        boolean boolean57 = objectType52.isArrayType();
        boolean boolean58 = objectType52.isArrayType();
        boolean boolean59 = objectType52.matchesNumberContext();
        boolean boolean60 = objectType32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType52);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = objectType66.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode70 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry69.setResolveMode(resolveMode70);
        com.google.javascript.rhino.jstype.JSType jSType72 = null;
        boolean boolean74 = jSTypeRegistry69.canPropertyBeDefined(jSType72, "Unknown class name");
        jSTypeRegistry69.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode79 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry78.setResolveMode(resolveMode79);
        com.google.javascript.rhino.jstype.ObjectType objectType81 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType82 = jSTypeRegistry78.createObjectType(objectType81);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry69.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType82, "");
        boolean boolean85 = jSType84.isInstanceType();
        boolean boolean86 = jSType84.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSType84.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = jSType84.dereference();
        boolean boolean89 = jSType84.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair90 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType67, jSType84);
        boolean boolean91 = objectType67.isNominalType();
        boolean boolean92 = objectType67.isTemplateType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = objectType67.getPossibleToBooleanOutcomes();
        boolean boolean94 = objectType52.canAssignTo((com.google.javascript.rhino.jstype.JSType) objectType67);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + resolveMode70 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode70.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + resolveMode79 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode79.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test15949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15949");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        jSDocInfo0.setLicense("JSDocInfo");
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15950");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        jSTypeRegistry21.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType38.toMaybeEnumElementType();
        boolean boolean40 = jSTypeRegistry10.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType28, objectType38);
        com.google.javascript.rhino.jstype.JSType jSType42 = objectType28.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node43 = objectType28.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isNE();
        boolean boolean52 = node50.isInstanceOf();
        boolean boolean53 = node50.isThrow();
        node50.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable56 = node50.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        boolean boolean63 = jSTypeRegistry58.canPropertyBeDefined(jSType61, "Unknown class name");
        jSTypeRegistry58.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry58.createAnonymousObjectType();
        objectType66.clearResolved();
        node50.setJSType((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node71.isDebugger();
        com.google.javascript.rhino.Node node78 = node71.getFirstChild();
        boolean boolean79 = node71.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry45.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType66, node71);
        com.google.javascript.rhino.jstype.JSType jSType82 = functionType80.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair83 = objectType28.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) functionType80);
        jSTypeRegistry1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType80);
        boolean boolean85 = functionType80.matchesStringContext();
        boolean boolean86 = functionType80.isEnumElementType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNotNull(typePair83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test15951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15951");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        boolean boolean5 = jSDocInfo0.isExterns();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isExterns();
        int int10 = jSDocInfo8.getParameterCount();
        boolean boolean11 = jSDocInfo8.isIdGenerator();
        boolean boolean12 = jSDocInfo8.isInterface();
        boolean boolean13 = jSDocInfo8.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.isExport();
        java.lang.String str19 = jSDocInfo14.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getType();
        java.lang.String str21 = jSDocInfo14.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo14.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        boolean boolean25 = jSDocInfo23.hasModifies();
        boolean boolean26 = jSDocInfo23.isIdGenerator();
        boolean boolean27 = jSDocInfo23.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getType();
        boolean boolean29 = jSDocInfo23.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.containsDeclaration();
        java.lang.String str33 = jSDocInfo30.getSourceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo34.getType();
        boolean boolean37 = jSDocInfo34.isImplicitCast();
        boolean boolean38 = jSDocInfo34.isExport();
        boolean boolean39 = jSDocInfo34.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo34.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection41 = jSDocInfo34.getMarkers();
        boolean boolean42 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo43.getSuppressions();
        boolean boolean45 = jSDocInfo43.isNoSideEffects();
        boolean boolean46 = jSDocInfo43.isConsistentIdGenerator();
        boolean boolean48 = jSDocInfo43.hasParameter("OR hi!\n");
        boolean boolean49 = jSDocInfo43.hasType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = jSDocInfo50.isNoSideEffects();
        boolean boolean54 = jSDocInfo50.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str55 = jSDocInfo50.getVersion();
        jSDocInfo50.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo50.getTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo59.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList63 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo8, jSDocInfo14, jSDocInfo23, jSDocInfo30, jSDocInfo34, jSDocInfo43, jSDocInfo50, jSDocInfo59);
        java.lang.String str64 = jSDocInfo34.getLicense();
        boolean boolean65 = jSDocInfo34.isNoCompile();
        boolean boolean67 = jSDocInfo34.hasParameter("java.io.IOException: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo34.getBaseType();
        boolean boolean70 = jSDocInfo34.hasParameter("{1676259869}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(markerCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(jSDocInfoList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test15952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15952");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        int int5 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test15953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15953");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isAssign();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, node17, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node28 = node5.srcrefTree(node27);
        boolean boolean29 = node28.isBreak();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        boolean boolean40 = node35.isAdd();
        node35.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean43 = node35.isDec();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isAssign();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(51, node47, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node58 = node35.srcrefTree(node57);
        int int59 = node58.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node58.children();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        boolean boolean69 = node63.isDebugger();
        boolean boolean70 = node63.isVoid();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isTypeOf();
        com.google.javascript.rhino.Node node75 = node63.srcrefTree(node73);
        boolean boolean76 = node75.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry78.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean87 = node82.isEquivalentToTyped(node86);
        com.google.javascript.rhino.Node node88 = node82.cloneNode();
        com.google.javascript.rhino.InputId inputId89 = node82.getInputId();
        boolean boolean90 = node75.hasChild(node82);
        boolean boolean91 = node82.isWhile();
        com.google.javascript.rhino.Node node92 = node58.clonePropsFrom(node82);
        com.google.javascript.rhino.Node node93 = node28.useSourceInfoFrom(node58);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(inputId89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test15954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15954");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream20 = nodeIterableList14.parallelStream();
        boolean boolean21 = nodeIterableList14.isEmpty();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(53, "{1592333498}", (int) (byte) 0, 10);
        boolean boolean27 = nodeIterableList14.equals((java.lang.Object) node26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = nodeIterableList14.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (1) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isExport();
        jSDocInfo0.setDeprecated(false);
        boolean boolean8 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15956");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry11.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair16 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType6, (com.google.javascript.rhino.jstype.JSType) objectType15);
        com.google.javascript.rhino.jstype.JSType jSType17 = objectType15.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        boolean boolean24 = jSTypeRegistry19.canPropertyBeDefined(jSType22, "Unknown class name");
        jSTypeRegistry19.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry19.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        jSTypeRegistry30.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = objectType37.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot40 = objectType37.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry30.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType37);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = objectType47.toMaybeEnumElementType();
        boolean boolean49 = jSTypeRegistry19.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType37, objectType47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = objectType47.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = objectType56.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode60 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry59.setResolveMode(resolveMode60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        boolean boolean64 = jSTypeRegistry59.canPropertyBeDefined(jSType62, "Unknown class name");
        jSTypeRegistry59.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry59.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType72, "");
        boolean boolean75 = jSType74.isInstanceType();
        boolean boolean76 = jSType74.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType74.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSType74.dereference();
        boolean boolean79 = jSType74.isFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType57, jSType74);
        boolean boolean81 = jSType74.isEnumType();
        boolean boolean82 = objectType47.isSubtype(jSType74);
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType47.autobox();
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType17.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType47);
        boolean boolean85 = objectType47.isGlobalThisType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(jSType17);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(jSTypeStaticSlot40);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + resolveMode60 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode60.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15957");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = nodeIterableList0.contains((java.lang.Object) boolean43);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream45 = nodeIterableList0.parallelStream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        boolean boolean49 = nodeIterableList47.isEmpty();
        boolean boolean50 = nodeIterableList47.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor51 = nodeIterableList47.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean55 = jSDocInfoBuilder53.recordPreserveTry();
        boolean boolean56 = nodeIterableList47.equals((java.lang.Object) boolean55);
        java.util.stream.Stream[] streamArray58 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray59 = (java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray58;
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray60 = nodeIterableList47.toArray((java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray58);
        java.util.stream.BaseStream<java.lang.Iterable<com.google.javascript.rhino.Node>, java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>>[] nodeIterableBaseStreamArray61 = nodeIterableList0.toArray((java.util.stream.BaseStream<java.lang.Iterable<com.google.javascript.rhino.Node>, java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>>[]) nodeIterableStreamArray60);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableStream45);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(streamArray58);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray59);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray60);
        org.junit.Assert.assertNotNull(nodeIterableBaseStreamArray61);
    }

    @Test
    public void test15958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15958");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor3 = nodeIterableList0.iterator();
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.replaceAll(nodeIterableUnaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableItor3);
    }

    @Test
    public void test15959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15959");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = nodeIterableList63.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList63.reverse();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList65.listIterator();
        boolean boolean67 = nodeIterableItor66.hasNext();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15960");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test15961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15961");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node4.isDebugger();
        boolean boolean11 = node4.isVoid();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isTypeOf();
        com.google.javascript.rhino.Node node16 = node4.srcrefTree(node14);
        boolean boolean17 = node16.isObjectLit();
        boolean boolean18 = node16.isExprResult();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoIfMissingFrom(node16);
        boolean boolean20 = node1.isBlock();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        node23.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node32 = node23.getLastChild();
        boolean boolean33 = node23.isCall();
        boolean boolean34 = node1.isEquivalentToTyped(node23);
        boolean boolean35 = node23.isOr();
        boolean boolean36 = node23.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15962");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression2);
        boolean boolean6 = jSDocInfoBuilder1.recordParameterDescription("Not declared as a constructor", "java.io.IOException: OR hi!\n    OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("{651460268}", "{}");
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("{389486283}", (int) (short) 100, (int) '4', 43, (int) (short) 1);
        boolean boolean18 = jSDocInfoBuilder1.recordDeprecationReason("{1372493866}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test15963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15963");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean15 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        boolean boolean26 = node21.isAdd();
        com.google.javascript.rhino.Node node27 = node21.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node27.setJSType(jSType28);
        boolean boolean30 = node27.isString();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        boolean boolean48 = strSet42.isEmpty();
        node27.setDirectives((java.util.Set<java.lang.String>) strSet42);
        boolean boolean50 = node27.isObjectLit();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node27, "Named type with empty name component");
        boolean boolean53 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 100, (-2147483648), 53);
        boolean boolean58 = node57.isLabelName();
        jSDocInfoBuilder1.markTypeNode(node57, 48, (int) (short) 10, (-1), 10, true);
        boolean boolean65 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean66 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test15964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15964");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        jSTypeRegistry21.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType38.toMaybeEnumElementType();
        boolean boolean40 = jSTypeRegistry10.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType28, objectType38);
        boolean boolean42 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType28, "OR hi! [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordInterface();
        boolean boolean47 = jSDocInfoBuilder44.recordDescription("hi!");
        boolean boolean48 = jSDocInfoBuilder44.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder44.recordConstancy();
        boolean boolean52 = jSDocInfoBuilder44.recordOverride();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "None", "{1078264502}", "OR hi! [directives: []]\n", "{1078264502}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        boolean boolean65 = jSDocInfoBuilder44.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean68 = jSTypeRegistry1.isForwardDeclaredType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry70.createObjectType(objectType73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = objectType74.toObjectType();
        boolean boolean76 = objectType75.matchesInt32Context();
        boolean boolean77 = objectType75.isStringValueType();
        boolean boolean78 = objectType75.canBeCalled();
        boolean boolean79 = objectType75.isAllType();
        boolean boolean80 = objectType75.isStringObjectType();
        com.google.javascript.rhino.jstype.JSType jSType82 = objectType75.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot84 = objectType75.getSlot("OR hi! [var_args_name: 1]");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType85 = objectType75.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType90 = jSTypeRegistry1.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) parameterizedType85, "undefined", "Unknown class name", 200716, 43);
        jSTypeRegistry1.resetForTypeCheck();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(jSTypeStaticSlot84);
        org.junit.Assert.assertNull(parameterizedType85);
        org.junit.Assert.assertNotNull(jSType90);
    }

    @Test
    public void test15965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15965");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSType33.autobox();
        com.google.javascript.rhino.jstype.JSType jSType36 = jSType34.findPropertyType("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        boolean boolean37 = jSType34.matchesUint32Context();
        com.google.javascript.rhino.jstype.JSType jSType39 = jSType34.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSType39.collapseUnion();
        boolean boolean41 = jSType39.isRecordType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15966");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.lang.Object[] objArray25 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.reverse();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Object[] objArray76 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList66, 52, node73 };
        java.lang.Object[][] objArray77 = new java.lang.Object[][] { objArray44, objArray60, objArray76 };
        java.lang.Object[][] objArray78 = nodeIterableList28.toArray(objArray77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        int int82 = nodeIterableList79.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray83 = nodeIterableList79.toArray();
        boolean boolean84 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>> nodeIterableListList85 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList0, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23, (java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
        boolean boolean86 = nodeIterableList23.isEmpty();
        boolean boolean88 = nodeIterableList23.equals((java.lang.Object) 8202);
        java.lang.Object[] objArray89 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList90 = nodeIterableList23.asList();
        boolean boolean91 = nodeIterableList90.isEmpty();
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString(13, "OR hi! [source_file: ]", 5, 11);
        int int97 = nodeIterableList90.lastIndexOf((java.lang.Object) "OR hi! [source_file: ]");
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeIterableListList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test15967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15967");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test15968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15968");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSType23.collapseUnion();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        boolean boolean33 = jSTypeRegistry28.canPropertyBeDefined(jSType31, "Unknown class name");
        jSTypeRegistry28.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry28.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType41, "");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = jSType43.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType23.getGreatestSubtype(jSType43);
        boolean boolean46 = jSType45.hasAnyTemplate();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test15969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15969");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        boolean boolean12 = node11.isQuotedString();
        boolean boolean13 = node11.isCatch();
        boolean boolean14 = node11.isCall();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15970");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        boolean boolean43 = jSType42.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = objectType25.testForEquality(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType42.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry11.createNullableType(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createOptionalType(jSType46);
        boolean boolean48 = jSType46.matchesInt32Context();
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSType46.dereference();
        boolean boolean50 = objectType49.isNominalConstructor();
        boolean boolean51 = objectType49.isTemplateType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test15971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15971");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDebugger();
        node7.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isNot();
        int int35 = node31.getLineno();
        com.google.javascript.rhino.Node node36 = node21.srcref(node31);
        int int37 = node21.getCharno();
        com.google.javascript.rhino.Node node38 = node7.copyInformationFrom(node21);
        boolean boolean39 = node7.isTrue();
        boolean boolean40 = node7.isCase();
        boolean boolean41 = node7.isObjectLit();
        com.google.javascript.rhino.Node node42 = node2.srcrefTree(node7);
        boolean boolean43 = node2.isNull();
        boolean boolean44 = node2.isBreak();
        boolean boolean45 = node2.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15972");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isDebugger();
        com.google.javascript.rhino.InputId inputId6 = new com.google.javascript.rhino.InputId("");
        java.lang.String str7 = inputId6.getIdName();
        node3.setInputId(inputId6);
        boolean boolean9 = node3.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        boolean boolean14 = node12.isDelProp();
        int int15 = node12.getChildCount();
        boolean boolean16 = node12.isComma();
        boolean boolean17 = node12.isNoSideEffectsCall();
        boolean boolean18 = node12.isSetterDef();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node24 = node23.cloneNode();
        com.google.javascript.rhino.Node node25 = node24.removeChildren();
        com.google.javascript.rhino.Node node26 = node12.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node27 = node3.useSourceInfoFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(39, node24, 54, 1);
        com.google.javascript.rhino.Node node31 = node30.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test15973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15973");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        boolean boolean12 = node5.isEmpty();
        int int13 = node5.getLineno();
        node5.setSourceEncodedPosition(96);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test15974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15974");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node7.isNot();
        int int11 = node7.getLineno();
        boolean boolean12 = node7.isAdd();
        com.google.javascript.rhino.Node node13 = node7.cloneTree();
        java.lang.String str14 = node13.toStringTree();
        boolean boolean15 = node13.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node13.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(40);
        boolean boolean19 = node18.isReturn();
        com.google.javascript.rhino.InputId inputId21 = new com.google.javascript.rhino.InputId("");
        java.lang.String str22 = inputId21.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        boolean boolean29 = objectType28.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = objectType35.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair37 = objectType28.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType35);
        com.google.javascript.rhino.jstype.JSType jSType38 = objectType28.collapseUnion();
        boolean boolean39 = inputId21.equals((java.lang.Object) objectType28);
        node18.setInputId(inputId21);
        boolean boolean41 = node18.isExprResult();
        com.google.javascript.rhino.Node node42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(51, node1, node13, node18, node42, 29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR hi!\n" + "'", str14, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "InputId: " + "'", str22, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(typePair37);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15975");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 10);
        boolean boolean2 = node1.isBlock();
        boolean boolean3 = node1.isTypeOf();
        double double4 = node1.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNull(jSDocInfo5);
    }

    @Test
    public void test15976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15976");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.hasChildren();
        boolean boolean6 = node2.isStringKey();
        com.google.javascript.rhino.Node node7 = node2.getLastSibling();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test15977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15977");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder16.recordReturnType(jSTypeExpression24);
        boolean boolean27 = jSDocInfoBuilder16.recordDeprecationReason("Not declared as a constructor");
        boolean boolean28 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.addAuthor("");
        boolean boolean41 = jSDocInfoBuilder38.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder38.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        jSDocInfoBuilder38.markName("", staticSourceFile46, 29, 50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node52.isDebugger();
        boolean boolean59 = node52.isSyntheticBlock();
        boolean boolean60 = node52.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = new com.google.javascript.rhino.JSTypeExpression(node52, "Unknown class name");
        boolean boolean64 = jSDocInfoBuilder38.recordThrowDescription(jSTypeExpression62, "?");
        boolean boolean65 = jSDocInfoBuilder30.recordExtendedInterface(jSTypeExpression62);
        boolean boolean66 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression62);
        boolean boolean67 = jSTypeExpression62.isVarArgs();
        boolean boolean68 = jSDocInfoBuilder1.recordThisType(jSTypeExpression62);
        boolean boolean69 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test15978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15978");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isTypeOf();
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node21);
        int int24 = node2.getIndexOfChild(node21);
        boolean boolean25 = node21.isArrayLit();
        com.google.javascript.rhino.Node node26 = node21.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node26.getJsDocBuilderForNode();
        boolean boolean28 = node26.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15979");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("java.io.IOException: None");
        java.lang.String str2 = inputId1.getIdName();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean5 = jSDocInfoBuilder4.recordInterface();
        boolean boolean7 = jSDocInfoBuilder4.recordDescription("hi!");
        boolean boolean8 = jSDocInfoBuilder4.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder4.recordThrowType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder4.recordConstancy();
        boolean boolean12 = jSDocInfoBuilder4.recordOverride();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "None", "{1078264502}", "OR hi! [directives: []]\n", "{1078264502}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        boolean boolean25 = jSDocInfoBuilder4.recordTemplateTypeNames((java.util.List<java.lang.String>) strList23);
        boolean boolean26 = jSDocInfoBuilder4.isDescriptionRecorded();
        boolean boolean27 = jSDocInfoBuilder4.isConstructorRecorded();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isExport();
        boolean boolean41 = jSDocInfo36.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo36.getReturnType();
        boolean boolean43 = jSDocInfo36.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        jSDocInfo36.setVisibility(visibility45);
        jSDocInfo33.setVisibility(visibility45);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        boolean boolean50 = jSDocInfoBuilder4.recordVisibility(visibility45);
        boolean boolean51 = inputId1.equals((java.lang.Object) jSDocInfoBuilder4);
        boolean boolean53 = jSDocInfoBuilder4.recordDeprecationReason("{786562581}");
        boolean boolean54 = jSDocInfoBuilder4.isPopulatedWithFileOverview();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: None" + "'", str2, "java.io.IOException: None");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15980");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isCatch();
        boolean boolean12 = node5.getBooleanProp((int) '#');
        boolean boolean13 = node5.isAssignAdd();
        boolean boolean14 = node5.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15981");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(50);
        int int2 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
    }

    @Test
    public void test15982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15982");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        boolean boolean22 = node17.isAdd();
        boolean boolean23 = node11.hasChild(node17);
        boolean boolean24 = node17.isDefaultCase();
        int int25 = node17.getSourcePosition();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = node17.copyInformationFromForTree(node28);
        java.lang.Object obj33 = null;
        node17.putProp(3, obj33);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDec();
        boolean boolean44 = node37.isBlock();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node47.siblings();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet56);
        int int59 = strSet56.size();
        strSet56.clear();
        node37.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean62 = node37.isCase();
        com.google.javascript.rhino.Node node63 = node17.clonePropsFrom(node37);
        boolean boolean64 = node63.isContinue();
        boolean boolean65 = node63.isParamList();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        boolean boolean74 = node71.isCatch();
        com.google.javascript.rhino.Node node75 = node63.useSourceInfoIfMissingFromForTree(node71);
        boolean boolean76 = node71.isSetterDef();
        node71.putBooleanProp(45, true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test15983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15983");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 38, 37);
        boolean boolean4 = node3.isGetElem();
        node3.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15984");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        boolean boolean45 = nodeIterableList13.equals((java.lang.Object) nodeIterableList23);
        boolean boolean46 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        boolean boolean48 = nodeIterableList47.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator49 = nodeIterableList47.spliterator();
        boolean boolean50 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList47);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = nodeIterableList51.reverse();
        boolean boolean54 = nodeIterableList51.isEmpty();
        boolean boolean55 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility58);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility58);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        boolean boolean63 = nodeIterableList51.contains((java.lang.Object) visibility61);
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        boolean boolean70 = jSTypeRegistry65.canPropertyBeDefined(jSType68, "Unknown class name");
        jSTypeRegistry65.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode75 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry74.setResolveMode(resolveMode75);
        com.google.javascript.rhino.jstype.ObjectType objectType77 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry74.createObjectType(objectType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry65.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType78, "");
        com.google.javascript.rhino.jstype.JSType jSType82 = objectType78.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean83 = jSType82.isUnionType();
        boolean boolean84 = nodeIterableList51.equals((java.lang.Object) jSType82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = nodeIterableList51.remove(50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + resolveMode75 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode75.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test15985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15985");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isSetterDef();
        boolean boolean24 = node22.isAnd();
        java.lang.Object obj26 = node22.getProp(49);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node42.isNot();
        int int46 = node42.getLineno();
        com.google.javascript.rhino.Node node47 = node32.srcref(node42);
        boolean boolean48 = node32.isString();
        boolean boolean49 = node32.isRegExp();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node53.isDebugger();
        boolean boolean60 = node53.isVoid();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isTypeOf();
        com.google.javascript.rhino.Node node65 = node53.srcrefTree(node63);
        com.google.javascript.rhino.Node node66 = node53.getLastSibling();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node69.isDebugger();
        com.google.javascript.rhino.Node node76 = node69.getFirstChild();
        boolean boolean77 = node53.hasChild(node76);
        typePosition50.setItem(node76);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node81.isDebugger();
        com.google.javascript.rhino.Node node88 = node81.getFirstChild();
        boolean boolean89 = node81.isNot();
        typePosition50.setItem(node81);
        java.lang.String str91 = node81.getString();
        boolean boolean92 = node81.isContinue();
        boolean boolean93 = node81.isSyntheticBlock();
        boolean boolean94 = node32.hasChild(node81);
        boolean boolean95 = node32.isLabel();
        boolean boolean96 = node22.hasChild(node32);
        boolean boolean97 = node32.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test15986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15986");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray13 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility11 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray13);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder15.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo18.getVisibility();
        boolean boolean22 = jSDocInfo18.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo18.setVisibility(visibility23);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray25 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility23 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList34 = visibilityEnumBuilder33.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection35 = visibilityEnumBuilder33.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean39 = jSDocInfoBuilder37.recordVisibility(visibility38);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility38);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean46 = jSDocInfoBuilder44.recordVisibility(visibility45);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder47.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility48);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder50.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility51);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray53 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility41, visibility42, visibility45, visibility48, visibility51 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList54 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray53);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray53);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray53);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList58 = visibilityEnumBuilder57.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo59.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = jSDocInfo59.getVisibility();
        boolean boolean63 = jSDocInfo59.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo59.setVisibility(visibility64);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility64);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility64);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection68 = visibilityEnumBuilder67.build();
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray69 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray69);
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray13);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(visibility21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray25);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertNotNull(visibilityEnumList34);
        org.junit.Assert.assertNotNull(visibilityEnumCollection35);
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(visibilityArray53);
        org.junit.Assert.assertNotNull(visibilityEnumList54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertNotNull(visibilityEnumList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertNull(visibility62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + visibility64 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility64.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder66);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertNotNull(visibilityEnumCollection68);
        org.junit.Assert.assertNotNull(visibilityArray69);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
    }

    @Test
    public void test15987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15987");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        boolean boolean15 = node14.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean26 = node21.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node27 = node21.cloneNode();
        com.google.javascript.rhino.InputId inputId28 = node21.getInputId();
        boolean boolean29 = node14.hasChild(node21);
        node21.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15988");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.isOverride();
        java.lang.String str11 = jSDocInfo0.getVersion();
        boolean boolean12 = jSDocInfo0.isConstructor();
        boolean boolean13 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
    }

    @Test
    public void test15989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15989");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean23 = jSDocInfoBuilder18.recordExpose();
        boolean boolean24 = jSDocInfoBuilder18.recordConstructor();
        boolean boolean25 = nodeIterableList14.contains((java.lang.Object) jSDocInfoBuilder18);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isAdd();
        boolean boolean36 = node32.isExprResult();
        boolean boolean37 = node32.isThrow();
        boolean boolean38 = node32.isVarArgs();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node41 = node32.useSourceInfoFrom(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node32.siblings();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = nodeIterableList14.set(15, nodeIterable42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeIterable42);
    }

    @Test
    public void test15990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15990");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator7 = nodeIterableList0.spliterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor8 = nodeIterableList0.listIterator();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator9 = nodeIterableList0.spliterator();
        java.io.IOException iOException11 = new java.io.IOException("None");
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        iOException11.addSuppressed((java.lang.Throwable) iOException16);
        java.io.IOException iOException19 = new java.io.IOException("None");
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException21);
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException22);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        iOException19.addSuppressed((java.lang.Throwable) iOException24);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException28);
        java.io.IOException iOException31 = new java.io.IOException();
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException31);
        java.io.IOException iOException33 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException32);
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException38);
        java.lang.Throwable[] throwableArray40 = iOException38.getSuppressed();
        java.io.IOException iOException41 = new java.io.IOException();
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException41);
        iOException38.addSuppressed((java.lang.Throwable) iOException41);
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException46);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList48 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException11, (java.lang.Throwable) iOException19, (java.lang.Throwable) iOException28, (java.lang.Throwable) iOException33, (java.lang.Throwable) iOException37, (java.lang.Throwable) iOException41, (java.lang.Throwable) iOException46);
        java.io.IOException iOException49 = new java.io.IOException();
        java.io.IOException iOException50 = new java.io.IOException((java.lang.Throwable) iOException49);
        java.io.IOException iOException52 = new java.io.IOException("");
        iOException49.addSuppressed((java.lang.Throwable) iOException52);
        iOException19.addSuppressed((java.lang.Throwable) iOException49);
        java.lang.Throwable[] throwableArray55 = iOException49.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = nodeIterableList0.remove((java.lang.Object) iOException49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator7);
        org.junit.Assert.assertNotNull(nodeIterableItor8);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator9);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableList48);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test15991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15991");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType6 = objectType5.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry8.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = objectType12.toObjectType();
        boolean boolean14 = objectType5.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry16.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType21 = objectType20.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = objectType27.toObjectType();
        boolean boolean29 = objectType20.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType5, (com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.JSType jSType31 = objectType5.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = objectType5.getJSDocInfo();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = objectType38.toObjectType();
        boolean boolean40 = objectType39.matchesInt32Context();
        boolean boolean41 = objectType39.isStringValueType();
        boolean boolean42 = objectType39.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair49 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType39, (com.google.javascript.rhino.jstype.JSType) objectType48);
        boolean boolean50 = objectType39.isAllType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = objectType39.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.TemplateType templateType52 = objectType39.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair53 = objectType5.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType) objectType39);
        boolean boolean54 = objectType39.isObject();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNull(enumElementType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(enumElementType21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(templateType52);
        org.junit.Assert.assertNotNull(typePair53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test15992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15992");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean2 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        boolean boolean4 = jSTypeRegistry1.isForwardDeclaredType("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        boolean boolean12 = jSDocInfo5.hasParameter("Unknown class name");
        boolean boolean13 = jSDocInfo5.isHidden();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo5.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        boolean boolean24 = objectType23.matchesInt32Context();
        boolean boolean25 = objectType23.isBooleanValueType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot27 = objectType23.getOwnSlot("{1078264502}");
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType35 = objectType34.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = objectType41.toObjectType();
        boolean boolean43 = objectType34.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType41);
        java.lang.String str44 = objectType41.toDebugHashCodeString();
        boolean boolean45 = objectType41.isNumber();
        com.google.javascript.rhino.jstype.JSType jSType46 = objectType23.resolve(errorReporter28, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType41);
        com.google.javascript.rhino.Node node47 = objectType23.getRootNode();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection48 = jSTypeRegistry1.getDirectImplementors(objectType23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot27);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNull(enumElementType35);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{618211016}" + "'", str44, "{618211016}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(functionTypeCollection48);
    }

    @Test
    public void test15993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15993");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        boolean boolean29 = node26.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType30 = node26.getJSType();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node51 = node36.srcref(node46);
        int int52 = node36.getCharno();
        boolean boolean53 = node36.isQuotedString();
        boolean boolean54 = node36.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node36.setStaticSourceFile(staticSourceFile55);
        int int57 = node36.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node36.getStaticSourceFile();
        boolean boolean59 = node36.isNoSideEffectsCall();
        boolean boolean60 = node36.isDebugger();
        boolean boolean61 = node36.isComma();
        com.google.javascript.rhino.Node node62 = node26.clonePropsFrom(node36);
        boolean boolean63 = node36.isDec();
        boolean boolean64 = node36.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15994");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.jstype.JSType jSType26 = objectType6.getTypeOfThis();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot28 = objectType6.getSlot("Not declared as a constructor");
        boolean boolean29 = objectType6.isObject();
        boolean boolean30 = objectType6.matchesUint32Context();
        boolean boolean31 = objectType6.isNominalType();
        boolean boolean32 = objectType6.hasDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType6.collapseUnion();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNull(jSTypeStaticSlot28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSType33);
    }

    @Test
    public void test15995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15995");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isBooleanValueType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot10 = objectType6.getOwnSlot("{1078264502}");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType11 = objectType6.toMaybeParameterizedType();
        boolean boolean12 = objectType6.isBooleanObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType13 = objectType6.toMaybeFunctionType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot10);
        org.junit.Assert.assertNull(parameterizedType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(functionType13);
    }

    @Test
    public void test15996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15996");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        boolean boolean8 = objectType6.isStringValueType();
        boolean boolean9 = objectType6.canBeCalled();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isDebugger();
        com.google.javascript.rhino.InputId inputId15 = new com.google.javascript.rhino.InputId("");
        java.lang.String str16 = inputId15.getIdName();
        node12.setInputId(inputId15);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        boolean boolean24 = jSTypeRegistry19.canPropertyBeDefined(jSType22, "Unknown class name");
        jSTypeRegistry19.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = objectType32.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode45 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry44.setResolveMode(resolveMode45);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry44.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry35.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType48, "");
        boolean boolean51 = jSType50.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = objectType33.testForEquality(jSType50);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType50.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry19.createNullableType(jSType50);
        boolean boolean55 = jSType50.isTemplateType();
        boolean boolean56 = jSType50.isBooleanObjectType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = jSType50.getPossibleToBooleanOutcomes();
        boolean boolean58 = inputId15.equals((java.lang.Object) jSType50);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair59 = objectType6.getTypesUnderInequality(jSType50);
        com.google.javascript.rhino.jstype.JSType jSType60 = typePair59.typeA;
        com.google.javascript.rhino.jstype.JSType jSType61 = typePair59.typeB;
        com.google.javascript.rhino.jstype.JSType jSType62 = typePair59.typeA;
        boolean boolean63 = jSType62.isEnumElementType();
        java.lang.String str64 = jSType62.toString();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + resolveMode45 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode45.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(typePair59);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{...}" + "'", str64, "{...}");
    }

    @Test
    public void test15997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15997");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList45.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList60 = nodeIterableList45.asList();
        boolean boolean61 = nodeIterableList45.isEmpty();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "[]", 36, 3);
        java.lang.String str70 = node66.toString(false, true, true);
        node66.removeProp(54);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = nodeIterableList45.remove((java.lang.Object) 54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertNotNull(nodeIterableList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "OR []" + "'", str70, "OR []");
    }

    @Test
    public void test15998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15998");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        boolean boolean13 = node2.isDefaultCase();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry15.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isNE();
        boolean boolean33 = node31.isInstanceOf();
        boolean boolean34 = node31.isThrow();
        node31.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node31.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode40 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry39.setResolveMode(resolveMode40);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        boolean boolean44 = jSTypeRegistry39.canPropertyBeDefined(jSType42, "Unknown class name");
        jSTypeRegistry39.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry39.createAnonymousObjectType();
        objectType47.clearResolved();
        node31.setJSType((com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node52.isDebugger();
        com.google.javascript.rhino.Node node59 = node52.getFirstChild();
        boolean boolean60 = node52.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType61 = jSTypeRegistry26.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType47, node52);
        boolean boolean62 = jSTypeRegistry15.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry64.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        com.google.javascript.rhino.Node node69 = jSTypeRegistry15.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        int int70 = node69.getType();
        boolean boolean71 = node69.isInstanceOf();
        com.google.javascript.rhino.Node node72 = node2.useSourceInfoIfMissingFrom(node69);
        boolean boolean73 = node2.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertTrue("'" + resolveMode40 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode40.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(functionType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 83 + "'", int70 == 83);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test15999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15999");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("GETELEM 2 [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder15.recordConstancy();
        boolean boolean23 = jSDocInfoBuilder15.recordOverride();
        boolean boolean24 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean26 = jSDocInfoBuilder15.recordMeaning("{...}");
        boolean boolean27 = jSDocInfoBuilder15.isConstructorRecorded();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node31, "");
        boolean boolean34 = jSTypeExpression33.isVarArgs();
        boolean boolean35 = jSDocInfoBuilder15.recordThisType(jSTypeExpression33);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression33);
        boolean boolean37 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression33);
        boolean boolean38 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test16000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test16000");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        jSTypeRegistry12.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = objectType19.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot22 = objectType19.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType30 = objectType29.toMaybeEnumElementType();
        boolean boolean31 = jSTypeRegistry1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType19, objectType29);
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType19.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSType33.autobox();
        boolean boolean35 = jSType34.hasDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        boolean boolean44 = objectType43.isEmptyType();
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType34.forceResolve(errorReporter36, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType43);
        boolean boolean46 = jSType34.isNumberValueType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSTypeStaticSlot22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(enumElementType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }
}

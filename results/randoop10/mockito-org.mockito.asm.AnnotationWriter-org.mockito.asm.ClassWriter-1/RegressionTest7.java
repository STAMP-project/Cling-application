import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitFieldInsn(9, "", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitFieldInsn((int) (short) -17730, "\001", "\001", "hi!");
        methodVisitor69.visitMethodInsn((int) (byte) 100, "\001", "\001", "\001");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitParameterAnnotation((int) (short) 9, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("", "\007\000");
        int int20 = classWriter1.newNameType("", "hi!");
        int int23 = classWriter1.newNameType("hi!", "\001");
        int int25 = classWriter1.newUTF8("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(13, (int) (short) -1);
        methodVisitor69.visitVarInsn(196613, (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = annotationVisitor90.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(103);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        classWriter7.visitEnd();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        classWriter17.visitEnd();
        classWriter17.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter17.visitAnnotation("hi!", false);
        classWriter17.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter17.visitAnnotation("hi!", true);
        classWriter17.visitEnd();
        byte[] byteArray35 = classWriter17.toByteArray();
        classWriter17.visitEnd();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        byte[] byteArray45 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        java.lang.String[] strArray47 = classReader46.getInterfaces();
        java.lang.String str48 = classReader46.getSuperName();
        long long50 = classReader46.readLong((int) (byte) 0);
        java.lang.String[] strArray51 = classReader46.getInterfaces();
        int int52 = classReader46.getAccess();
        int int54 = classReader46.readUnsignedShort((int) (short) 0);
        int int56 = classReader46.readInt(4);
        java.lang.String[] strArray57 = classReader46.getInterfaces();
        classWriter17.visit(196612, 11, "hi!", "hi!", "", strArray57);
        classWriter7.visit(51966, (int) (byte) 0, "hi!", "\001", "\007\000", strArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor60 = classWriter1.visitMethod((int) (short) 29285, "", "\001", "\001", strArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-3819410108757049344L) + "'", long50 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int22 = classWriter1.newUTF8("\007\000");
        classWriter1.visitSource("\007\000", "");
        classWriter1.visitSource("hi!", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1399416686);
        org.mockito.asm.Label label85 = null;
        int[] intArray89 = new int[] { (short) -326, 88, 196612 };
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label85, intArray89, labelArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-326, 88, 196612]");
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray6, (int) (byte) -1, 24832);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader10.readUnsignedShort(1025);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1025");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        byte[] byteArray9 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = classReader4.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label89 = null;
        int[] intArray95 = new int[] { 2, 190, 104, 17, (short) 26913 };
        org.mockito.asm.Label[] labelArray96 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label89, intArray95, labelArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[2, 190, 104, 17, 26913]");
        org.junit.Assert.assertNotNull(labelArray96);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int15 = classWriter1.newField("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter22.visitAnnotation("", false);
        byte[] byteArray44 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader45, 5);
        int int49 = classReader45.header;
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        classWriter51.visitSource("hi!", "");
        classWriter51.visitEnd();
        int int58 = classWriter51.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter51.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter51.visitAnnotation("hi!", true);
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter51, 0);
        java.lang.String[] strArray67 = classReader45.getInterfaces();
        classWriter1.visit(83886080, 103, "hi!", "\001", "hi!", strArray67);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 103 + "'", int49 == 103);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(28526, label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader20, 15);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = classReader20.readByte(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) -1, 100);
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader8.readByte(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitVarInsn((int) (short) 100, 256);
        methodVisitor69.visitLdcInsn((java.lang.Object) 8029481630357783296L);
        methodVisitor69.visitIincInsn(5, 28);
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(24832, label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute4 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        short short8 = classReader4.readShort((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        byte[] byteArray29 = classWriter11.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter11.visitAnnotation("", false);
        byte[] byteArray33 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader34, 2);
        byte[] byteArray37 = classReader34.b;
        java.lang.String str38 = classReader34.getSuperName();
        java.lang.String[] strArray39 = classReader34.getInterfaces();
        int int40 = classReader34.header;
        char[] charArray46 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str47 = classReader34.readUTF8(20, charArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = classReader4.readClass((int) '4', charArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) -326 + "'", short8 == (short) -326);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 103 + "'", int40 == 103);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        byte[] byteArray38 = classWriter37.toByteArray();
        org.mockito.asm.Attribute attribute39 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter37.visitAttribute(attribute39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(0, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("\001", true);
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "\007\000", "hi!", label95, label96, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor13.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor13.visitArray("");
        annotationVisitor13.visitEnum("hi!", "hi!", "");
        annotationVisitor13.visitEnum("\007\000", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor13.visitArray("");
        annotationVisitor28.visitEnd();
        annotationVisitor28.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-21316096));
        classWriter1.visitInnerClass("hi!", "", "\007\000", 5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        byte[] byteArray16 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        java.lang.String[] strArray18 = classReader17.getInterfaces();
        int int19 = classReader17.getAccess();
        int int21 = classReader17.readUnsignedShort(4);
        int int23 = classReader17.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor24 = classWriter8.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (byte) 10, (-1), "", "", "", strArray32);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter60, 8);
        long long64 = classReader58.readLong(7);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter66.visitAnnotation("", true);
        int int72 = classWriter66.newNameType("hi!", "hi!");
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter66, (int) (byte) 0);
        java.lang.String[] strArray75 = classReader58.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter8.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray75);
        int int81 = classWriter8.newMethod("hi!", "", "", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter8.visitAnnotation("\007\000", true);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter90.visitEnd();
        byte[] byteArray92 = classWriter90.toByteArray();
        org.mockito.asm.ClassReader classReader93 = new org.mockito.asm.ClassReader(byteArray92);
        int int95 = classReader93.readByte(1);
        java.lang.String[] strArray96 = classReader93.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter8.visitMethod(0, "\001", "", "\007\000", strArray96);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = classWriter1.newConst((java.lang.Object) strArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@69bcc09b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 6989595422067222633L + "'", long64 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 7 + "'", int81 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 254 + "'", int95 == 254);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(methodVisitor97);
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(10, "");
        methodVisitor69.visitEnd();
        java.lang.Class<?> wildcardClass82 = methodVisitor69.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        int int13 = classWriter1.newUTF8("hi!");
        byte[] byteArray14 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        java.lang.String[] strArray43 = null;
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray43);
        int int49 = classWriter1.newMethod("\001", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        classWriter55.visitEnd();
        classWriter55.visitEnd();
        byte[] byteArray62 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray62);
        long long66 = classReader64.readLong(0);
        java.lang.String[] strArray67 = classReader64.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter1.visitMethod((int) (byte) 10, "\001", "hi!", "", strArray67);
        org.mockito.asm.Label label70 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor68.visitJumpInsn(51966, label70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-3819410108757049344L) + "'", long66 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        int int39 = classReader20.readByte(10);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader20.getItem((int) (short) 28526);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28526");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(83, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor69.visitTryCatchBlock(label94, label95, label96, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(9, "", "", "hi!");
        methodVisitor69.visitIincInsn((int) (short) 100, 256);
        methodVisitor69.visitVarInsn(100, 73);
        methodVisitor69.visitIntInsn((-889275714), 131073);
        methodVisitor69.visitIntInsn((int) (short) 26978, (int) (short) 24832);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int3 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        byte[] byteArray12 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        classWriter1.visit((-889275714), 65210, "hi!", "", "", strArray14);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter17.visitAnnotation("", false);
        byte[] byteArray39 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader40, 2);
        java.lang.String str43 = classReader40.getClassName();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader40, 16778088);
        classWriter45.visitEnd();
        classWriter45.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        byte[] byteArray57 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        int int60 = classReader58.getAccess();
        int int62 = classReader58.readUnsignedShort(4);
        int int64 = classReader58.readByte(5);
        java.lang.String[] strArray65 = classReader58.getInterfaces();
        int int67 = classReader58.getItem(0);
        java.lang.String[] strArray68 = classReader58.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter45.visitMethod(0, "", "\001", "hi!", strArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = classWriter1.newConst((java.lang.Object) methodVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@3e8a9cbd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        char[] charArray62 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj63 = classReader51.readConst((int) (short) 1, charArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = classReader20.readClass(186, charArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + "\007\000" + "'", obj63, "\007\000");
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        int int28 = classWriter26.newClass("");
        classWriter26.visitInnerClass("\007\000", "\007\000", "hi!", 11);
        classWriter26.visitSource("\001", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        classWriter39.visitEnd();
        classWriter39.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter39.visitAnnotation("hi!", false);
        java.lang.Object obj53 = null;
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter39.visitField((-1), "", "", "", obj53);
        classWriter39.visitInnerClass("", "", "", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute63 = null;
        org.mockito.asm.Attribute[] attributeArray64 = new org.mockito.asm.Attribute[] { attribute63 };
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter39, attributeArray64, 256);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader20, (-1107296256));
        int int70 = classReader20.readByte((int) 'a');
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(attributeArray64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        int int10 = classReader4.header;
        short short12 = classReader4.readShort(12);
        int int13 = classReader4.getAccess();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        int int45 = classWriter36.newMethod("", "hi!", "", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 9);
        // The following exception was thrown during execution in test generation
        try {
            short short49 = classReader20.readShort(65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs(47806, 29285);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "hi!", "\007\000", label89, label90, 512);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1161953280));
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        byte[] byteArray9 = classReader4.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        int int11 = classReader10.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short13 = classReader10.readShort(1399416686);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1399416686");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) -1, 100);
        int int7 = classReader6.header;
        int int8 = classReader6.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader6.readInt(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 256 + "'", int8 == 256);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitIntInsn((-889275714), 3);
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(151060483, 52);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        int int13 = classWriter1.newUTF8("hi!");
        int int15 = classWriter1.newUTF8("hi!");
        int int17 = classWriter1.newClass("\007\000");
        int int20 = classWriter1.newNameType("\007\000", "hi!");
        int int25 = classWriter1.newMethod("", "\007\000", "\007\000", false);
        classWriter1.visitSource("\007\000", "");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn(5, (int) (short) -1);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label[] labelArray91 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(202, 7, label90, labelArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray91);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitTypeInsn(5, "\007\000");
        methodVisitor69.visitVarInsn((int) (short) 1792, 83886080);
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\001", "hi!", label95, label96, 254);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("", "hi!", "hi!", 114);
        org.mockito.asm.Attribute attribute23 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        java.lang.String[] strArray10 = classReader8.getInterfaces();
        byte[] byteArray11 = classReader8.b;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader8.readInt(1751720193);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        int int9 = classReader8.header;
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader31.accept((org.mockito.asm.ClassVisitor) classWriter33, 8);
        int int37 = classReader31.readUnsignedShort((int) (short) 10);
        int int39 = classReader31.readInt(14);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        classWriter41.visitSource("hi!", "");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter41.visit((int) 'a', (int) '4', "", "hi!", "", strArray57);
        byte[] byteArray59 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader60.accept((org.mockito.asm.ClassVisitor) classWriter62, 8);
        byte[] byteArray65 = classWriter62.toByteArray();
        int int67 = classWriter62.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter62.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute[] attributeArray71 = new org.mockito.asm.Attribute[] {};
        classReader31.accept((org.mockito.asm.ClassVisitor) classWriter62, attributeArray71, 51966);
        // The following exception was thrown during execution in test generation
        try {
            classReader8.accept(classVisitor10, attributeArray71, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1763770624 + "'", int39 == 1763770624);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(attributeArray71);
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        byte[] byteArray16 = classWriter13.toByteArray();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter43, 8);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        classWriter47.visitSource("", "");
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter47, 100);
        classWriter47.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter13.visitField(51966, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int59 = classWriter1.newConst((java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter68.visitAnnotation("", true);
        classWriter68.visitSource("", "");
        classWriter68.visitSource("", "hi!");
        int int81 = classWriter68.newField("hi!", "hi!", "hi!");
        classWriter68.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter68.visitSource("", "");
        int int91 = classWriter68.newClass("hi!");
        classWriter68.visitInnerClass("hi!", "", "hi!", (-889275714));
        org.mockito.asm.FieldVisitor fieldVisitor97 = classWriter1.visitField(196612, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.Attribute attribute98 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor97.visitAttribute(attribute98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertNotNull(fieldVisitor97);
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        long long26 = classReader24.readLong((int) (byte) 100);
        java.lang.String[] strArray27 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader50, 256);
        int int53 = classReader50.header;
        int int55 = classReader50.readInt(11);
        java.lang.String str56 = classReader50.getClassName();
        java.lang.String[] strArray57 = classReader50.getInterfaces();
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter60.visitEnd();
        classWriter60.visitSource("hi!", "");
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter60.visit((int) 'a', (int) '4', "", "hi!", "", strArray76);
        byte[] byteArray78 = classWriter60.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader79.accept((org.mockito.asm.ClassVisitor) classWriter81, 8);
        char[] charArray90 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj91 = classReader79.readConst((int) (short) 1, charArray90);
        java.lang.Object obj92 = classReader50.readConst(1, charArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = classReader24.readClass((int) (byte) 0, charArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 8029481630357783296L + "'", long26 == 8029481630357783296L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 73 + "'", int53 == 73);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 223337 + "'", int55 == 223337);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + "\007\000" + "'", obj91, "\007\000");
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + "\007\000" + "'", obj92, "\007\000");
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter16.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter16.visitOuterClass("", "", "");
        classWriter16.visitSource("", "");
        int int41 = classWriter16.newNameType("", "hi!");
        byte[] byteArray42 = classWriter16.toByteArray();
        int int46 = classWriter16.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        byte[] byteArray48 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray48);
        int int52 = classReader50.readUnsignedShort(0);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = classReader50.readByte(1763770624);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1763770624");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 8, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 51966 + "'", int52 == 51966);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newClass("hi!");
        java.lang.String[] strArray19 = null;
        classWriter1.visit(13, (int) (short) -1, "\007\000", "", "", strArray19);
        classWriter1.visitInnerClass("\007\000", "hi!", "", (-889275714));
        classWriter1.visitInnerClass("\001", "\001", "\001", (int) (short) 1);
        int int34 = classWriter1.newField("\001", "\007\000", "\001");
        java.lang.Class<?> wildcardClass35 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            short short12 = classReader4.readShort(88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 88");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int12 = classReader4.readInt(0);
        long long14 = classReader4.readLong(2);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader4.getItem(16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16779008");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-889275714) + "'", int12 == (-889275714));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-4990551337079930879L) + "'", long14 == (-4990551337079930879L));
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("\007\000", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        annotationVisitor22.visitEnum("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor22.visitArray("hi!");
        annotationVisitor22.visitEnum("\001", "\007\000", "hi!");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter35.visitAnnotation("", true);
        int int41 = classWriter35.newNameType("hi!", "hi!");
        classWriter35.visitSource("hi!", "hi!");
        classWriter35.visitSource("", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor22.visit("\001", (java.lang.Object) classWriter35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@16c9553f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitInsn((-1));
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitFieldInsn(132864, "", "hi!", "hi!");
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) '#', label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        int int11 = classWriter1.newNameType("", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        annotationVisitor14.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        java.lang.String str30 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitInnerClass("", "hi!", "hi!", 10);
        int int39 = classWriter32.newUTF8("hi!");
        classWriter32.visitInnerClass("hi!", "\007\000", "", 7);
        classWriter32.visitInnerClass("", "hi!", "", 17);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        classWriter51.visitSource("hi!", "");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter51.visit((int) 'a', (int) '4', "", "hi!", "", strArray67);
        byte[] byteArray69 = classWriter51.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter51.visitAnnotation("", false);
        byte[] byteArray73 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray77 = new org.mockito.asm.Attribute[] {};
        classReader74.accept((org.mockito.asm.ClassVisitor) classWriter76, attributeArray77, (int) (short) 0);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray77, 8);
        java.lang.String str82 = classReader24.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray77);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 0);
        methodVisitor69.visitTypeInsn(1399416686, "\001");
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "", "hi!", label91, label92, 29285);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        java.lang.Object obj86 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor84.visit("", obj86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitIincInsn(100, 0);
        org.mockito.asm.Label label90 = null;
        int[] intArray95 = new int[] { 256, 132864, 341012341, (short) 26978 };
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] { label96 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label90, intArray95, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[256, 132864, 341012341, 26978]");
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        int int36 = classWriter30.newNameType("hi!", "hi!");
        classWriter30.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter48.visitAnnotation("", false);
        byte[] byteArray70 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        classWriter30.visit(51966, (int) 'a', "", "\007\000", "", strArray72);
        classWriter30.visitEnd();
        classWriter30.visitInnerClass("hi!", "\007\000", "hi!", 20);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter86.visitEnd();
        byte[] byteArray88 = classWriter86.toByteArray();
        org.mockito.asm.ClassReader classReader89 = new org.mockito.asm.ClassReader(byteArray88);
        java.lang.String[] strArray90 = classReader89.getInterfaces();
        java.lang.String str91 = classReader89.getSuperName();
        int int93 = classReader89.readUnsignedShort(3);
        java.lang.String[] strArray94 = classReader89.getInterfaces();
        classWriter30.visit(9, 1, "", "hi!", "hi!", strArray94);
        classWriter23.visit(512, (int) (byte) 1, "", "hi!", "", strArray94);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 48640 + "'", int93 == 48640);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitIincInsn(196613, (-1));
        methodVisitor69.visitFieldInsn((int) (byte) -1, "\007\000", "hi!", "");
        org.mockito.asm.Attribute attribute85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        int int46 = classWriter1.newUTF8("");
        int int48 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 1399416686);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        byte[] byteArray33 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String[] strArray35 = classReader34.getInterfaces();
        java.lang.String str36 = classReader34.getSuperName();
        long long38 = classReader34.readLong((int) (byte) 0);
        java.lang.String str39 = classReader34.getSuperName();
        java.lang.String str40 = classReader34.getSuperName();
        int int41 = classReader34.getAccess();
        java.lang.String[] strArray42 = classReader34.getInterfaces();
        int int43 = classReader34.getAccess();
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter1.visitField(17, "\007\000", "\001", "\001", (java.lang.Object) int43);
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor44.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-3819410108757049344L) + "'", long38 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor44);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        int int11 = classWriter1.newNameType("", "\007\000");
        classWriter1.visitInnerClass("", "", "\007\000", 100);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", 16779008);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        byte[] byteArray38 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        int int26 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        byte[] byteArray30 = classWriter1.toByteArray();
        int int32 = classWriter1.newUTF8("hi!");
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 1, 0, 1, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int24 = classReader21.header;
        int int26 = classReader21.readInt(11);
        byte[] byteArray27 = classReader21.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 73 + "'", int24 == 73);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 223337 + "'", int26 == 223337);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "\007\000");
        classWriter1.visitSource("", "");
        int int71 = classWriter1.newMethod("hi!", "hi!", "hi!", true);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) ' ');
        int int81 = classWriter77.newField("", "", "hi!");
        int int83 = classWriter77.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter77.visitAnnotation("", true);
        classWriter77.visitOuterClass("", "", "hi!");
        int int95 = classWriter77.newMethod("", "hi!", "\007\000", false);
        classWriter77.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor97 = classWriter1.visitField(0, "", "\001", "", (java.lang.Object) classWriter77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@61376ce");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 8 + "'", int95 == 8);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.Attribute attribute60 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        java.lang.String str34 = classReader20.getSuperName();
        int int35 = classReader20.header;
        // The following exception was thrown during execution in test generation
        try {
            short short37 = classReader20.readShort(196612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196612");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitIntInsn((-889275714), 3);
        methodVisitor69.visitMultiANewArrayInsn("", (-1));
        methodVisitor69.visitMethodInsn(1, "", "\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor69.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor99);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        classWriter1.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray25);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "", "hi!", 14);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        int int46 = classWriter38.newClass("");
        int int48 = classWriter38.newUTF8("\007\000");
        byte[] byteArray49 = classWriter38.toByteArray();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        classWriter56.visitSource("hi!", "");
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter56.visit((int) 'a', (int) '4', "", "hi!", "", strArray72);
        byte[] byteArray74 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader75.accept((org.mockito.asm.ClassVisitor) classWriter77, 8);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter81.visitEnd();
        classWriter81.visitSource("", "");
        classReader75.accept((org.mockito.asm.ClassVisitor) classWriter81, 100);
        java.lang.String str88 = classReader75.getClassName();
        int int89 = classReader75.header;
        org.mockito.asm.ClassWriter classWriter91 = new org.mockito.asm.ClassWriter(0);
        classReader75.accept((org.mockito.asm.ClassVisitor) classWriter91, 0);
        java.lang.String[] strArray94 = classReader75.getInterfaces();
        classWriter38.visit(16778088, 51, "\001", "\007\000", "hi!", strArray94);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor96 = classWriter1.visitMethod(132864, "\007\000", "hi!", "hi!", strArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 73 + "'", int89 == 73);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        annotationVisitor13.visitEnum("hi!", "\007\000", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitTypeInsn(0, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitIntInsn(0, 0);
        methodVisitor69.visitTypeInsn((int) 'a', "");
        methodVisitor69.visitTypeInsn(8, "\007\000");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label[] labelArray87 = new org.mockito.asm.Label[] { label86 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(512, 2, label85, labelArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray87);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        byte[] byteArray78 = classReader20.b;
        java.lang.String[] strArray79 = classReader20.getInterfaces();
        long long81 = classReader20.readLong(33);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 8391739258808830547L + "'", long81 == 8391739258808830547L);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(0, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("\001", true);
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\001", "", label95, label96, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        int int8 = classWriter1.newMethod("hi!", "", "hi!", true);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter22.visitAnnotation("", false);
        byte[] byteArray44 = classWriter22.toByteArray();
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        short short56 = classReader53.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter22.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = fieldVisitor57.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter13.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter13.visitAnnotation("hi!", true);
        int int68 = classWriter1.newConst((java.lang.Object) "hi!");
        int int70 = classWriter1.newUTF8("\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) -326 + "'", short56 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(fieldVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        int int40 = classWriter26.newField("hi!", "\007\000", "");
        classWriter26.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitMethodInsn(14, "hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor92.visitEnd();
        annotationVisitor92.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = annotationVisitor92.visitAnnotation("\007\000", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("", true);
        int int31 = classWriter1.newMethod("", "hi!", "", true);
        int int35 = classWriter1.newField("\007\000", "", "\007\000");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("", true);
        classWriter37.visitSource("", "");
        classWriter37.visitSource("", "hi!");
        int int50 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter37.visitSource("", "");
        classWriter37.visitSource("hi!", "");
        classWriter37.visitInnerClass("", "\007\000", "\007\000", (int) (short) 24832);
        java.lang.String[] strArray72 = null;
        classWriter37.visit(104, 83, "hi!", "", "", strArray72);
        int int77 = classWriter37.newField("\001", "", "hi!");
        int int78 = classWriter1.newConst((java.lang.Object) "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 11 + "'", int78 == 11);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        org.mockito.asm.Label label83 = null;
        int[] intArray89 = new int[] { 10, 872, (byte) 100, (short) -326, 2049 };
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label[] labelArray91 = new org.mockito.asm.Label[] { label90 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label83, intArray89, labelArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 872, 100, -326, 2049]");
        org.junit.Assert.assertNotNull(labelArray91);
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int36 = classReader32.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter60, 8);
        char[] charArray69 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj70 = classReader58.readConst((int) (short) 1, charArray69);
        java.lang.Object obj71 = classReader32.readConst(4, charArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader9.readUTF8(16777217, charArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "\007\000" + "'", obj70, "\007\000");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "Lhi!;");
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((int) (short) -1, 16778088);
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitMaxs(9, 51966);
        methodVisitor69.visitMultiANewArrayInsn("", 38);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", true);
        int int29 = classWriter1.newNameType("", "hi!");
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitIincInsn(100, 254);
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (short) 8449, label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 0);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitMethodInsn(0, "", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = annotationVisitor88.visitArray("");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int7 = classReader4.header;
        short short9 = classReader4.readShort((int) (short) 1);
        long long11 = classReader4.readLong((int) (short) 0);
        java.lang.String[] strArray12 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 256);
        int int38 = classReader35.header;
        int int40 = classReader35.readInt(11);
        java.lang.String str41 = classReader35.getClassName();
        java.lang.String[] strArray42 = classReader35.getInterfaces();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter45.visitEnd();
        classWriter45.visitSource("hi!", "");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter45.visit((int) 'a', (int) '4', "", "hi!", "", strArray61);
        byte[] byteArray63 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader64.accept((org.mockito.asm.ClassVisitor) classWriter66, 8);
        char[] charArray75 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj76 = classReader64.readConst((int) (short) 1, charArray75);
        java.lang.Object obj77 = classReader35.readConst(1, charArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = classReader4.readUTF8(16777216, charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3819410108757049344L) + "'", long11 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 223337 + "'", int40 == 223337);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + "\007\000" + "'", obj76, "\007\000");
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + "\007\000" + "'", obj77, "\007\000");
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        java.lang.String[] strArray10 = classReader8.getInterfaces();
        byte[] byteArray11 = classReader8.b;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader8.readByte((int) (short) 26978);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26978");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn((int) (short) -1, 47806);
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(0, label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 12);
        methodVisitor69.visitVarInsn(1919222016, 0);
        methodVisitor69.visitMaxs((int) (byte) 100, 119);
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(17, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) -326, 28);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int37 = classReader20.getAccess();
        java.lang.String str38 = classReader20.getClassName();
        int int39 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        classWriter41.visitSource("hi!", "");
        classWriter41.visitEnd();
        byte[] byteArray47 = classWriter41.toByteArray();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter53.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter53.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor73 = classWriter41.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter41, (int) (short) 26978);
        int int77 = classReader20.readInt((int) (short) 10);
        java.lang.String str78 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(fieldVisitor73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 16778088 + "'", int77 == 16778088);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        short short29 = classReader24.readShort(11);
        java.lang.String str30 = classReader24.getClassName();
        byte[] byteArray31 = classReader24.b;
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = classReader32.readLong(196613);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 3 + "'", short29 == (short) 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter10.visitAnnotation("", true);
        classWriter10.visitSource("", "");
        classWriter10.visitOuterClass("hi!", "", "");
        classWriter10.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter55, 100);
        java.lang.String[] strArray62 = classReader49.getInterfaces();
        classWriter10.visit((-1), 256, "", "hi!", "", strArray62);
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter1.visitField(11, "", "", "\007\000", (java.lang.Object) 256);
        classWriter1.visitEnd();
        java.lang.Class<?> wildcardClass66 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader4.readByte(131073);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 131073");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int37 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter32.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        classWriter47.visitSource("", "");
        classWriter47.visitSource("", "hi!");
        int int60 = classWriter47.newField("hi!", "hi!", "hi!");
        int int64 = classWriter47.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter32.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor65.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter25.visitField(9, "", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = fieldVisitor72.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = fieldVisitor72.visitAnnotation("hi!", false);
        org.mockito.asm.Attribute attribute82 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor72.visitAttribute(attribute82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray7, 28526, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter7.visit((int) 'a', (int) '4', "", "hi!", "", strArray23);
        byte[] byteArray25 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter28, 8);
        int int32 = classReader26.readUnsignedShort((int) (short) 10);
        int int34 = classReader26.readInt(2);
        int int35 = classReader26.header;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter1.visitMethod(1751720193, "\007\000", "hi!", "hi!", strArray36);
        org.mockito.asm.Label label40 = null;
        org.mockito.asm.Label[] labelArray41 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor37.visitTableSwitchInsn((-1107296256), (int) (short) 100, label40, labelArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 256 + "'", int32 == 256);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1161953280) + "'", int34 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(labelArray41);
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = annotationVisitor39.visitAnnotation("", "");
        annotationVisitor42.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int9 = classWriter1.newMethod("", "", "", true);
        java.lang.Object obj14 = null;
        org.mockito.asm.FieldVisitor fieldVisitor15 = classWriter1.visitField((int) '#', "", "hi!", "", obj14);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor15.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor15.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitParameterAnnotation((-21316096), "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitTypeInsn((int) (byte) 1, "hi!");
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "hi!", "\007\000", label94, label95, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitInnerClass("", "hi!", "\007\000", 0);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitInsn(47806);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray27, 57174305, 16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (byte) -1);
        methodVisitor69.visitInsn(2);
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        methodVisitor69.visitTryCatchBlock(label84, label85, label86, "hi!");
        org.mockito.asm.Label label89 = null;
        int[] intArray93 = new int[] { 256, (short) 8449, (short) 1 };
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] { label94 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label89, intArray93, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[256, 8449, 1]");
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        int int19 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor22.visitArray("\007\000");
        annotationVisitor22.visitEnum("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor22.visitAnnotation("\007\000", "");
        annotationVisitor22.visitEnum("\007\000", "", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor22.visitAnnotation("", "");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) (short) 0);
        org.mockito.asm.Label label77 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("hi!", true);
        annotationVisitor41.visitEnum("hi!", "\001", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader20, 7);
        char[] charArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = classReader20.readConst(21353, charArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21353");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        classWriter28.visitInnerClass("\001", "\001", "\001", (int) (short) 1792);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        classWriter47.visitSource("hi!", "");
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter47.visit((int) 'a', (int) '4', "", "hi!", "", strArray63);
        byte[] byteArray65 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader66.accept((org.mockito.asm.ClassVisitor) classWriter68, 8);
        byte[] byteArray71 = classWriter68.toByteArray();
        int int73 = classWriter68.newClass("hi!");
        classWriter68.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray79 = classWriter68.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray79);
        int int83 = classReader81.readByte(10);
        int int84 = classReader81.header;
        java.lang.String str85 = classReader81.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter28.visitField(11, "hi!", "\001", "\007\000", (java.lang.Object) classReader81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@212462d6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 88 + "'", int84 == 88);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        fieldVisitor33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor33.visitAnnotation("hi!", true);
        fieldVisitor33.visitEnd();
        fieldVisitor33.visitEnd();
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor33.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label91 = null;
        int[] intArray92 = new int[] {};
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label[] labelArray94 = new org.mockito.asm.Label[] { label93 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label91, intArray92, labelArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(labelArray94);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "\007\000");
        methodVisitor69.visitIincInsn((int) (short) 1, 0);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor69.visitTryCatchBlock(label94, label95, label96, "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMaxs(16777223, 13);
        methodVisitor69.visitMaxs((-1161953280), 10);
        methodVisitor69.visitVarInsn(1751720193, 73);
        org.mockito.asm.Label label86 = null;
        int[] intArray93 = new int[] { 17, 223337, 4, (byte) 1, 103, 2 };
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] { label94 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label86, intArray93, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[17, 223337, 4, 1, 103, 2]");
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int30 = classReader20.readInt((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader20.readInt(2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 196613 + "'", int30 == 196613);
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readInt(6);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter11.visitAnnotation("", true);
        classWriter11.visitSource("", "");
        classWriter11.visitSource("", "hi!");
        int int24 = classWriter11.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        byte[] byteArray33 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String[] strArray35 = classReader34.getInterfaces();
        classWriter11.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray35);
        int int39 = classWriter11.newNameType("hi!", "hi!");
        classWriter11.visitInnerClass("", "", "", 47806);
        int int46 = classWriter11.newUTF8("");
        classWriter11.visitInnerClass("hi!", "", "hi!", 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter11.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter11.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray65 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray65, (int) (byte) 0, (-1));
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray65, (int) (short) 0, 51966);
        java.lang.String str73 = classReader72.getSuperName();
        java.lang.String[] strArray74 = classReader72.getInterfaces();
        classWriter11.visit(33554688, 103, "", "\001", "\001", strArray74);
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter11, 83886080);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(341012341, label77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("", "");
        int int34 = classWriter27.newNameType("hi!", "");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter27, (int) (byte) 10);
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter27.visitField(103, "\001", "\001", "hi!", (java.lang.Object) 21353);
        fieldVisitor42.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(fieldVisitor42);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        org.mockito.asm.Attribute attribute43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            short short9 = classReader4.readShort((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitEnd();
        byte[] byteArray33 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        classWriter40.visitEnd();
        classWriter40.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter40.visitAnnotation("hi!", true);
        classWriter40.visitEnd();
        byte[] byteArray58 = classWriter40.toByteArray();
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        classWriter40.visit(16777223, 0, "\007\000", "\007\000", "\007\000", strArray65);
        classWriter1.visit((int) (byte) 10, 9, "", "\007\000", "hi!", strArray65);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 12, 0, 2, 0, 2, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 3, 0, 8, 0, 10, 0, 0, 0, 10, 0, 1, 0, 4, 0, 4, 0, 2, 0, 100, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray65);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        byte[] byteArray18 = classWriter1.toByteArray();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 4, 0, 2, 0, 4, 0, 6, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 7, 0, 0, 0, 10, 0, 2, 0, 3, 0, 0, 0, 3, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 4, 0, 2, 0, 4, 0, 6, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 7, 0, 0, 0, 10, 0, 2, 0, 3, 0, 0, 0, 3, 0, 0]");
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        int int28 = classReader24.header;
        long long30 = classReader24.readLong((int) ' ');
        java.lang.String[] strArray31 = classReader24.getInterfaces();
        char[] charArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = classReader24.readUTF8(5, charArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 7022366853158731786L + "'", long30 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        int int23 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("", "hi!", "", 2);
        classWriter1.visitInnerClass("hi!", "", "\007\000", (int) (short) 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("\007\000", false);
        annotationVisitor36.visitEnum("hi!", "hi!", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor36.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor36.visitAnnotation("\007\000", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readInt((int) (byte) 10);
        long long30 = classReader26.readLong(103);
        java.lang.String str31 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 104);
        classWriter33.visitOuterClass("\007\000", "", "\007\000");
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter33.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16777223 + "'", int28 == 16777223);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 562962838716416L + "'", long30 == 562962838716416L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(151060483);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter9.visitEnd();
        byte[] byteArray11 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.getAccess();
        int int16 = classReader12.readUnsignedShort(4);
        int int18 = classReader12.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter3.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        classWriter3.visit((int) (byte) 10, (-1), "", "", "", strArray27);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        byte[] byteArray52 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter55, 8);
        long long59 = classReader53.readLong(7);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter61.visitAnnotation("", true);
        int int67 = classWriter61.newNameType("hi!", "hi!");
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter61, (int) (byte) 0);
        java.lang.String[] strArray70 = classReader53.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter3.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray70);
        methodVisitor71.visitCode();
        methodVisitor71.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor71.visitAnnotation("", true);
        methodVisitor71.visitCode();
        methodVisitor71.visitFieldInsn(1, "", "hi!", "");
        methodVisitor71.visitFieldInsn(16778088, "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor71.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = classWriter1.newConst((java.lang.Object) methodVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@50f33bd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 6989595422067222633L + "'", long59 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader6.header;
        java.lang.String[] strArray8 = classReader6.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = classReader6.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        int int8 = classWriter1.newUTF8("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(100);
        classWriter11.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter20.visitAnnotation("", true);
        classWriter20.visitSource("", "");
        classWriter20.visitOuterClass("hi!", "", "");
        classWriter20.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter61, 8);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter65.visitEnd();
        classWriter65.visitSource("", "");
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter65, 100);
        java.lang.String[] strArray72 = classReader59.getInterfaces();
        classWriter20.visit((-1), 256, "", "hi!", "", strArray72);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter11.visitField(11, "", "", "\007\000", (java.lang.Object) 256);
        classWriter11.visitEnd();
        int int77 = classWriter11.newUTF8("");
        // The following exception was thrown during execution in test generation
        try {
            int int78 = classWriter1.newConst((java.lang.Object) classWriter11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@6aa25667");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(51966, "", "", "");
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(16, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray34, (int) (short) 24832, (int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray6, (int) (byte) -1, 24832);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader10.readUnsignedShort(1763770624);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1763770624");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("\007\000", "", "", 1);
        int int18 = classWriter1.newField("", "\001", "hi!");
        int int23 = classWriter1.newMethod("hi!", "\001", "\007\000", false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(104);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter1.visitAnnotation("hi!", true);
        annotationVisitor40.visitEnd();
        annotationVisitor40.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int7 = classReader4.header;
        short short9 = classReader4.readShort((int) (short) 1);
        long long11 = classReader4.readLong((int) (short) 0);
        java.lang.String[] strArray12 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        long long40 = classReader34.readLong(7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("", true);
        int int48 = classWriter42.newNameType("hi!", "hi!");
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter42, (int) (byte) 0);
        int int52 = classReader34.getItem(0);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter55.visit((int) 'a', (int) '4', "", "hi!", "", strArray71);
        byte[] byteArray73 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader74.accept((org.mockito.asm.ClassVisitor) classWriter76, 8);
        char[] charArray85 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj86 = classReader74.readConst((int) (short) 1, charArray85);
        java.lang.String str87 = classReader34.readUTF8(103, charArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = classReader4.readUTF8(3072, charArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3819410108757049344L) + "'", long11 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6989595422067222633L + "'", long40 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "\007\000" + "'", obj86, "\007\000");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitIincInsn((int) (short) 10, 11);
        methodVisitor69.visitIntInsn(16778088, (-1161953280));
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "\007\000", "hi!", label91, label92, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (int) (byte) 0);
        classWriter1.visitSource("", "\007\000");
        int int12 = classWriter1.newUTF8("\007\000");
        byte[] byteArray13 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("", "\001", "hi!");
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 3, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 2, 0, 5, 0, 7, 0, 0, 0, 3, 7, -64, -128, 0, 8, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 3, 0, 0]");
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        byte[] byteArray43 = classWriter25.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter25.visitAnnotation("", false);
        byte[] byteArray47 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        int int49 = classReader48.getAccess();
        java.lang.String str50 = classReader48.getSuperName();
        java.lang.String[] strArray51 = classReader48.getInterfaces();
        classWriter1.visit(28, 1763770624, "", "hi!", "\007\000", strArray51);
        classWriter1.visitOuterClass("\007\000", "\007\000", "");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        byte[] byteArray80 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader81.accept((org.mockito.asm.ClassVisitor) classWriter83, 8);
        int int87 = classReader81.readUnsignedShort((int) (short) 10);
        int int89 = classReader81.readInt(2);
        int int90 = classReader81.header;
        java.lang.String[] strArray91 = classReader81.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor92 = classWriter1.visitMethod(24832, "\007\000", "\001", "\007\000", strArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 256 + "'", int87 == 256);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1161953280) + "'", int89 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 73 + "'", int90 == 73);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        byte[] byteArray53 = classReader20.b;
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray53, 132864, 151060483);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitMethodInsn((-1), "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn((-889275714), (int) (byte) 1);
        org.mockito.asm.Label label85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(83886080, label85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        short short27 = classReader24.readShort(4);
        long long29 = classReader24.readLong(13);
        java.lang.String[] strArray30 = classReader24.getInterfaces();
        char[] charArray38 = new char[] { 'a', 'a', '#', ' ', ' ', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = classReader24.readClass((int) (short) -17730, charArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7523580940677809920L + "'", long29 == 7523580940677809920L);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "aa#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "aa#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a, a, #,  ,  ,  ]");
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        byte[] byteArray34 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray34);
        int int37 = classReader36.getAccess();
        int int38 = classReader36.header;
        java.lang.String[] strArray39 = classReader36.getInterfaces();
        classWriter22.visit((int) (short) 0, 9, "", "", "", strArray39);
        classWriter22.visitOuterClass("\001", "hi!", "\001");
        classWriter22.visitInnerClass("\007\000", "\007\000", "", 0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        byte[] byteArray10 = classReader5.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray10, (int) (byte) 100, (int) (short) 8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) -1, 100);
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3);
        int int10 = classReader8.readUnsignedShort(10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader8.readInt(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        classWriter1.visitEnd();
        int int54 = classWriter1.newField("", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "\007\000", "");
        classWriter1.visitSource("\007\000", "");
        classWriter1.visitSource("", "\001");
        int int69 = classWriter1.newClass("hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter66.visitEnd();
        byte[] byteArray68 = classWriter66.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        java.lang.String[] strArray70 = classReader69.getInterfaces();
        java.lang.String str71 = classReader69.getSuperName();
        int int72 = classReader69.header;
        java.lang.String[] strArray73 = classReader69.getInterfaces();
        classWriter1.visit((int) (byte) 100, 7, "hi!", "hi!", "hi!", strArray73);
        classWriter1.visitSource("\007\000", "\007\000");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 254);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        byte[] byteArray78 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            long long80 = classReader20.readLong((int) (short) 26978);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitIincInsn((int) (short) 10, 11);
        methodVisitor69.visitIntInsn(16778088, (-1161953280));
        methodVisitor69.visitMethodInsn(28, "\007\000", "", "\001");
        methodVisitor69.visitTypeInsn(186, "hi!");
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(24832, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader4.getItem((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 0);
        java.lang.Object obj6 = null;
        org.mockito.asm.FieldVisitor fieldVisitor7 = classWriter1.visitField((int) (short) 100, "hi!", "", "\007\000", obj6);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        java.lang.String[] strArray17 = classReader16.getInterfaces();
        int int18 = classReader16.getAccess();
        int int20 = classReader16.readUnsignedShort(4);
        int int22 = classReader16.readByte(5);
        java.lang.String[] strArray23 = classReader16.getInterfaces();
        java.lang.String[] strArray24 = classReader16.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 2049, "hi!", "hi!", "hi!", strArray24);
        java.lang.Class<?> wildcardClass26 = methodVisitor25.getClass();
        org.junit.Assert.assertNotNull(fieldVisitor7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter22.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        long long67 = classReader61.readLong(7);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter69.visitAnnotation("", true);
        int int75 = classWriter69.newNameType("hi!", "hi!");
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter69, (int) (byte) 0);
        java.lang.String str78 = classReader61.getClassName();
        java.lang.String str79 = classReader61.getSuperName();
        java.lang.String[] strArray80 = classReader61.getInterfaces();
        classWriter22.visit((int) 'a', 83, "\007\000", "", "\007\000", strArray80);
        classWriter22.visitOuterClass("\001", "\001", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 6989595422067222633L + "'", long67 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMethodInsn(11, "hi!", "\007\000", "hi!");
        methodVisitor69.visitFieldInsn(12, "\007\000", "", "hi!");
        methodVisitor69.visitMaxs(1751720193, 0);
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(33, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-889275714));
        classWriter1.visitSource("\001", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) ' ');
        int int14 = classWriter10.newField("", "", "hi!");
        int int16 = classWriter10.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter10.visitAnnotation("", true);
        classWriter10.visitEnd();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        classWriter26.visit((int) (byte) 1, 100, "", "hi!", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter10.visitMethod(13, "\001", "\001", "hi!", strArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod(103, "\001", "", "hi!", strArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int12 = classReader4.readInt(0);
        long long14 = classReader4.readLong(2);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter38, 8);
        long long42 = classReader36.readLong(7);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter44.visitAnnotation("", true);
        int int50 = classWriter44.newNameType("hi!", "hi!");
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter44, (int) (byte) 0);
        int int54 = classReader36.getItem(0);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        classWriter57.visitSource("hi!", "");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter57.visit((int) 'a', (int) '4', "", "hi!", "", strArray73);
        byte[] byteArray75 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader76.accept((org.mockito.asm.ClassVisitor) classWriter78, 8);
        char[] charArray87 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj88 = classReader76.readConst((int) (short) 1, charArray87);
        java.lang.String str89 = classReader36.readUTF8(103, charArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = classReader4.readUTF8((int) '#', charArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-889275714) + "'", int12 == (-889275714));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-4990551337079930879L) + "'", long14 == (-4990551337079930879L));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6989595422067222633L + "'", long42 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + "\007\000" + "'", obj88, "\007\000");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label84 = null;
        int[] intArray87 = new int[] { 33554688, (byte) -1 };
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label[] labelArray89 = new org.mockito.asm.Label[] { label88 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label84, intArray87, labelArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[33554688, -1]");
        org.junit.Assert.assertNotNull(labelArray89);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMultiANewArrayInsn("\001", 132864);
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        byte[] byteArray11 = classReader4.b;
        short short13 = classReader4.readShort(12);
        int int14 = classReader4.getAccess();
        char[] charArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = classReader4.readUTF8((int) (byte) 1, charArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter16.visit((int) 'a', (int) '4', "", "hi!", "", strArray32);
        classWriter16.visitInnerClass("hi!", "", "", (int) 'a');
        int int42 = classWriter16.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        byte[] byteArray57 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        int int60 = classReader58.getAccess();
        int int62 = classReader58.readUnsignedShort(4);
        int int64 = classReader58.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter49.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter49.visit((int) (byte) 10, (-1), "", "", "", strArray73);
        classWriter16.visit((-889275714), 0, "", "hi!", "hi!", strArray73);
        classWriter1.visit(256, 1, "", "hi!", "", strArray73);
        int int80 = classWriter1.newField("hi!", "hi!", "hi!");
        java.lang.String[] strArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor86 = classWriter1.visitMethod((int) (short) 26913, "\001", "", "\007\000", strArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "hi!");
        methodVisitor69.visitInsn(0);
        org.mockito.asm.Label label88 = null;
        int[] intArray94 = new int[] { (short) 97, 223337, '4', (-889275714), (byte) 1 };
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label88, intArray94, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 223337, 52, -889275714, 1]");
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        classWriter22.visitInnerClass("\007\000", "hi!", "hi!", 20);
        int int35 = classWriter22.newMethod("", "", "hi!", true);
        classWriter22.visitOuterClass("\007\000", "", "");
        int int42 = classWriter22.newNameType("\001", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        java.lang.Object[] objArray80 = null;
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter83.visitEnd();
        byte[] byteArray85 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray89 = classReader86.getInterfaces();
        methodVisitor69.visitFrame((int) (byte) 1, 0, objArray80, (-1), (java.lang.Object[]) strArray89);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitTypeInsn(1751720193, "hi!");
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (byte) -1, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMaxs((int) (byte) 10, 0);
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, (int) (short) 24832);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader37.readByte(24832);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24832");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        java.lang.String[] strArray26 = classReader24.getInterfaces();
        char[] charArray29 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = classReader24.readConst(8, charArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String str10 = classReader4.getSuperName();
        byte[] byteArray11 = classReader4.b;
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        int int19 = classWriter13.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        classWriter26.visit((int) (byte) 1, 100, "", "hi!", "", strArray66);
        classWriter26.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter80.visitEnd();
        byte[] byteArray82 = classWriter80.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        java.lang.String[] strArray84 = classReader83.getInterfaces();
        java.lang.String str85 = classReader83.getSuperName();
        long long87 = classReader83.readLong((int) (byte) 0);
        java.lang.String[] strArray88 = classReader83.getInterfaces();
        classWriter26.visit(29285, 13, "hi!", "", "", strArray88);
        classWriter13.visit((-1161953280), 1751720193, "", "hi!", "hi!", strArray88);
        int int94 = classWriter13.newField("\007\000", "hi!", "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter13, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-3819410108757049344L) + "'", long87 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        int int12 = classWriter1.newField("hi!", "hi!", "hi!");
        int int15 = classWriter1.newNameType("\007\000", "hi!");
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("\007\000", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitIincInsn(1, 28);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "\007\000", "hi!", label94, label95, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        byte[] byteArray43 = classWriter25.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter25.visitAnnotation("", false);
        byte[] byteArray47 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        int int49 = classReader48.getAccess();
        java.lang.String str50 = classReader48.getSuperName();
        java.lang.String[] strArray51 = classReader48.getInterfaces();
        classWriter1.visit(28, 1763770624, "", "hi!", "\007\000", strArray51);
        byte[] byteArray53 = classWriter1.toByteArray();
        classWriter1.visitSource("hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 28, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 6, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 0, 2, 0, 7, 0, 6, 0, 8, 0, 2, 0, 8, 0, 8, 0, 8, 0, 2, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 4, 0, 2, 0, 5, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int7 = classReader4.header;
        short short9 = classReader4.readShort((int) (short) 1);
        char[] charArray12 = new char[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = classReader4.readConst((int) (short) 1280, charArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4]");
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMethodInsn(28, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "\001", "\001", label90, label91, 1025);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitIincInsn((int) (byte) 10, 1919222016);
        methodVisitor69.visitMaxs(100, (int) (short) 24948);
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\007\000", "\007\000", label96, label97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField(52, "", "hi!", "hi!", (java.lang.Object) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("hi!", true);
        java.lang.Class<?> wildcardClass17 = fieldVisitor13.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(65210);
        int int3 = classWriter1.newUTF8("\001");
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter9.visitEnd();
        byte[] byteArray11 = classWriter9.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter9.visitAnnotation("", true);
        classWriter9.visitOuterClass("", "", "hi!");
        int int23 = classWriter9.newMethod("", "hi!", "hi!", true);
        int int25 = classWriter9.newUTF8("hi!");
        classWriter9.visitEnd();
        int int28 = classWriter9.newClass("hi!");
        classWriter9.visitOuterClass("", "\001", "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField((int) ' ', "\007\000", "\001", "", (java.lang.Object) classWriter9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@66025047");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader20, 15);
        java.lang.String[] strArray55 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        classWriter58.visitSource("hi!", "");
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter58.visit((int) 'a', (int) '4', "", "hi!", "", strArray74);
        byte[] byteArray76 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader77.accept((org.mockito.asm.ClassVisitor) classWriter79, 8);
        char[] charArray88 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj89 = classReader77.readConst((int) (short) 1, charArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj90 = classReader20.readConst(0, charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + "\007\000" + "'", obj89, "\007\000");
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter49.visitEnd();
        classWriter49.visitSource("hi!", "");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter49.visit((int) 'a', (int) '4', "", "hi!", "", strArray65);
        classWriter25.visit(2, 7, "", "", "hi!", strArray65);
        byte[] byteArray68 = classWriter25.toByteArray();
        classWriter25.visitInnerClass("hi!", "", "hi!", 3);
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter25, 8);
        classWriter25.visitInnerClass("\007\000", "\007\000", "hi!", (int) (short) 0);
        classWriter25.visitSource("", "\007\000");
        classWriter25.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt(4);
        short short9 = classReader4.readShort(13);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int36 = classReader32.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter60, 8);
        char[] charArray69 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj70 = classReader58.readConst((int) (short) 1, charArray69);
        java.lang.Object obj71 = classReader32.readConst(4, charArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader4.readClass(131073, charArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "\007\000" + "'", obj70, "\007\000");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "Lhi!;");
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        int int36 = classWriter30.newNameType("hi!", "hi!");
        classWriter30.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter48.visitAnnotation("", false);
        byte[] byteArray70 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        classWriter30.visit(51966, (int) 'a', "", "\007\000", "", strArray72);
        classWriter30.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter30, (int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter78.visitEnd();
        byte[] byteArray80 = classWriter78.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter78.visitAnnotation("", true);
        classWriter78.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = classWriter78.visitAnnotation("", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter78, 0);
        java.lang.String str94 = classReader20.getSuperName();
        int int95 = classReader20.header;
        byte[] byteArray96 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter98 = new org.mockito.asm.ClassWriter(classReader20, 15);
        int int99 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 73 + "'", int95 == 73);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 52 + "'", int99 == 52);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        byte[] byteArray10 = classReader5.b;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader5.readByte(132864);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 132864");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter38.visit((int) 'a', (int) '4', "", "hi!", "", strArray54);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        classWriter38.visit((int) (byte) 1, 100, "", "hi!", "", strArray78);
        classWriter26.visit((int) '4', (int) (short) 100, "", "", "", strArray78);
        classWriter1.visit((int) '#', (int) (short) 0, "", "", "", strArray78);
        classWriter1.visitInnerClass("hi!", "", "", (int) (byte) 0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter(1);
        int int91 = classWriter1.newConst((java.lang.Object) 1);
        int int94 = classWriter1.newNameType("", "hi!");
        java.lang.Class<?> wildcardClass95 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 8 + "'", int94 == 8);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int26 = classWriter1.newNameType("hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("\007\000", false);
        java.lang.Class<?> wildcardClass30 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMultiANewArrayInsn("", 0);
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitIincInsn(254, 83886080);
        methodVisitor69.visitInsn(88);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitMaxs(256, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitInsn(17);
        org.mockito.asm.Label label92 = null;
        int[] intArray93 = null;
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] { label94 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label92, intArray93, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int35 = classReader32.header;
        int int37 = classReader32.readInt(11);
        java.lang.String str38 = classReader32.getClassName();
        java.lang.String[] strArray39 = classReader32.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        char[] charArray72 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj73 = classReader61.readConst((int) (short) 1, charArray72);
        java.lang.Object obj74 = classReader32.readConst(1, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj75 = classReader8.readConst(1792, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 223337 + "'", int37 == 223337);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\007\000" + "'", obj73, "\007\000");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "\007\000" + "'", obj74, "\007\000");
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter38.visit((int) 'a', (int) '4', "", "hi!", "", strArray54);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        classWriter38.visit((int) (byte) 1, 100, "", "hi!", "", strArray78);
        classWriter26.visit((int) '4', (int) (short) 100, "", "", "", strArray78);
        classWriter1.visit((int) '#', (int) (short) 0, "", "", "", strArray78);
        classWriter1.visitInnerClass("", "\001", "hi!", (-1161953280));
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int12 = classWriter1.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        byte[] byteArray26 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int29 = classReader27.getAccess();
        int int31 = classReader27.readUnsignedShort(4);
        int int33 = classReader27.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter18.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (byte) 10, (-1), "", "", "", strArray42);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter49.visitEnd();
        classWriter49.visitSource("hi!", "");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter49.visit((int) 'a', (int) '4', "", "hi!", "", strArray65);
        byte[] byteArray67 = classWriter49.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader68.accept((org.mockito.asm.ClassVisitor) classWriter70, 8);
        long long74 = classReader68.readLong(7);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter76.visitAnnotation("", true);
        int int82 = classWriter76.newNameType("hi!", "hi!");
        classReader68.accept((org.mockito.asm.ClassVisitor) classWriter76, (int) (byte) 0);
        java.lang.String[] strArray85 = classReader68.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter18.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray85);
        methodVisitor86.visitIincInsn(9, (int) 'a');
        methodVisitor86.visitMaxs((int) (short) 0, 48640);
        methodVisitor86.visitEnd();
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor86.visitTryCatchBlock(label94, label95, label96, "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor99 = classWriter1.visitField((-21316096), "", "\007\000", "", (java.lang.Object) label95);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 6989595422067222633L + "'", long74 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(fieldVisitor99);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("", 9);
        java.lang.Class<?> wildcardClass88 = methodVisitor69.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "hi!", "\007\000", label96, label97, (-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(3, 65210);
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(10, (-21316096));
        methodVisitor69.visitVarInsn(254, (int) (short) -326);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitVarInsn((int) (short) 100, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMaxs(0, 8);
        methodVisitor69.visitMethodInsn(1751720193, "", "\007\000", "hi!");
        methodVisitor69.visitFieldInsn(28, "\001", "hi!", "\001");
        methodVisitor69.visitTypeInsn((-889275714), "");
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str21 = classReader20.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = classReader20.readLong(2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMethodInsn((int) (short) 10, "\007\000", "\007\000", "");
        org.mockito.asm.Label label90 = null;
        int[] intArray94 = new int[] { (short) 0, (byte) 100, 512 };
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label90, intArray94, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 100, 512]");
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitMaxs(1399416686, 1751720193);
        methodVisitor69.visitIntInsn((int) (short) 100, (int) (short) 26978);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        long long7 = classReader5.readLong(12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader5, 33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMaxs(16777223, 13);
        methodVisitor69.visitMaxs((-1161953280), 10);
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getClassName();
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        classWriter39.visitEnd();
        classWriter39.visitEnd();
        byte[] byteArray46 = classWriter39.toByteArray();
        classWriter39.visitSource("hi!", "\007\000");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter39, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = classReader20.getItem(872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 872");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        byte[] byteArray31 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter34, 8);
        char[] charArray43 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj44 = classReader32.readConst((int) (short) 1, charArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = classReader4.readConst(132864, charArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 132864");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "\007\000" + "'", obj44, "\007\000");
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        classWriter25.visitOuterClass("\007\000", "hi!", "\001");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        byte[] byteArray54 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader55.accept((org.mockito.asm.ClassVisitor) classWriter57, 8);
        int int61 = classReader55.readUnsignedShort((int) (short) 10);
        int int63 = classReader55.readInt(2);
        int int64 = classReader55.header;
        java.lang.String[] strArray65 = classReader55.getInterfaces();
        classWriter25.visit(10, (int) (byte) -1, "\007\000", "hi!", "hi!", strArray65);
        classWriter25.visitOuterClass("", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter25.visitAnnotation("\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = annotationVisitor73.visitArray("\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 256 + "'", int61 == 256);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1161953280) + "'", int63 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 73 + "'", int64 == 73);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = annotationVisitor51.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor53.visitAnnotation("\007\000", "hi!");
        annotationVisitor56.visitEnd();
        annotationVisitor56.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        classWriter49.visitOuterClass("", "hi!", "hi!");
        classWriter49.visitSource("\007\000", "\007\000");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter49, 131073);
        org.mockito.asm.Attribute attribute61 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter49.visitAttribute(attribute61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        byte[] byteArray28 = classWriter1.toByteArray();
        int int31 = classWriter1.newNameType("\007\000", "\001");
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 11, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 3, 0, 5, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 2, 0, 1, 0, 9, 0, 0, 0, 0, 0, 10, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 97]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 13 + "'", int31 == 13);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int29 = classWriter1.newUTF8("hi!");
        int int33 = classWriter1.newField("\007\000", "hi!", "\007\000");
        int int36 = classWriter1.newNameType("\007\000", "hi!");
        int int39 = classWriter1.newNameType("hi!", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 11 + "'", int36 == 11);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitVarInsn(9, (int) (short) 100);
        methodVisitor69.visitTypeInsn(2, "hi!");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) 100, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray7 = classReader4.getInterfaces();
        java.lang.String[] strArray8 = classReader4.getInterfaces();
        int int9 = classReader4.header;
        java.lang.Class<?> wildcardClass10 = classReader4.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int8 = classWriter1.newNameType("", "");
        classWriter1.visitEnd();
        int int11 = classWriter1.newUTF8("");
        int int16 = classWriter1.newMethod("", "\001", "", false);
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int15 = classWriter1.newField("", "hi!", "");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        java.lang.String[] strArray30 = classReader29.getInterfaces();
        int int32 = classReader29.readInt((int) (byte) 0);
        java.lang.String str33 = classReader29.getSuperName();
        java.lang.String[] strArray34 = classReader29.getInterfaces();
        java.lang.String[] strArray35 = classReader29.getInterfaces();
        classWriter1.visit(0, (int) (short) 0, "", "", "", strArray35);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        byte[] byteArray44 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        short short48 = classReader45.readShort((int) (byte) 1);
        java.lang.String str49 = classReader45.getSuperName();
        java.lang.String str50 = classReader45.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter1.visitField((int) (byte) 100, "", "", "hi!", (java.lang.Object) str50);
        fieldVisitor51.visitEnd();
        fieldVisitor51.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-889275714) + "'", int32 == (-889275714));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -326 + "'", short48 == (short) -326);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(fieldVisitor51);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) -1, 100);
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3);
        int int10 = classReader8.readUnsignedShort(10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader8.readInt(131073);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        classWriter23.visitSource("hi!", "");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter23.visit((int) 'a', (int) '4', "", "hi!", "", strArray39);
        byte[] byteArray41 = classWriter23.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter23.visitAnnotation("", false);
        byte[] byteArray45 = classWriter23.toByteArray();
        classWriter23.visitInnerClass("hi!", "", "", 8);
        int int55 = classWriter23.newMethod("hi!", "", "", true);
        int int57 = classWriter23.newConst((java.lang.Object) 2);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        classWriter64.visitSource("hi!", "");
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter64.visit((int) 'a', (int) '4', "", "hi!", "", strArray80);
        byte[] byteArray82 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader83.accept((org.mockito.asm.ClassVisitor) classWriter85, 8);
        int int89 = classReader83.readUnsignedShort((int) (short) 10);
        int int91 = classReader83.readInt(2);
        int int92 = classReader83.header;
        java.lang.String[] strArray93 = classReader83.getInterfaces();
        classWriter23.visit((int) 'a', 6, "hi!", "hi!", "\007\000", strArray93);
        org.mockito.asm.MethodVisitor methodVisitor95 = classWriter1.visitMethod(14, "", "\007\000", "", strArray93);
        methodVisitor95.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 11 + "'", int57 == 11);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 256 + "'", int89 == 256);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1161953280) + "'", int91 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 73 + "'", int92 == 73);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor95);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader24.readByte((-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -889275714");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        int int10 = classReader5.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader5, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        java.lang.String[] strArray11 = classReader4.getInterfaces();
        java.lang.String str12 = classReader4.getSuperName();
        java.lang.String str13 = classReader4.getSuperName();
        int int15 = classReader4.readByte((int) (byte) 0);
        java.lang.String[] strArray16 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader42, 2);
        byte[] byteArray45 = classReader42.b;
        java.lang.String str46 = classReader42.getSuperName();
        java.lang.String[] strArray47 = classReader42.getInterfaces();
        int int48 = classReader42.header;
        char[] charArray54 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str55 = classReader42.readUTF8(20, charArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = classReader4.readUTF8((int) (short) 26978, charArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 202 + "'", int15 == 202);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 103 + "'", int48 == 103);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        java.lang.Object[] objArray80 = null;
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter83.visitEnd();
        byte[] byteArray85 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray89 = classReader86.getInterfaces();
        methodVisitor69.visitFrame((int) (byte) 1, 0, objArray80, (-1), (java.lang.Object[]) strArray89);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = annotationVisitor93.visitArray("");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int30 = classReader26.getItem(3);
        int int32 = classReader26.readUnsignedShort(8);
        short short34 = classReader26.readShort((int) (short) 9);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = classReader26.readLong((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 2049 + "'", short34 == (short) 2049);
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (byte) 0);
        methodVisitor69.visitMethodInsn(20, "hi!", "", "");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] { label91 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(0, 16777217, label90, labelArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(labelArray92);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(196613, 88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitParameterAnnotation(202, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitVarInsn((int) (byte) -1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitParameterAnnotation(51966, "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "hi!", "", label96, label97, 33554688);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter22.visitAnnotation("", false);
        byte[] byteArray44 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray48 = new org.mockito.asm.Attribute[] {};
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter47, attributeArray48, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        byte[] byteArray59 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String[] strArray61 = classReader60.getInterfaces();
        int int62 = classReader60.getAccess();
        int int64 = classReader60.readUnsignedShort(4);
        int int66 = classReader60.readByte(5);
        java.lang.String[] strArray67 = classReader60.getInterfaces();
        classWriter47.visit(0, (int) (short) 100, "hi!", "", "", strArray67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 100, "", "hi!", "\001", strArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray48);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        int int7 = classReader5.getAccess();
        int int9 = classReader5.readByte((int) (short) 10);
        int int10 = classReader5.header;
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        byte[] byteArray31 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader33, 256);
        int int36 = classReader33.header;
        int int38 = classReader33.readInt(11);
        java.lang.String str39 = classReader33.getClassName();
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        classWriter43.visitSource("hi!", "");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter43.visit((int) 'a', (int) '4', "", "hi!", "", strArray59);
        byte[] byteArray61 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter64, 8);
        char[] charArray73 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj74 = classReader62.readConst((int) (short) 1, charArray73);
        java.lang.Object obj75 = classReader33.readConst(1, charArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = classReader5.readUTF8((-889275714), charArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 73 + "'", int36 == 73);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 223337 + "'", int38 == 223337);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "\007\000" + "'", obj74, "\007\000");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "\007\000" + "'", obj75, "\007\000");
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitIntInsn((-889275714), 3);
        methodVisitor69.visitIincInsn(5, (-1161953280));
        methodVisitor69.visitFieldInsn(1919222016, "\001", "", "\001");
        java.lang.Class<?> wildcardClass96 = methodVisitor69.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter1.visitAnnotation("", true);
        int int73 = classWriter1.newMethod("hi!", "\007\000", "\007\000", false);
        org.mockito.asm.Attribute attribute74 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 11 + "'", int73 == 11);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMethodInsn((int) (short) 10, "\007\000", "\007\000", "");
        methodVisitor69.visitMaxs((int) ' ', 83);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        int int24 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", (-889275714));
        byte[] byteArray30 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 12, 33554688);
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader33.readShort(21353);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21353");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 18, 0, 2, 0, 3, 0, 6, 0, 1, 0, 32, 0, 3, 0, 6, 0, 2, -70, -66, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitVarInsn(9, (int) (short) 100);
        methodVisitor69.visitFieldInsn(20, "\001", "", "");
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitInsn(47806);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) 8449, 104);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 16);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader5.readByte(0);
        java.lang.String[] strArray8 = classReader5.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader5.readInt((int) (short) 24832);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 202 + "'", int7 == 202);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        int int10 = classReader4.header;
        int int11 = classReader4.header;
        java.lang.String str12 = classReader4.getSuperName();
        int int13 = classReader4.getAccess();
        char[] charArray18 = new char[] { 'a', 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = classReader4.readConst(2049, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2049");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "aa#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "aa#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, a, #]");
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 33, 83886080);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(186);
        org.mockito.asm.Label label84 = null;
        int[] intArray91 = new int[] { (short) 8449, 20, 52, 16777216, 4, 1025 };
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] { label92 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label84, intArray91, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[8449, 20, 52, 16777216, 4, 1025]");
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter24.visit((int) 'a', (int) '4', "", "hi!", "", strArray40);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        classWriter24.visit((int) (byte) 1, 100, "", "hi!", "", strArray64);
        classWriter1.visit(0, 2, "", "hi!", "hi!", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int38 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("", "");
        int int51 = classWriter44.newNameType("hi!", "");
        int int55 = classWriter44.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter1.visitField(65210, "", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        byte[] byteArray80 = classWriter62.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter62.visitAnnotation("", false);
        byte[] byteArray84 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter(classReader85, 2);
        byte[] byteArray88 = classReader85.b;
        java.lang.String str89 = classReader85.getClassName();
        short short91 = classReader85.readShort((int) (short) 10);
        byte[] byteArray92 = classReader85.b;
        java.lang.String[] strArray93 = classReader85.getInterfaces();
        long long95 = classReader85.readLong((int) (byte) 100);
        int int97 = classReader85.readByte(0);
        java.lang.String[] strArray98 = classReader85.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor99 = classWriter1.visitMethod(0, "\007\000", "", "hi!", strArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor56);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + short91 + "' != '" + (short) 256 + "'", short91 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 8029481630357783296L + "'", long95 == 8029481630357783296L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 202 + "'", int97 == 202);
        org.junit.Assert.assertNotNull(strArray98);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(119, 1919222016);
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "", "\001", label81, label82, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        int int12 = classReader4.readByte(1);
        int int13 = classReader4.header;
        int int15 = classReader4.readInt((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader4.getItem(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-889275714) + "'", int15 == (-889275714));
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor8.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor8.visitArray("\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "hi!", "", 9);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", (int) (short) -1);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.Class<?> wildcardClass33 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitMaxs(1919222016, 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor88.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn((int) (short) 10);
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(47806, label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter22.visitAnnotation("hi!", true);
        byte[] byteArray31 = classWriter22.toByteArray();
        classWriter22.visitOuterClass("", "", "hi!");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        byte[] byteArray43 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        int int46 = classReader44.readUnsignedShort((int) (short) 0);
        int int47 = classReader44.header;
        int int49 = classReader44.readByte(0);
        java.lang.String[] strArray50 = classReader44.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor51 = classWriter22.visitMethod(83886080, "", "", "", strArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 51966 + "'", int46 == 51966);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 202 + "'", int49 == 202);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int14 = classWriter1.newField("", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", false);
        annotationVisitor17.visitEnum("", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor17.visitArray("");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray28, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray28);
        byte[] byteArray35 = classReader34.b;
        java.lang.String[] strArray36 = classReader34.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor17.visit("\007\000", (java.lang.Object) strArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@10433cd3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        int int10 = classReader5.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = classReader5.readLong(65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter34.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("hi!", "");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter44.visit((int) 'a', (int) '4', "", "hi!", "", strArray60);
        classWriter34.visit((int) ' ', 48640, "hi!", "", "", strArray60);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter34.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter72.visitEnd();
        classWriter72.visitSource("hi!", "");
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter72.visit((int) 'a', (int) '4', "", "hi!", "", strArray88);
        classWriter34.visit(9, (int) (short) -17730, "hi!", "\007\000", "\001", strArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor91 = classWriter1.visitField((-1107296256), "", "\001", "\007\000", (java.lang.Object) classWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@581472b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitFieldInsn((int) (byte) 10, "", "hi!", "\007\000");
        methodVisitor69.visitIntInsn((int) (short) 100, 51);
        methodVisitor69.visitInsn((int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        byte[] byteArray31 = classReader24.b;
        java.lang.String[] strArray32 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader55, 256);
        int int59 = classReader55.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        byte[] byteArray80 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader81.accept((org.mockito.asm.ClassVisitor) classWriter83, 8);
        char[] charArray92 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj93 = classReader81.readConst((int) (short) 1, charArray92);
        java.lang.Object obj94 = classReader55.readConst(4, charArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = classReader24.readClass(51, charArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + "\007\000" + "'", obj93, "\007\000");
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertEquals(obj94.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj94), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj94), "Lhi!;");
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitInsn(2);
        methodVisitor69.visitIntInsn(2, 4);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        int int23 = classReader21.readByte(0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 202 + "'", int23 == 202);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label[] labelArray83 = new org.mockito.asm.Label[] { label82 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(0, (int) (byte) -1, label81, labelArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray83);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        classWriter1.visitOuterClass("hi!", "hi!", "\007\000");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter24.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter33.visit((int) 'a', (int) '4', "", "hi!", "", strArray49);
        byte[] byteArray51 = classWriter33.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter33.visitAnnotation("", false);
        byte[] byteArray55 = classWriter33.toByteArray();
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter61.visitEnd();
        byte[] byteArray63 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        java.lang.String[] strArray65 = classReader64.getInterfaces();
        short short67 = classReader64.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter33.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = fieldVisitor68.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter24.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter79.visitEnd();
        byte[] byteArray81 = classWriter79.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        java.lang.String[] strArray83 = classReader82.getInterfaces();
        int int85 = classReader82.readInt((int) (byte) 0);
        java.lang.String str86 = classReader82.getSuperName();
        java.lang.String[] strArray87 = classReader82.getInterfaces();
        classWriter24.visit(47806, (int) '4', "", "", "hi!", strArray87);
        classWriter1.visit((int) (short) 1792, 11, "", "\007\000", "hi!", strArray87);
        int int93 = classWriter1.newField("", "hi!", "");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) -326 + "'", short67 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-889275714) + "'", int85 == (-889275714));
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitVarInsn(14, 1399416686);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (short) 2049, label82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitSource("", "\007\000");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "\007\000");
        methodVisitor69.visitIntInsn((int) (byte) -1, (int) (byte) -1);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(57174305);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(65210, 256);
        org.mockito.asm.Attribute attribute91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        java.lang.String str38 = classReader20.getClassName();
        int int40 = classReader20.readByte(0);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader20.readUnsignedShort((-1161953280));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1161953280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 202 + "'", int40 == 202);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int8 = classReader7.header;
        int int9 = classReader7.getAccess();
        int int10 = classReader7.header;
        byte[] byteArray11 = classReader7.b;
        int int13 = classReader7.readUnsignedShort(0);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        classWriter15.visitEnd();
        byte[] byteArray21 = classWriter15.toByteArray();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter27.visitAnnotation("", true);
        classWriter27.visitSource("", "");
        classWriter27.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter27.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter27.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter15.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classWriter15.visitInnerClass("", "", "", (int) '4');
        int int56 = classWriter15.newField("", "", "");
        int int58 = classWriter15.newClass("\007\000");
        int int62 = classWriter15.newField("\007\000", "", "hi!");
        classWriter15.visitSource("hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter15, 28526);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51966 + "'", int13 == 51966);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(fieldVisitor42);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitFieldInsn(16777223, "", "\007\000", "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\001", (int) (short) 1280);
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(9, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int38 = classWriter1.newField("hi!", "hi!", "hi!");
        int int41 = classWriter1.newNameType("", "");
        org.mockito.asm.Attribute attribute42 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        fieldVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor16.visitAnnotation("", true);
        annotationVisitor20.visitEnd();
        annotationVisitor20.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor20.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor24.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor24.visitArray("\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMaxs((int) (byte) 10, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = annotationVisitor90.visitAnnotation("\007\000", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("hi!", "");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter27.visit((int) 'a', (int) '4', "", "hi!", "", strArray43);
        byte[] byteArray45 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader46.accept((org.mockito.asm.ClassVisitor) classWriter48, 8);
        byte[] byteArray51 = classWriter48.toByteArray();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        byte[] byteArray60 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray60);
        int int63 = classReader62.getAccess();
        int int64 = classReader62.header;
        java.lang.String[] strArray65 = classReader62.getInterfaces();
        classWriter48.visit((int) (short) 0, 9, "", "", "", strArray65);
        classWriter1.visit((int) (short) -1, 14, "\007\000", "hi!", "\007\000", strArray65);
        int int69 = classWriter1.newUTF8("");
        org.mockito.asm.Attribute attribute70 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(52, (-889275714));
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "\001", "", label90, label91, 33554688);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        byte[] byteArray11 = classReader4.b;
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        classWriter14.visitSource("hi!", "");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter14.visit((int) 'a', (int) '4', "", "hi!", "", strArray30);
        byte[] byteArray32 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader33.accept((org.mockito.asm.ClassVisitor) classWriter35, 8);
        char[] charArray44 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj45 = classReader33.readConst((int) (short) 1, charArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = classReader4.readConst((int) (short) 1280, charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "\007\000" + "'", obj45, "\007\000");
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        byte[] byteArray16 = classWriter13.toByteArray();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter43, 8);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        classWriter47.visitSource("", "");
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter47, 100);
        classWriter47.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter13.visitField(51966, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int59 = classWriter1.newConst((java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = annotationVisitor62.visitAnnotation("", "hi!");
        annotationVisitor65.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = annotationVisitor65.visitAnnotation("", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = annotationVisitor65.visitAnnotation("\001", "\007\000");
        java.lang.Object obj74 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor72.visit("", obj74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter10.visitAnnotation("", true);
        classWriter10.visitSource("", "");
        classWriter10.visitOuterClass("hi!", "", "");
        classWriter10.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter55, 100);
        java.lang.String[] strArray62 = classReader49.getInterfaces();
        classWriter10.visit((-1), 256, "", "hi!", "", strArray62);
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter1.visitField(11, "", "", "\007\000", (java.lang.Object) 256);
        classWriter1.visitEnd();
        byte[] byteArray66 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray66, 28, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 1, 0, 3, 7, -64, -128, 3, 0, 0, 1, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0]");
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor16.visitAnnotation("", false);
        annotationVisitor19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor19.visitAnnotation("\001", "\007\000");
        annotationVisitor23.visitEnum("", "\001", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitEnd();
        byte[] byteArray33 = classWriter1.toByteArray();
        int int35 = classWriter1.newClass("hi!");
        classWriter1.visitSource("hi!", "\001");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter44.visitAnnotation("", true);
        classWriter44.visitSource("", "");
        int int53 = classWriter44.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        classWriter59.visitSource("", "");
        classWriter59.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter59.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter59.visitOuterClass("", "", "");
        classWriter59.visitSource("", "");
        int int84 = classWriter59.newNameType("", "hi!");
        byte[] byteArray85 = classWriter59.toByteArray();
        int int89 = classWriter59.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor90 = classWriter44.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        byte[] byteArray91 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray91);
        org.mockito.asm.ClassReader classReader93 = new org.mockito.asm.ClassReader(byteArray91);
        int int95 = classReader93.readUnsignedShort(0);
        int int97 = classReader93.readInt((int) (byte) 10);
        java.lang.String[] strArray98 = classReader93.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor99 = classWriter1.visitMethod(1025, "\001", "\001", "", strArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 12, 0, 2, 0, 2, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 3, 0, 8, 0, 10, 0, 0, 0, 10, 0, 1, 0, 4, 0, 4, 0, 2, 0, 100, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 13 + "'", int89 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 8, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 51966 + "'", int95 == 51966);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 16777217 + "'", int97 == 16777217);
        org.junit.Assert.assertNotNull(strArray98);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        methodVisitor69.visitVarInsn(119, 119);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "\007\000");
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(0, label92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int37 = classReader20.getAccess();
        long long39 = classReader20.readLong((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            short short41 = classReader20.readShort((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1107296256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 72061341013180672L + "'", long39 == 72061341013180672L);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int37 = classWriter1.newNameType("", "");
        int int41 = classWriter1.newField("", "hi!", "\007\000");
        classWriter1.visitInnerClass("\007\000", "", "", 1919222016);
        classWriter1.visitOuterClass("hi!", "\007\000", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor34.visitAnnotation("hi!", false);
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = fieldVisitor34.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor34.visitAnnotation("\007\000", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn((-21316096), 186);
        methodVisitor69.visitMaxs((int) (byte) 10, 10);
        org.mockito.asm.Label label86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(3, label86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.getItem((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter18.visitEnd();
        byte[] byteArray20 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        java.lang.String[] strArray22 = classReader21.getInterfaces();
        int int23 = classReader21.getAccess();
        int int25 = classReader21.readUnsignedShort(4);
        int int27 = classReader21.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter12.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        classWriter12.visit((int) (byte) 10, (-1), "", "", "", strArray36);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        classWriter43.visitSource("hi!", "");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter43.visit((int) 'a', (int) '4', "", "hi!", "", strArray59);
        byte[] byteArray61 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter64, 8);
        long long68 = classReader62.readLong(7);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter70.visitAnnotation("", true);
        int int76 = classWriter70.newNameType("hi!", "hi!");
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter70, (int) (byte) 0);
        java.lang.String[] strArray79 = classReader62.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter12.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray79);
        classWriter1.visit((int) (short) 100, 10, "hi!", "hi!", "", strArray79);
        int int84 = classWriter1.newNameType("", "");
        classWriter1.visitSource("\007\000", "\007\000");
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 6989595422067222633L + "'", long68 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        classWriter11.visitEnd();
        classWriter11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter11.visitAnnotation("hi!", false);
        java.lang.Object obj25 = null;
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter11.visitField((-1), "", "", "", obj25);
        classWriter11.visitInnerClass("", "", "", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter11.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor34.visitArray("");
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classWriter1.newConst((java.lang.Object) annotationVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@6eec7e62");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "", "\001");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader42, 256);
        java.lang.String[] strArray45 = classReader42.getInterfaces();
        java.lang.String[] strArray46 = classReader42.getInterfaces();
        int int47 = classReader42.getAccess();
        long long49 = classReader42.readLong((int) ' ');
        java.lang.String[] strArray50 = classReader42.getInterfaces();
        classWriter1.visit((-1161953280), 8, "", "\001", "", strArray50);
        int int55 = classWriter1.newField("hi!", "", "\001");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7022366853158731786L + "'", long49 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 11 + "'", int55 == 11);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(51966, (int) (byte) 1);
        org.mockito.asm.Label label86 = null;
        int[] intArray87 = null;
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label86, intArray87, labelArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = annotationVisitor28.visitArray("");
        annotationVisitor30.visitEnum("\001", "hi!", "\007\000");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor30);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        classWriter29.visitEnd();
        classWriter29.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        byte[] byteArray41 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        int int44 = classReader42.getAccess();
        int int46 = classReader42.readUnsignedShort(4);
        int int48 = classReader42.readByte(5);
        java.lang.String[] strArray49 = classReader42.getInterfaces();
        int int51 = classReader42.getItem(0);
        java.lang.String[] strArray52 = classReader42.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod(0, "", "\001", "hi!", strArray52);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readByte(1);
        java.lang.String[] strArray65 = classReader62.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter29.visitMethod(104, "\001", "", "hi!", strArray65);
        org.mockito.asm.Label label67 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor66.visitLabel(label67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 254 + "'", int64 == 254);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getClassName();
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        classWriter39.visitEnd();
        classWriter39.visitEnd();
        byte[] byteArray46 = classWriter39.toByteArray();
        classWriter39.visitSource("hi!", "\007\000");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter39, 9);
        classWriter39.visitSource("\007\000", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        java.lang.String[] strArray17 = classReader16.getInterfaces();
        int int18 = classReader16.getAccess();
        int int20 = classReader16.readUnsignedShort(4);
        int int22 = classReader16.readByte(5);
        java.lang.String[] strArray23 = classReader16.getInterfaces();
        classWriter1.visit(2, (int) (short) -1, "", "", "hi!", strArray23);
        int int26 = classWriter1.newClass("");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute28 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 28);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader7, (int) '#');
        int int13 = classReader7.readUnsignedShort(73);
        int int15 = classReader7.readInt(12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = classReader7.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 256 + "'", int13 == 256);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 57174305 + "'", int15 == 57174305);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        org.mockito.asm.Label label80 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(29285, label80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIntInsn((int) (short) 100, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) -13570, label85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitMethodInsn((-1), "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter(52);
        byte[] byteArray84 = classWriter83.toByteArray();
        classWriter83.visitOuterClass("hi!", "", "");
        classWriter83.visitEnd();
        classWriter83.visitInnerClass("", "\001", "hi!", (int) (short) 2);
        annotationVisitor80.visit("", (java.lang.Object) "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newConst((java.lang.Object) (short) 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "", 10);
        byte[] byteArray17 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        byte[] byteArray26 = classWriter24.toByteArray();
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter58, 8);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("", "");
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter62, 100);
        int int70 = classReader56.readByte(1);
        byte[] byteArray71 = classReader56.b;
        java.lang.String[] strArray72 = classReader56.getInterfaces();
        classWriter24.visit(0, 223337, "\001", "\007\000", "\001", strArray72);
        classWriter1.visit((int) (short) -16896, (int) (short) 2049, "hi!", "\001", "hi!", strArray72);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 3, 0, 0, 0, 0, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 8, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 10, 0, 1, 0, 7, 0, 9, 0, 1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 254 + "'", int70 == 254);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.Label label88 = null;
        int[] intArray93 = new int[] { (short) 97, 29285, 16, 1763770624 };
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] { label94 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label88, intArray93, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[97, 29285, 16, 1763770624]");
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter40, 8);
        byte[] byteArray43 = classWriter40.toByteArray();
        int int45 = classWriter40.newClass("hi!");
        int int46 = classWriter1.newConst((java.lang.Object) int45);
        byte[] byteArray47 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("\001", "", "\007\000", 28);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 1, 0, 1, 12, 0, 2, 0, 2, 3, 0, 0, 0, 4, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 3, 0, 4, 0, 10, 0, 0, 0, 10, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0]");
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "\001", "\001", label94, label95, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        byte[] byteArray29 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        java.lang.String[] strArray31 = classReader30.getInterfaces();
        short short33 = classReader30.readShort((int) (byte) 1);
        byte[] byteArray34 = classReader30.b;
        java.lang.String[] strArray35 = classReader30.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor36 = classWriter1.visitMethod((int) (byte) 1, "\007\000", "", "hi!", strArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) -326 + "'", short33 == (short) -326);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int12 = classReader4.readInt(0);
        byte[] byteArray13 = classReader4.b;
        java.lang.String str14 = classReader4.getSuperName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        byte[] byteArray18 = classWriter16.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter16.visitAnnotation("", true);
        classWriter16.visitOuterClass("", "", "hi!");
        int int30 = classWriter16.newMethod("", "hi!", "hi!", true);
        int int34 = classWriter16.newField("hi!", "", "hi!");
        int int36 = classWriter16.newClass("");
        classWriter16.visitInnerClass("\007\000", "hi!", "\007\000", 16778088);
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-889275714) + "'", int12 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("\007\000", "", "hi!", (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        int int34 = classReader32.getAccess();
        int int36 = classReader32.readUnsignedShort(4);
        int int38 = classReader32.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter23.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter23.visit((int) (byte) 10, (-1), "", "", "", strArray47);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter54.visitEnd();
        classWriter54.visitSource("hi!", "");
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter54.visit((int) 'a', (int) '4', "", "hi!", "", strArray70);
        byte[] byteArray72 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader73.accept((org.mockito.asm.ClassVisitor) classWriter75, 8);
        long long79 = classReader73.readLong(7);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter81.visitAnnotation("", true);
        int int87 = classWriter81.newNameType("hi!", "hi!");
        classReader73.accept((org.mockito.asm.ClassVisitor) classWriter81, (int) (byte) 0);
        java.lang.String[] strArray90 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter23.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray90);
        int int92 = classWriter1.newConst((java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = annotationVisitor95.visitArray("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor99 = annotationVisitor97.visitArray("\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 6989595422067222633L + "'", long79 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 7 + "'", int92 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor95);
        org.junit.Assert.assertNotNull(annotationVisitor97);
        org.junit.Assert.assertNotNull(annotationVisitor99);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readInt((int) (byte) 10);
        long long30 = classReader26.readLong(103);
        java.lang.String str31 = classReader26.getSuperName();
        java.lang.String str32 = classReader26.getSuperName();
        byte[] byteArray33 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            long long35 = classReader26.readLong(16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16777223 + "'", int28 == 16777223);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 562962838716416L + "'", long30 == 562962838716416L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str23 = classReader22.getSuperName();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter25.visitAnnotation("", true);
        int int33 = classWriter25.newMethod("", "", "", true);
        java.lang.Object obj38 = null;
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter25.visitField((int) '#', "", "hi!", "", obj38);
        classWriter25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter25.visitAnnotation("hi!", false);
        classReader22.accept((org.mockito.asm.ClassVisitor) classWriter25, 48640);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter25.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (short) 100);
        org.mockito.asm.Label label86 = null;
        int[] intArray90 = new int[] { (short) 0, (byte) 100, 11 };
        org.mockito.asm.Label[] labelArray91 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label86, intArray90, labelArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 100, 11]");
        org.junit.Assert.assertNotNull(labelArray91);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        classWriter1.visitInnerClass("", "\007\000", "", (int) (short) 1);
        byte[] byteArray27 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray27, 2049, (int) (short) 8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 3, 7, -64, -128, 7, 0, 7, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 4, 0, 2, 0, 4, 0, 10, 0, 0, 0, 10, 0, 1, 0, 2, 0, 8, 0, 1, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs(5, (int) (short) -1);
        methodVisitor69.visitIntInsn(65210, 83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitParameterAnnotation(24832, "\001", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("", "", "", (int) '#');
        int int53 = classWriter1.newMethod("", "hi!", "\007\000", true);
        classWriter1.visitSource("", "\007\000");
        int int61 = classWriter1.newMethod("", "", "", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int9 = classWriter1.newField("hi!", "", "hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        int int26 = classReader24.getAccess();
        int int28 = classReader24.readUnsignedShort(4);
        int int30 = classReader24.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter15.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (byte) 10, (-1), "", "", "", strArray39);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter46.visitEnd();
        classWriter46.visitSource("hi!", "");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter46.visit((int) 'a', (int) '4', "", "hi!", "", strArray62);
        byte[] byteArray64 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader65.accept((org.mockito.asm.ClassVisitor) classWriter67, 8);
        long long71 = classReader65.readLong(7);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter73.visitAnnotation("", true);
        int int79 = classWriter73.newNameType("hi!", "hi!");
        classReader65.accept((org.mockito.asm.ClassVisitor) classWriter73, (int) (byte) 0);
        java.lang.String[] strArray82 = classReader65.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter15.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray82);
        methodVisitor83.visitCode();
        methodVisitor83.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor83.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor83.visitAnnotationDefault();
        methodVisitor83.visitVarInsn(47806, (int) (short) 0);
        methodVisitor83.visitIntInsn(254, 6);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField(29285, "hi!", "\007\000", "", (java.lang.Object) methodVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@10a8ae3d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 6989595422067222633L + "'", long71 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = annotationVisitor80.visitArray("\001");
        annotationVisitor80.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("hi!", false);
        int int21 = classWriter1.newClass("");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readInt((int) (short) 1);
        int int8 = classReader5.header;
        byte[] byteArray9 = classReader5.b;
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int35 = classReader32.header;
        int int37 = classReader32.readInt(11);
        java.lang.String str38 = classReader32.getClassName();
        java.lang.String[] strArray39 = classReader32.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        char[] charArray72 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj73 = classReader61.readConst((int) (short) 1, charArray72);
        java.lang.Object obj74 = classReader32.readConst(1, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj75 = classReader5.readConst(3, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-21316096) + "'", int7 == (-21316096));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 223337 + "'", int37 == 223337);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\007\000" + "'", obj73, "\007\000");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "\007\000" + "'", obj74, "\007\000");
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMethodInsn((int) (short) 10, "\007\000", "\007\000", "");
        methodVisitor69.visitIincInsn((int) ' ', 0);
        methodVisitor69.visitIincInsn((int) (byte) 100, 0);
        methodVisitor69.visitIntInsn(52, (int) (short) 1792);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitMaxs((int) (byte) 100, 28);
        org.mockito.asm.Label label86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(52, "\007\000", "hi!", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("hi!", "");
        annotationVisitor11.visitEnum("", "", "hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor11.visitArray("hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor11.visitArray("");
        annotationVisitor11.visitEnum("\001", "hi!", "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        java.lang.String str11 = classReader4.getSuperName();
        int int12 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader4.getItem(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        methodVisitor69.visitMethodInsn(4, "", "\001", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int29 = classWriter1.newUTF8("hi!");
        org.mockito.asm.Attribute attribute30 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader21, 14);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = classReader21.getItem(47806);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47806");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitVarInsn(1, (int) (short) -17730);
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(16779008, label89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitVarInsn((int) (byte) -1, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn((int) (short) 0, 1919222016);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 47806);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        java.lang.String[] strArray13 = classReader4.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader4.readByte(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        byte[] byteArray53 = classReader20.b;
        byte[] byteArray54 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        classWriter57.visitSource("hi!", "");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter57.visit((int) 'a', (int) '4', "", "hi!", "", strArray73);
        byte[] byteArray75 = classWriter57.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter57.visitAnnotation("", false);
        byte[] byteArray79 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader80, 2);
        byte[] byteArray83 = classReader80.b;
        java.lang.String str84 = classReader80.getSuperName();
        java.lang.String[] strArray85 = classReader80.getInterfaces();
        int int86 = classReader80.header;
        char[] charArray92 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str93 = classReader80.readUTF8(20, charArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = classReader20.readUTF8(132864, charArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 103 + "'", int86 == 103);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1751720193);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter7.visit((int) 'a', (int) '4', "", "hi!", "", strArray23);
        byte[] byteArray25 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter28, 8);
        byte[] byteArray31 = classWriter28.toByteArray();
        int int33 = classWriter28.newClass("hi!");
        classWriter28.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray39 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader41, 196613);
        java.lang.String[] strArray44 = classReader41.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(21353, "\007\000", "\001", "", (java.lang.Object) classReader41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@9f1ff11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitMaxs((int) (byte) 100, 28);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitInsn(1399416686);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitParameterAnnotation((int) (short) -13570, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        int int48 = classWriter1.newMethod("", "hi!", "", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.Attribute attribute55 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        int int10 = classReader8.header;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader8, 29285);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 0);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 100);
        classWriter40.visitSource("\007\000", "\007\000");
        org.mockito.asm.Attribute attribute44 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter40.visitAttribute(attribute44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitFieldInsn(1, "", "", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("", 17);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor93.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", true);
        annotationVisitor90.visitEnum("\001", "\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = annotationVisitor90.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitFieldInsn(0, "", "hi!", "");
        methodVisitor69.visitIntInsn(196613, 202);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "\007\000");
        methodVisitor69.visitTypeInsn((int) (short) -17730, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        short short38 = classReader36.readShort(17);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader36.readByte(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        int int36 = classReader20.readByte((int) '4');
        short short38 = classReader20.readShort(14);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader20.readInt((int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26913 + "'", short38 == (short) 26913);
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "hi!", "", 9);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter31.visitAnnotation("", false);
        byte[] byteArray53 = classWriter31.toByteArray();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        java.lang.String[] strArray63 = classReader62.getInterfaces();
        short short65 = classReader62.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter31.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(223337, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.Attribute attribute68 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor67.visitAttribute(attribute68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) -326 + "'", short65 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor66);
        org.junit.Assert.assertNotNull(fieldVisitor67);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray27, 20, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readUnsignedShort(3);
        int int9 = classReader4.getAccess();
        int int11 = classReader4.readByte((int) (short) 1);
        byte[] byteArray12 = classReader4.b;
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader13.getItem((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48640 + "'", int8 == 48640);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 254 + "'", int11 == 254);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("", false);
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(196613, 88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitParameterAnnotation(0, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        classWriter29.visitEnd();
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter29.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int25 = classWriter20.newMethod("", "", "hi!", false);
        classWriter20.visitEnd();
        int int28 = classWriter20.newClass("");
        int int30 = classWriter20.newConst((java.lang.Object) (short) 0);
        classWriter20.visitInnerClass("hi!", "\007\000", "", 10);
        byte[] byteArray36 = classWriter20.toByteArray();
        classWriter20.visitOuterClass("hi!", "hi!", "\001");
        annotationVisitor17.visit("\001", (java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 3, 0, 0, 0, 0, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 8, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 10, 0, 1, 0, 7, 0, 9, 0, 1, 0, 10]");
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 28);
        java.lang.String str10 = classReader7.getSuperName();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        byte[] byteArray31 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader33, 256);
        int int37 = classReader33.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter61, 8);
        char[] charArray70 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj71 = classReader59.readConst((int) (short) 1, charArray70);
        java.lang.Object obj72 = classReader33.readConst(4, charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader7.readClass((int) (short) 100, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "\007\000" + "'", obj71, "\007\000");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "Lhi!;");
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(12);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter7.visitAnnotation("", true);
        classWriter7.visitSource("", "");
        classWriter7.visitSource("", "hi!");
        int int20 = classWriter7.newField("hi!", "hi!", "hi!");
        classWriter7.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter7.visitSource("", "");
        int int30 = classWriter7.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter7.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) ' ', "\007\000", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor34.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor34.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter53.visitEnd();
        classWriter53.visitSource("hi!", "");
        classWriter53.visitEnd();
        classWriter53.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter53.visitAnnotation("hi!", false);
        java.lang.Object obj67 = null;
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter53.visitField((-1), "", "", "", obj67);
        fieldVisitor68.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = fieldVisitor68.visitAnnotation("hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = classWriter28.newConst((java.lang.Object) annotationVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@311b805d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor26.visitArray("\007\000");
        annotationVisitor26.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitInsn(47806);
        methodVisitor69.visitInsn((int) '4');
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(190, label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\007\000", false);
        annotationVisitor87.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitIntInsn((-889275714), 3);
        methodVisitor69.visitIincInsn(5, (-1161953280));
        methodVisitor69.visitFieldInsn(1919222016, "\001", "", "\001");
        methodVisitor69.visitTypeInsn(151060483, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "hi!", "");
        classWriter1.visitInnerClass("hi!", "", "", (int) (short) 1280);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("\007\000", false);
        classWriter1.visitInnerClass("", "hi!", "\007\000", 52);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter61, 8);
        long long65 = classReader59.readLong(7);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter67.visitAnnotation("", true);
        int int73 = classWriter67.newNameType("hi!", "hi!");
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter67, (int) (byte) 0);
        byte[] byteArray76 = classReader59.b;
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter1.visitField(1763770624, "\007\000", "", "\007\000", (java.lang.Object) classReader77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@4a340135");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 6989595422067222633L + "'", long65 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "", "", 186);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitOuterClass("hi!", "\007\000", "hi!");
        int int52 = classWriter1.newNameType("\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter54.visitAnnotation("", true);
        classWriter54.visitSource("", "");
        classWriter54.visitSource("", "hi!");
        int int67 = classWriter54.newField("hi!", "hi!", "hi!");
        classWriter54.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter54.visitSource("", "");
        int int77 = classWriter54.newClass("hi!");
        classWriter54.visitInnerClass("hi!", "", "hi!", (-889275714));
        byte[] byteArray83 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = classWriter1.newConst((java.lang.Object) classReader84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@52db3382");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 18, 0, 2, 0, 3, 0, 6, 0, 1, 0, 32, 0, 3, 0, 6, 0, 2, -70, -66, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str23 = classReader22.getSuperName();
        long long25 = classReader22.readLong((int) (byte) 10);
        java.lang.String[] strArray26 = classReader22.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            short short28 = classReader22.readShort(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 72061341013180672L + "'", long25 == 72061341013180672L);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter22.visitAnnotation("", true);
        classWriter22.visitInnerClass("hi!", "", "\007\000", 8);
        java.lang.Class<?> wildcardClass41 = classWriter22.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        classWriter1.visitSource("\007\000", "hi!");
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        byte[] byteArray46 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        java.lang.String[] strArray48 = classReader47.getInterfaces();
        int int50 = classReader47.readInt((int) (byte) 0);
        java.lang.String str51 = classReader47.getSuperName();
        java.lang.String[] strArray52 = classReader47.getInterfaces();
        byte[] byteArray53 = classReader47.b;
        int int54 = classReader47.header;
        int int55 = classReader47.header;
        java.lang.String[] strArray56 = classReader47.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter1.visitMethod(83, "", "hi!", "", strArray56);
        org.mockito.asm.Label label59 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor57.visitJumpInsn((int) 'a', label59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-889275714) + "'", int50 == (-889275714));
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("\007\000", "hi!", "");
        int int18 = classWriter1.newField("\007\000", "\007\000", "hi!");
        int int20 = classWriter1.newClass("\007\000");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = classReader5.getItem(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitMethodInsn(0, "", "\007\000", "");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(15, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(48640, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(51966, (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("\007\000", false);
        annotationVisitor88.visitEnum("\007\000", "\001", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitFieldInsn(16778088, "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitTypeInsn(8, "");
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "hi!", "\007\000", label90, label91, 1919222016);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitIntInsn((-889275714), 3);
        methodVisitor69.visitMethodInsn(48640, "", "hi!", "");
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int37 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter32.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        classWriter47.visitSource("", "");
        classWriter47.visitSource("", "hi!");
        int int60 = classWriter47.newField("hi!", "hi!", "hi!");
        int int64 = classWriter47.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter32.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor65.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter25.visitField(9, "", "", "", (java.lang.Object) "hi!");
        classWriter25.visitEnd();
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter79.visitEnd();
        byte[] byteArray81 = classWriter79.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        java.lang.String[] strArray83 = classReader82.getInterfaces();
        int int85 = classReader82.readInt((int) (byte) 0);
        java.lang.String str86 = classReader82.getSuperName();
        java.lang.String[] strArray87 = classReader82.getInterfaces();
        byte[] byteArray88 = classReader82.b;
        int int89 = classReader82.header;
        int int90 = classReader82.header;
        java.lang.String[] strArray91 = classReader82.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter25.visitMethod(196612, "\001", "", "", strArray91);
        methodVisitor92.visitMethodInsn(20, "\001", "hi!", "");
        methodVisitor92.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-889275714) + "'", int85 == (-889275714));
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(methodVisitor92);
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("\007\000", false);
        int int39 = classWriter1.newNameType("\007\000", "");
        byte[] byteArray40 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 13 + "'", int39 == 13);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 7, 0, 3, 9, 0, 7, 0, 4, 12, 0, 3, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 10, 12, 0, 3, 0, 10, 12, 0, 10, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 4, 0, 11, 0, 12, 0, 15, 0, 0, 0, 10, 0, 1, 0, 7, 0, 7, 0, 1, 0, 7, 0, 16, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 17, 0, 0, 0, 6, 0, 1, 0, 10, 0, 0]");
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        byte[] byteArray9 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = classReader4.readLong((int) (short) 24832);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader4, 103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter25.visitInnerClass("hi!", "", "", (int) 'a');
        int int51 = classWriter25.newField("", "hi!", "hi!");
        int int56 = classWriter25.newMethod("", "hi!", "hi!", true);
        int int58 = classWriter25.newUTF8("hi!");
        int int63 = classWriter25.newMethod("", "", "\007\000", true);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter70.visitEnd();
        byte[] byteArray72 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        java.lang.String[] strArray74 = classReader73.getInterfaces();
        int int75 = classReader73.getAccess();
        int int77 = classReader73.readUnsignedShort(4);
        int int79 = classReader73.readByte(5);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        java.lang.String[] strArray81 = classReader73.getInterfaces();
        classWriter25.visit(186, 0, "\007\000", "hi!", "hi!", strArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor83 = classWriter1.visitMethod(16777223, "\007\000", "hi!", "\001", strArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "\001");
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitIincInsn(196613, (-1));
        methodVisitor69.visitFieldInsn((int) (byte) -1, "\007\000", "hi!", "");
        methodVisitor69.visitIincInsn(26729, 16777216);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader5.readByte(0);
        byte[] byteArray8 = classReader5.b;
        java.lang.String[] strArray9 = classReader5.getInterfaces();
        int int10 = classReader5.getAccess();
        char[] charArray18 = new char[] { ' ', '#', '4', '#', '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = classReader5.readClass((int) (byte) 10, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 202 + "'", int7 == 202);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " #4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " #4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , #, 4, #, #,  ]");
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitMaxs((int) (byte) 100, 28);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitVarInsn((-889275714), 256);
        methodVisitor69.visitInsn((int) (short) -326);
        methodVisitor69.visitIntInsn(100, 33554688);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(13);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, (-889275714));
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        org.mockito.asm.Label label74 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(33554688, label74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitIntInsn((-889275714), 3);
        methodVisitor69.visitIincInsn(5, (-1161953280));
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitParameterAnnotation(38, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        int int27 = classReader24.header;
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader24.readUnsignedShort((int) (short) 26978);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26978");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 103 + "'", int27 == 103);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        classWriter1.visitSource("hi!", "\007\000");
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor37.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = annotationVisitor40.visitArray("\007\000");
        annotationVisitor40.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 65210);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitMethodInsn((-1), "hi!", "", "hi!");
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "\001", "\007\000", label83, label84, (int) (short) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 73);
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter20.visitEnd();
        classWriter20.visitSource("hi!", "");
        classWriter20.visitEnd();
        byte[] byteArray26 = classWriter20.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter32.visitAnnotation("", true);
        classWriter32.visitSource("", "");
        classWriter32.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter32.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter32.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter20.visitField(100, "", "hi!", "", (java.lang.Object) "");
        fieldVisitor52.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = fieldVisitor52.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = fieldVisitor52.visitAnnotation("", false);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = classWriter1.newConst((java.lang.Object) fieldVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@5d9f91fc");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(65536, label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitIntInsn(11, (int) (short) 0);
        methodVisitor69.visitFieldInsn(0, "\007\000", "hi!", "hi!");
        methodVisitor69.visitIincInsn(20, 28526);
        methodVisitor69.visitIincInsn(151060483, 512);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitParameterAnnotation((int) '#', "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        int int31 = classReader20.readByte((int) '4');
        int int33 = classReader20.readUnsignedShort(9);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        byte[] byteArray54 = classWriter36.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter36.visitAnnotation("", false);
        byte[] byteArray58 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader59, 2);
        byte[] byteArray62 = classReader59.b;
        java.lang.String str63 = classReader59.getSuperName();
        java.lang.String[] strArray64 = classReader59.getInterfaces();
        int int65 = classReader59.header;
        char[] charArray71 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str72 = classReader59.readUTF8(20, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = classReader20.readUTF8(51966, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2049 + "'", int33 == 2049);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 103 + "'", int65 == 103);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitInsn(26729);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter1.visitAnnotation("\007\000", true);
        byte[] byteArray64 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 52, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 3, 7, -64, -128, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 100, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 4, 0, 2, 0, 5, 0, 9, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 3, 0, 10, 0, 10, 0, 0, 0, 6, 0, 1, 0, 6, 0, 0]");
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor42.visitAnnotation("", "");
        annotationVisitor45.visitEnum("hi!", "\007\000", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitVarInsn((int) (short) 100, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor80.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor80.visitArray("\007\000");
        annotationVisitor80.visitEnum("hi!", "hi!", "hi!");
        annotationVisitor80.visitEnum("\007\000", "hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitIincInsn((int) (short) 10, 11);
        methodVisitor69.visitInsn(3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader4.readUnsignedShort(1751720193);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1751720193");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("\007\000", true);
        java.lang.Class<?> wildcardClass93 = methodVisitor69.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("hi!", false);
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor34.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor43.visitArray("\007\000");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        byte[] byteArray50 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        java.lang.String[] strArray52 = classReader51.getInterfaces();
        java.lang.String str53 = classReader51.getSuperName();
        int int54 = classReader51.header;
        int int56 = classReader51.readByte((int) (byte) 1);
        annotationVisitor45.visit("\007\000", (java.lang.Object) (byte) 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 254 + "'", int56 == 254);
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitIincInsn(1, 28);
        methodVisitor69.visitIincInsn((int) (short) 1280, 103);
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(1025, 114, label96, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(254, label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        methodVisitor69.visitMethodInsn((int) (short) -326, "", "", "hi!");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(7, label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(51966, (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = annotationVisitor88.visitAnnotation("", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        byte[] byteArray34 = classReader24.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 47806, 16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader20.readByte(1763770624);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1763770624");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readInt(6);
        int int9 = classReader4.header;
        byte[] byteArray10 = classReader4.b;
        long long12 = classReader4.readLong((int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        byte[] byteArray11 = classReader4.b;
        short short13 = classReader4.readShort(12);
        int int14 = classReader4.header;
        int int16 = classReader4.readByte((int) (short) 4);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader4.getItem((int) (short) 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26913");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn(29285, "hi!", "", "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\001", 88);
        methodVisitor69.visitLdcInsn((java.lang.Object) (-91551935198371584L));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("", true);
        int int41 = classWriter1.newField("hi!", "hi!", "");
        classWriter1.visitSource("\007\000", "\001");
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getSuperName();
        java.lang.String[] strArray29 = classReader24.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader24.readByte(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray29);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray34, 65536, (-1161953280));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        int int10 = classReader4.readByte(14);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        byte[] byteArray31 = classWriter13.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter13.visitAnnotation("", false);
        byte[] byteArray35 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader36, 2);
        byte[] byteArray39 = classReader36.b;
        java.lang.String str40 = classReader36.getSuperName();
        java.lang.String[] strArray41 = classReader36.getInterfaces();
        int int42 = classReader36.header;
        char[] charArray48 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str49 = classReader36.readUTF8(20, charArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = classReader4.readUTF8((int) (byte) 1, charArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 103 + "'", int42 == 103);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitIincInsn(100, 0);
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn(1399416686, 196613);
        methodVisitor69.visitMaxs(9, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitParameterAnnotation(65536, "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        java.lang.String str11 = classReader4.getSuperName();
        java.lang.String[] strArray12 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        classWriter26.visit((int) (byte) 1, 100, "", "hi!", "", strArray66);
        classWriter14.visit((int) '4', (int) (short) 100, "", "", "", strArray66);
        classWriter14.visitOuterClass("", "", "");
        classWriter14.visitSource("", "\007\000");
        classWriter14.visitSource("", "");
        int int81 = classWriter14.newClass("hi!");
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs(5, (int) (short) -1);
        methodVisitor69.visitIntInsn(65210, 83);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\007\000", "\001", label92, label93, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\001", "", "");
        classWriter1.visitSource("", "");
        int int28 = classWriter1.newField("", "\001", "\007\000");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("", "");
        int int41 = classWriter34.newNameType("hi!", "");
        classWriter34.visitInnerClass("\007\000", "", "hi!", 202);
        byte[] byteArray47 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        java.lang.String[] strArray49 = classReader48.getInterfaces();
        java.lang.String[] strArray50 = classReader48.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod(0, "\001", "", "\007\000", strArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 6, 0, 2, 0, -54]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitParameterAnnotation(1399416686, "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label71 = null;
        org.mockito.asm.Label label72 = null;
        org.mockito.asm.Label label73 = null;
        methodVisitor69.visitTryCatchBlock(label71, label72, label73, "hi!");
        org.mockito.asm.Label label76 = null;
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        methodVisitor69.visitTryCatchBlock(label76, label77, label78, "\007\000");
        methodVisitor69.visitVarInsn(11, (int) (short) 29285);
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        int int19 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor22.visitArray("\007\000");
        annotationVisitor24.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitInsn(2);
        methodVisitor69.visitIntInsn(2, 4);
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        java.lang.String str38 = classReader35.getSuperName();
        long long40 = classReader35.readLong((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter42.visitSource("", "hi!");
        classWriter42.visitOuterClass("hi!", "", "");
        classWriter42.visitEnd();
        classWriter42.visitInnerClass("", "", "", 48640);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        classWriter57.visitSource("hi!", "");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter57.visit((int) 'a', (int) '4', "", "hi!", "", strArray73);
        byte[] byteArray75 = classWriter57.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter57.visitAnnotation("", false);
        byte[] byteArray79 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray83 = new org.mockito.asm.Attribute[] {};
        classReader80.accept((org.mockito.asm.ClassVisitor) classWriter82, attributeArray83, (int) (short) 0);
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter42, attributeArray83, 256);
        // The following exception was thrown during execution in test generation
        try {
            long long89 = classReader35.readLong(190);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3819410108757049247L) + "'", long40 == (-3819410108757049247L));
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray83);
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newClass("hi!");
        java.lang.String[] strArray19 = null;
        classWriter1.visit(13, (int) (short) -1, "\007\000", "", "", strArray19);
        classWriter1.visitInnerClass("\007\000", "hi!", "", (-889275714));
        classWriter1.visitInnerClass("\001", "\001", "\001", (int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter39.visitAnnotation("", false);
        byte[] byteArray61 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(classReader62, 2);
        byte[] byteArray65 = classReader62.b;
        java.lang.String str66 = classReader62.getClassName();
        short short68 = classReader62.readShort((int) (short) 10);
        byte[] byteArray69 = classReader62.b;
        java.lang.String[] strArray70 = classReader62.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor71 = classWriter1.visitMethod(83886080, "hi!", "", "", strArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 256 + "'", short68 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray70);
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        java.lang.String[] strArray32 = classReader31.getInterfaces();
        int int33 = classReader31.getAccess();
        int int35 = classReader31.readUnsignedShort(4);
        int int37 = classReader31.readByte(5);
        java.lang.String[] strArray38 = classReader31.getInterfaces();
        java.lang.String str39 = classReader31.getSuperName();
        java.lang.String str40 = classReader31.getSuperName();
        int int42 = classReader31.readByte((int) (byte) 0);
        java.lang.String[] strArray43 = classReader31.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod(17, "\001", "\007\000", "\001", strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 202 + "'", int42 == 202);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(9, "", "", "hi!");
        methodVisitor69.visitIincInsn((int) (short) 100, 256);
        methodVisitor69.visitIntInsn(254, 8);
        methodVisitor69.visitIincInsn(196612, 48640);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        short short40 = classReader37.readShort((int) (byte) 1);
        java.lang.String str41 = classReader37.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField(223337, "\007\000", "hi!", "", (java.lang.Object) str41);
        int int46 = classWriter1.newField("\007\000", "\001", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -326 + "'", short40 == (short) -326);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray10 = classReader9.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader9.readByte(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", 0);
        byte[] byteArray58 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int64 = classWriter1.newMethod("\007\000", "\007\000", "\001", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 2, 7, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 8, 0, 0, 0, 2, 0, 1, 0, 9, 0, 0, 0, 3, 104, 105, 33, 0, 10, 0, 0, 0, 10, 0, 1, 0, 4, 0, 5, 0, 1, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 16 + "'", int64 == 16);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter37.visitSource("", "hi!");
        classWriter37.visitOuterClass("", "", "");
        classWriter37.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int52 = classWriter37.newNameType("", "\007\000");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter37, 6);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = classReader20.readByte(512);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 512");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitTypeInsn(114, "");
        methodVisitor69.visitIntInsn((int) (byte) 1, 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        int int10 = classReader4.header;
        byte[] byteArray11 = classReader4.b;
        int int12 = classReader4.header;
        java.lang.String str13 = classReader4.getSuperName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter16.visit((int) 'a', (int) '4', "", "hi!", "", strArray32);
        byte[] byteArray34 = classWriter16.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter16.visitAnnotation("", false);
        byte[] byteArray38 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader39, 2);
        byte[] byteArray42 = classReader39.b;
        java.lang.String str43 = classReader39.getSuperName();
        java.lang.String[] strArray44 = classReader39.getInterfaces();
        int int45 = classReader39.header;
        char[] charArray51 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str52 = classReader39.readUTF8(20, charArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = classReader4.readUTF8((int) (short) 10, charArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 103 + "'", int45 == 103);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "\uaf80\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "\uaf80\000\000\000");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "\uaf80, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = annotationVisitor6.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = annotationVisitor6.visitAnnotation("\007\000", "hi!");
        annotationVisitor12.visitEnum("", "\007\000", "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitMethodInsn(47806, "hi!", "hi!", "hi!");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String str9 = classReader4.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = classReader4.readLong(83886080);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        int int46 = classWriter1.newUTF8("");
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter55.visit((int) 'a', (int) '4', "", "hi!", "", strArray71);
        classWriter55.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classWriter55.visitSource("", "\007\000");
        int int86 = classWriter55.newUTF8("\007\000");
        int int89 = classWriter55.newNameType("\001", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor90 = classWriter1.visitField(51966, "hi!", "hi!", "\001", (java.lang.Object) "\001");
        classWriter1.visitInnerClass("\007\000", "\007\000", "", (int) (short) 26978);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(fieldVisitor90);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 1792, "", "", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("", 7);
        methodVisitor69.visitFieldInsn(132864, "hi!", "\007\000", "hi!");
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int37 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter32.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        classWriter47.visitSource("", "");
        classWriter47.visitSource("", "hi!");
        int int60 = classWriter47.newField("hi!", "hi!", "hi!");
        int int64 = classWriter47.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter32.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor65.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter25.visitField(9, "", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("\007\000", false);
        annotationVisitor75.visitEnum("hi!", "", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        byte[] byteArray9 = classReader4.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter60.visitEnd();
        classWriter60.visitSource("hi!", "");
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter60.visit((int) 'a', (int) '4', "", "hi!", "", strArray76);
        classWriter36.visit(2, 7, "", "", "hi!", strArray76);
        byte[] byteArray79 = classWriter36.toByteArray();
        classWriter36.visitInnerClass("hi!", "", "hi!", 3);
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        classWriter36.visitInnerClass("\007\000", "\007\000", "hi!", (int) (short) 0);
        classWriter36.visitSource("", "\007\000");
        classWriter36.visitSource("", "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            classReader10.accept((org.mockito.asm.ClassVisitor) classWriter36, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        int int25 = classWriter1.newMethod("", "\007\000", "", false);
        int int27 = classWriter1.newClass("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(51, "", "\007\000", "\001");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label82 = null;
        int[] intArray85 = new int[] { 16777223, 1025 };
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label[] labelArray87 = new org.mockito.asm.Label[] { label86 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label82, intArray85, labelArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[16777223, 1025]");
        org.junit.Assert.assertNotNull(labelArray87);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor11.visitAnnotation("\007\000", "");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor11.visitArray("\007\000");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitInsn((int) (short) -1);
        methodVisitor69.visitInsn(83886080);
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(116, label92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitIntInsn(0, 0);
        methodVisitor69.visitMaxs(4, (int) (short) 0);
        methodVisitor69.visitIincInsn((-21316096), (int) (short) 1);
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(0, label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray14 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        byte[] byteArray24 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray24);
        java.lang.String[] strArray26 = classReader25.getInterfaces();
        int int27 = classReader25.getAccess();
        int int29 = classReader25.readUnsignedShort(4);
        int int31 = classReader25.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter16.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (byte) 10, (-1), "", "", "", strArray40);
        int int43 = classWriter16.newClass("hi!");
        int int45 = classWriter16.newClass("hi!");
        classWriter16.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter16.visitAnnotation("", true);
        java.lang.String[] strArray58 = null;
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter16.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray58);
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter16, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.getItem(196612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196612");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn((int) (byte) 0, "", "hi!", "\007\000");
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitVarInsn(0, (-1161953280));
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readUnsignedShort(3);
        int int9 = classReader4.getAccess();
        int int11 = classReader4.readByte((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader4.readByte((int) (short) 29285);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29285");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48640 + "'", int8 == 48640);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 254 + "'", int11 == 254);
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitIntInsn(0, 0);
        methodVisitor69.visitTypeInsn((int) 'a', "");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 5);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label[] labelArray86 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(65536, 24832, label85, labelArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray86);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitVarInsn(1, 16778088);
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] { label87 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(256, 151060483, label86, labelArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 0);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        int int10 = classReader4.header;
        int int11 = classReader4.header;
        int int13 = classReader4.readUnsignedShort(9);
        int int14 = classReader4.getAccess();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter38, 8);
        char[] charArray47 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj48 = classReader36.readConst((int) (short) 1, charArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = classReader4.readUTF8(1792, charArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 256 + "'", int13 == 256);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + "\007\000" + "'", obj48, "\007\000");
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = classReader24.readLong(1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor73.visitEnum("\007\000", "hi!", "\001");
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter80.visitEnd();
        byte[] byteArray82 = classWriter80.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        java.lang.String[] strArray84 = classReader83.getInterfaces();
        int int86 = classReader83.readUnsignedShort(1);
        long long88 = classReader83.readLong(0);
        byte[] byteArray89 = classReader83.b;
        int int90 = classReader83.header;
        byte[] byteArray91 = classReader83.b;
        int int93 = classReader83.readInt(0);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor73.visit("", (java.lang.Object) classReader83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@28683bd2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 65210 + "'", int86 == 65210);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-3819410108757049344L) + "'", long88 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-889275714) + "'", int93 == (-889275714));
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "\001", "");
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "hi!");
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) 8449, (int) (byte) 1, label96, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classReader21.b;
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            short short30 = classReader28.readShort((int) (short) 24948);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24948");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 0);
        methodVisitor69.visitTypeInsn((int) '#', "");
        methodVisitor69.visitIntInsn(65536, 223337);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        int int22 = classReader20.readInt((int) '#');
        int int24 = classReader20.readInt((int) (short) 3);
        java.lang.String str25 = classReader20.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = classReader20.getItem(196612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196612");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1919222016 + "'", int22 == 1919222016);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1107296256) + "'", int24 == (-1107296256));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = annotationVisitor88.visitArray("");
        annotationVisitor88.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        methodVisitor69.visitIincInsn(3, (int) ' ');
        methodVisitor69.visitIincInsn(12, 151060483);
        methodVisitor69.visitMaxs(26729, 196612);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        int int28 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        classWriter30.visitEnd();
        int int37 = classWriter30.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter30.visitAnnotation("hi!", true);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, 0);
        long long47 = classReader24.readLong(0);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classReader24.getItem((int) (short) 8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8449");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-3819410108757049247L) + "'", long47 == (-3819410108757049247L));
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitIntInsn((int) (short) 10, (int) (short) 1);
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(83, label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt(4);
        short short9 = classReader4.readShort(13);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int36 = classReader32.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter60, 8);
        char[] charArray69 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj70 = classReader58.readConst((int) (short) 1, charArray69);
        java.lang.Object obj71 = classReader32.readConst(4, charArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader4.readClass((int) (byte) 10, charArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "\007\000" + "'", obj70, "\007\000");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "Lhi!;");
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        methodVisitor69.visitMethodInsn((int) (short) -326, "", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn((int) (short) -13570, "\007\000", "", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitVarInsn(186, 51);
        methodVisitor69.visitIntInsn(119, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = annotationVisitor85.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = annotationVisitor85.visitArray("hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readInt(6);
        int int9 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        methodVisitor69.visitTypeInsn(11, "");
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        int int9 = classReader8.header;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = classReader8.readLong((int) (short) 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitVarInsn((int) (byte) -1, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn((int) (short) 0, 1919222016);
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(7, (-1));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitInsn(2);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitInsn(2);
        methodVisitor69.visitIntInsn(2, 4);
        methodVisitor69.visitTypeInsn((-1161953280), "\001");
        methodVisitor69.visitMultiANewArrayInsn("", 4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray8);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter12.visitAnnotation("", false);
        byte[] byteArray34 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 2);
        byte[] byteArray38 = classReader35.b;
        java.lang.String str39 = classReader35.getSuperName();
        java.lang.String[] strArray40 = classReader35.getInterfaces();
        int int41 = classReader35.header;
        char[] charArray47 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str48 = classReader35.readUTF8(20, charArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = classReader9.readConst(28526, charArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28526");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 103 + "'", int41 == 103);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("", false);
        int int37 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("hi!", "hi!", "", 256);
        java.lang.Object obj43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classWriter1.newConst(obj43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        long long28 = classReader24.readLong(100);
        java.lang.String str29 = classReader24.getSuperName();
        byte[] byteArray30 = classReader24.b;
        java.lang.String str31 = classReader24.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 8029481630357783296L + "'", long28 == 8029481630357783296L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(13, (int) (short) -1);
        methodVisitor69.visitVarInsn(196613, (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitIntInsn((-1107296256), (int) (byte) 10);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        classWriter12.visitInnerClass("hi!", "", "", (int) 'a');
        int int38 = classWriter12.newField("", "hi!", "hi!");
        int int43 = classWriter12.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter12.visitAnnotation("", false);
        classWriter12.visitSource("", "hi!");
        classWriter12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter12.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor53.visitAnnotation("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter1.visitField(57174305, "", "", "", (java.lang.Object) "");
        fieldVisitor57.visitEnd();
        org.mockito.asm.Attribute attribute59 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor57.visitAttribute(attribute59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor57);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(16777223);
        classWriter1.visitInnerClass("", "hi!", "hi!", 51);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int8 = classReader4.readUnsignedShort(12);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader4.getItem(88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 88");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(16778088);
        classWriter1.visitInnerClass("\007\000", "\007\000", "hi!", (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter8.visitAnnotation("", true);
        classWriter8.visitSource("", "");
        classWriter8.visitSource("", "hi!");
        int int21 = classWriter8.newField("hi!", "hi!", "hi!");
        classWriter8.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter8.visitSource("", "");
        classWriter8.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter8.visitAnnotation("hi!", false);
        classWriter8.visitEnd();
        classWriter8.visitInnerClass("", "", "", (int) (short) 0);
        int int42 = classWriter1.newConst((java.lang.Object) "");
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray5, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray5, 12, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray5, 52, 47806);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("", true);
        annotationVisitor7.visitEnum("", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor7.visitAnnotation("\001", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        classWriter23.visitInnerClass("\001", "\007\000", "", 196612);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        classWriter34.visitInnerClass("hi!", "", "", (int) 'a');
        int int60 = classWriter34.newField("", "hi!", "hi!");
        int int65 = classWriter34.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter34.visitAnnotation("hi!", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter23.visitField((-1107296256), "", "\001", "\007\000", (java.lang.Object) annotationVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@7d7545a9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7 + "'", int65 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("hi!", "");
        annotationVisitor11.visitEnum("", "", "hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor11.visitArray("hi!");
        annotationVisitor18.visitEnum("", "hi!", "");
        annotationVisitor18.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("", true);
        int int33 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitOuterClass("", "\007\000", "");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        byte[] byteArray45 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        int int48 = classReader46.readUnsignedShort((int) (short) 0);
        java.lang.String str49 = classReader46.getSuperName();
        short short51 = classReader46.readShort(5);
        java.lang.String[] strArray52 = classReader46.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor53 = classWriter1.visitMethod(51966, "\001", "", "\001", strArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 51966 + "'", int48 == 51966);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNotNull(strArray52);
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, (-1));
        int int29 = classReader24.getItem(0);
        short short31 = classReader24.readShort((int) '4');
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 5203 + "'", short31 == (short) 5203);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((int) (byte) 10, 15);
        methodVisitor69.visitVarInsn((int) (short) 97, 132864);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        int int7 = classReader4.header;
        int int9 = classReader4.readByte(0);
        java.lang.String str10 = classReader4.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.readUnsignedShort(104);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 104");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 202 + "'", int9 == 202);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader20.getItem((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitFieldInsn((int) (byte) 10, "", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotation("\007\000", true);
        annotationVisitor95.visitEnum("\007\000", "hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        byte[] byteArray78 = classReader20.b;
        int int79 = classReader20.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short81 = classReader20.readShort(16777217);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16777217");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("hi!", false);
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor34.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor43.visitArray("\007\000");
        annotationVisitor43.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        int int7 = classReader4.readByte(10);
        int int8 = classReader4.getAccess();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader31.accept((org.mockito.asm.ClassVisitor) classWriter33, 8);
        long long37 = classReader31.readLong(7);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter39.visitAnnotation("", true);
        int int45 = classWriter39.newNameType("hi!", "hi!");
        classReader31.accept((org.mockito.asm.ClassVisitor) classWriter39, (int) (byte) 0);
        int int49 = classReader31.getItem(0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        classWriter52.visitSource("hi!", "");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter52.visit((int) 'a', (int) '4', "", "hi!", "", strArray68);
        byte[] byteArray70 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader71.accept((org.mockito.asm.ClassVisitor) classWriter73, 8);
        char[] charArray82 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj83 = classReader71.readConst((int) (short) 1, charArray82);
        java.lang.String str84 = classReader31.readUTF8(103, charArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = classReader4.readClass(116, charArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 6989595422067222633L + "'", long37 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "\007\000" + "'", obj83, "\007\000");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        int int32 = classReader24.readByte(28);
        int int33 = classReader24.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        classWriter35.visitOuterClass("hi!", "", "hi!");
        classWriter35.visitInnerClass("hi!", "hi!", "", 256);
        int int65 = classWriter35.newField("\007\000", "", "");
        int int67 = classWriter35.newClass("");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter35, (int) (short) 29285);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = classReader24.getItem(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 83 + "'", int32 == 83);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        classWriter42.visitEnd();
        byte[] byteArray48 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray48);
        annotationVisitor39.visit("", (java.lang.Object) byteArray48);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader5.readByte(0);
        byte[] byteArray8 = classReader5.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray8, 52, 151060483);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 202 + "'", int7 == 202);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 1792, "", "", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 151060483);
        methodVisitor69.visitInsn(1025);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotation("\007\000", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        int int10 = classReader4.readByte(14);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader4, 116);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        int int51 = classWriter1.newClass("");
        classWriter1.visitOuterClass("\001", "", "\001");
        classWriter1.visitSource("hi!", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        int int7 = classReader5.header;
        int int9 = classReader5.readUnsignedShort(8);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader5, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("\007\000", "");
        int int24 = classWriter1.newNameType("hi!", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        methodVisitor69.visitIincInsn(3, (int) ' ');
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "");
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 0);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        methodVisitor69.visitVarInsn(151060483, 33554688);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "hi!", "\007\000", label77, label78, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        int int35 = classWriter28.newUTF8("");
        classWriter28.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter28.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor42.visitAnnotation("hi!", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter1.visitField((int) (short) 10, "hi!", "\007\000", "", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = fieldVisitor46.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = fieldVisitor46.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute53 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor46.visitAttribute(attribute53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        int int11 = classWriter1.newField("", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        annotationVisitor14.visit("\007\000", (java.lang.Object) 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        classWriter38.visitSource("hi!", "hi!");
        classWriter38.visitSource("", "hi!");
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter38.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray75 = classWriter74.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray75, (int) (byte) 0, (-1));
        long long80 = classReader78.readLong(12);
        methodVisitor69.visitLdcInsn((java.lang.Object) 12);
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((-1107296256), 16777217, label84, labelArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(labelArray85);
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        byte[] byteArray13 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        byte[] byteArray15 = classReader14.b;
        int int17 = classReader14.readByte(10);
        java.lang.String str18 = classReader14.getSuperName();
        java.lang.String[] strArray19 = classReader14.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "", "\007\000", "", strArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(1763770624, "hi!", "\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotation("\007\000", true);
        annotationVisitor86.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter7.visit((int) 'a', (int) '4', "", "hi!", "", strArray23);
        byte[] byteArray25 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter28, 8);
        long long32 = classReader26.readLong(7);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter34.visitAnnotation("", true);
        int int40 = classWriter34.newNameType("hi!", "hi!");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter34, (int) (byte) 0);
        java.lang.String[] strArray43 = classReader26.getInterfaces();
        java.lang.String[] strArray44 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(5, "\007\000", "\001", "", (java.lang.Object) strArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@b5d9750");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 6989595422067222633L + "'", long32 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
    }
}
